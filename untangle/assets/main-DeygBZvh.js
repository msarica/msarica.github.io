(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function e(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(n){if(n.ep)return;n.ep=!0;const s=e(n);fetch(n.href,s)}})();class d{static distance(t,e){const i=e.x-t.x,n=e.y-t.y;return Math.sqrt(i*i+n*n)}static pointInCircle(t,e,i){return this.distance(t,e)<=i}static lineSegmentsIntersect(t,e,i,n){const s=(n.y-i.y)*(e.x-t.x)-(n.x-i.x)*(e.y-t.y);if(Math.abs(s)<1e-10)return!1;const a=((n.x-i.x)*(t.y-i.y)-(n.y-i.y)*(t.x-i.x))/s,r=((e.x-t.x)*(t.y-i.y)-(e.y-t.y)*(t.x-i.x))/s;return a>=0&&a<=1&&r>=0&&r<=1}static randomPosition(t,e,i=50){return{x:i+Math.random()*(t-2*i),y:i+Math.random()*(e-2*i)}}static randomPositionDistributed(t,e,i=50){const n=Math.floor(Math.sqrt((t-2*i)*(e-2*i)/(i*i))),s=Math.floor((e-2*i)/i),a=(t-2*i)/n,r=(e-2*i)/s,o=Math.floor(Math.random()*n),c=Math.floor(Math.random()*s);return{x:i+o*a+Math.random()*a,y:i+c*r+Math.random()*r}}static clamp(t,e,i){return Math.min(Math.max(t,e),i)}}class p{static CIRCLE_RADIUS=30;static MIN_DISTANCE=120;static generateLevel(t,e,i){if(i&&i.levelNumber===t&&i.canvasSize.x===e.x&&i.canvasSize.y===e.y)return{circles:this.deepCopyCircles(i.circles),lines:this.deepCopyLines(i.lines),solution:i.solution?{circles:this.deepCopyCircles(i.solution.circles),lines:this.deepCopyLines(i.solution.lines)}:void 0};const{nodeCount:n,connectionsPerNode:s}=this.calculateLevelParameters(t);return this.generateSolvableLevel(n,s,e)}static calculateLevelParameters(t){const n=Math.floor((t-1)/3),s=(t-1)%3,a=6+n,r=3+s;return{nodeCount:a,connectionsPerNode:r}}static generateSolvableLevel(t,e,i){const n=this.createNonIntersectingLayout(t,i),s=this.generateNonIntersectingConnections(n,e),a={circles:this.deepCopyCircles(n),lines:this.deepCopyLines(s)};this.verifySolutionNonIntersecting(a.circles,a.lines),this.scrambleNodePositions(n,i);const r=Math.min(...n.map(o=>o.connections.length));return console.log(`Generated level: ${n.length} nodes, ${s.length} lines`),r<3&&console.error("ERROR: Some nodes have fewer than 3 connections!"),{circles:n,lines:s,solution:a}}static createNonIntersectingLayout(t,e){const i=[],s=e.x/2,a=e.y/2,r=Math.min(e.x,e.y)/2-100;for(let o=0;o<t;o++){const c=2*Math.PI*o/t,l=s+r*Math.cos(c),h=a+r*Math.sin(c);i.push({id:o,position:{x:l,y:h},radius:this.CIRCLE_RADIUS,isDragging:!1,connections:[]})}return i}static generateNonIntersectingConnections(t,e){const i=[],n=new Set;t.forEach(o=>o.connections=[]);const s=t.map(o=>({circle:o,priority:0}));let a=0;const r=1e3;for(;a<r;){s.sort((c,l)=>{const h=Math.max(0,3-c.circle.connections.length);return Math.max(0,3-l.circle.connections.length)-h});let o=!1;for(const c of s){const l=c.circle;if(l.connections.length>=3)continue;const h=this.findBestNonIntersectingConnectionTarget(l,t,e,n,i);if(!h)continue;const u=`${Math.min(l.id,h.id)}-${Math.max(l.id,h.id)}`;l.connections.push(h.id),h.connections.push(l.id),n.add(u),i.push({from:l.id,to:h.id,isIntersecting:!1}),o=!0;break}if(!o)break;a++}return t.forEach(o=>{for(;o.connections.length<e;){const c=this.findBestNonIntersectingConnectionTarget(o,t,e,n,i);if(!c)break;const l=`${Math.min(o.id,c.id)}-${Math.max(o.id,c.id)}`;o.connections.push(c.id),c.connections.push(o.id),n.add(l),i.push({from:o.id,to:c.id,isIntersecting:!1})}}),i}static findBestNonIntersectingConnectionTarget(t,e,i,n,s){const a=e.filter(o=>o.id!==t.id&&o.connections.length<i&&!t.connections.includes(o.id));if(a.length===0)return null;const r=a.sort((o,c)=>{const l=d.distance(t.position,o.position),h=d.distance(t.position,c.position);return l-h});for(const o of r){const c=`${Math.min(t.id,o.id)}-${Math.max(t.id,o.id)}`;if(n.has(c))continue;if(!this.wouldLineIntersect(t.position,o.position,s,e))return o}return null}static wouldLineIntersect(t,e,i,n){for(const s of i){const a=n.find(o=>o.id===s.from),r=n.find(o=>o.id===s.to);if(!this.linesShareEndpoint(t,e,a.position,r.position)&&d.lineSegmentsIntersect(t,e,a.position,r.position))return!0}return!1}static linesShareEndpoint(t,e,i,n){return d.distance(t,i)<1||d.distance(t,n)<1||d.distance(e,i)<1||d.distance(e,n)<1}static scrambleNodePositions(t,e){t.forEach(s=>{let a,r=0,o=null,c=-1;do{a=d.randomPositionDistributed(e.x,e.y,80);const l=Math.min(...t.filter(h=>h.id!==s.id).map(h=>d.distance(a,h.position)));l>c&&(c=l,o=a),r++}while(r<200&&t.some(l=>l.id!==s.id&&d.distance(a,l.position)<this.MIN_DISTANCE));s.position=o||a})}static deepCopyCircles(t){return t.map(e=>({...e,position:{...e.position},connections:[...e.connections]}))}static deepCopyLines(t){return t.map(e=>({...e}))}static verifySolutionNonIntersecting(t,e){let i=0;for(let n=0;n<e.length;n++)for(let s=n+1;s<e.length;s++){const a=e[n],r=e[s];if(this.shareEndpoint(a,r))continue;const o=t.find(u=>u.id===a.from),c=t.find(u=>u.id===a.to),l=t.find(u=>u.id===r.from),h=t.find(u=>u.id===r.to);d.lineSegmentsIntersect(o.position,c.position,l.position,h.position)&&(i++,console.error(`SOLUTION ERROR: Lines ${a.from}-${a.to} and ${r.from}-${r.to} intersect!`))}i>0?console.error(`SOLUTION VERIFICATION FAILED: Found ${i} intersections in the solution!`):console.log("SOLUTION VERIFICATION PASSED: No intersections found in the solution.")}static shareEndpoint(t,e){return t.from===e.from||t.from===e.to||t.to===e.from||t.to===e.to}}class m{static updateIntersections(t,e){e.forEach(i=>i.isIntersecting=!1);for(let i=0;i<e.length;i++)for(let n=i+1;n<e.length;n++){const s=e[i],a=e[n];if(this.shareEndpoint(s,a))continue;const r=t.find(h=>h.id===s.from),o=t.find(h=>h.id===s.to),c=t.find(h=>h.id===a.from),l=t.find(h=>h.id===a.to);d.lineSegmentsIntersect(r.position,o.position,c.position,l.position)&&(s.isIntersecting=!0,a.isIntersecting=!0)}}static shareEndpoint(t,e){return t.from===e.from||t.from===e.to||t.to===e.from||t.to===e.to}}class f{canvas;ctx;canvasSize;constructor(t){this.canvas=t;const e=t.getContext("2d");if(!e)throw new Error("Failed to get 2D context");this.ctx=e,this.canvasSize={x:t.width,y:t.height}}resize(t,e){this.canvas.width=t,this.canvas.height=e,this.canvasSize={x:t,y:e}}clear(){this.ctx.clearRect(0,0,this.canvasSize.x,this.canvasSize.y)}render(t,e,i){this.clear(),this.renderLines(e,i,t),this.renderCircles(t,i)}renderLines(t,e,i){t.forEach(n=>{const s=i.find(c=>c.id===n.from),a=i.find(c=>c.id===n.to);let r="#666",o=2;n.isIntersecting?(r="#ff4444",o=3):e!==null&&(n.from===e||n.to===e)&&(r="#4CAF50",o=3),this.ctx.strokeStyle=r,this.ctx.lineWidth=o,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(s.position.x,s.position.y),this.ctx.lineTo(a.position.x,a.position.y),this.ctx.stroke()})}renderCircles(t,e){t.forEach(i=>{const n=i.id===e;this.ctx.fillStyle=n?"#4CAF50":"#2196F3",this.ctx.beginPath(),this.ctx.arc(i.position.x,i.position.y,i.radius,0,2*Math.PI),this.ctx.fill(),this.ctx.strokeStyle=n?"#2E7D32":"#1976D2",this.ctx.lineWidth=2,this.ctx.stroke(),this.ctx.fillStyle="white",this.ctx.font="bold 18px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(i.id.toString(),i.position.x,i.position.y)})}}class v{canvas;onCircleDragStart;onCircleDrag;onCircleDragEnd;draggedCircleId=null;isDragging=!1;preventBackNavigation;constructor(t,e,i,n){this.canvas=t,this.onCircleDragStart=e,this.onCircleDrag=i,this.onCircleDragEnd=n,this.preventBackNavigation=this.handlePreventBackNavigation.bind(this),this.setupEventListeners()}setupEventListeners(){this.canvas.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.addEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.addEventListener("mouseleave",this.handleMouseUp.bind(this)),this.canvas.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!1}),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this),{passive:!1}),this.canvas.addEventListener("touchend",this.handleTouchEnd.bind(this),{passive:!1}),this.canvas.addEventListener("touchcancel",this.handleTouchEnd.bind(this),{passive:!1})}handleMouseDown(t){t.preventDefault();const e=this.getMousePosition(t);this.handlePointerDown(e)}handleMouseMove(t){if(t.preventDefault(),this.draggedCircleId!==null){const e=this.getMousePosition(t);this.handlePointerMove(e)}}handleMouseUp(t){t.preventDefault(),this.handlePointerUp()}handleTouchStart(t){if(t.preventDefault(),t.stopPropagation(),t.touches.length===1){const e=t.touches[0],i=this.getTouchPosition(e);this.handlePointerDown(i)}}handleTouchMove(t){if(t.preventDefault(),t.stopPropagation(),t.touches.length===1&&this.draggedCircleId!==null){const e=t.touches[0],i=this.getTouchPosition(e);this.handlePointerMove(i)}}handleTouchEnd(t){t.preventDefault(),t.stopPropagation(),this.handlePointerUp()}handlePointerDown(t){const e=this.findCircleAtPosition(t);e!==null&&(this.draggedCircleId=e,this.isDragging=!0,document.addEventListener("touchstart",this.preventBackNavigation,{passive:!1}),document.addEventListener("touchmove",this.preventBackNavigation,{passive:!1}),this.onCircleDragStart(e,t))}handlePointerMove(t){this.draggedCircleId!==null&&this.onCircleDrag(this.draggedCircleId,t)}handlePointerUp(){this.draggedCircleId!==null&&(this.onCircleDragEnd(this.draggedCircleId),this.draggedCircleId=null,this.isDragging=!1,document.removeEventListener("touchstart",this.preventBackNavigation),document.removeEventListener("touchmove",this.preventBackNavigation))}findCircleAtPosition(t){return null}getMousePosition(t){const e=this.canvas.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}getTouchPosition(t){const e=this.canvas.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}handlePreventBackNavigation(t){this.isDragging&&(t.preventDefault(),t.stopPropagation())}updateCircleHitTest(t){this.findCircleAtPosition=e=>{for(const i of t)if(d.pointInCircle(e,i.position,i.radius))return i.id;return null}}}class C{canvas;renderer;inputManager;gameState;animationId=null;currentSolution=null;levelDisplay;restartButton;newGameButton;solveButton;congratulationsElement;nextLevelButton;newGameDialog;confirmNewGameButton;cancelNewGameButton;constructor(t){this.canvas=t,this.renderer=new f(t),this.gameState={circles:[],lines:[],draggedCircleId:null,canvasSize:{x:0,y:0},currentLevel:this.loadSavedLevel(),isCompleted:!1,levelConfigs:new Map},this.levelDisplay=document.getElementById("level-display"),this.restartButton=document.getElementById("restart-btn"),this.newGameButton=document.getElementById("new-game-btn"),this.solveButton=document.getElementById("solve-btn"),this.congratulationsElement=document.getElementById("congratulations"),this.nextLevelButton=document.getElementById("next-level-btn"),this.newGameDialog=document.getElementById("new-game-dialog"),this.confirmNewGameButton=document.getElementById("confirm-new-game-btn"),this.cancelNewGameButton=document.getElementById("cancel-new-game-btn"),this.restartButton.addEventListener("click",()=>this.initializeGame()),this.newGameButton.addEventListener("click",()=>this.showNewGameDialog()),this.solveButton.addEventListener("click",()=>this.showSolution()),this.nextLevelButton.addEventListener("click",()=>this.nextLevel()),this.confirmNewGameButton.addEventListener("click",()=>this.startNewGame()),this.cancelNewGameButton.addEventListener("click",()=>this.hideNewGameDialog()),this.inputManager=new v(t,this.onCircleDragStart.bind(this),this.onCircleDrag.bind(this),this.onCircleDragEnd.bind(this)),this.setupCanvas(),this.initializeGame(),this.gameLoop()}setupCanvas(){const t=()=>{const e=this.canvas.parentElement,i=e.clientWidth,n=e.clientHeight;this.renderer.resize(i,n),this.gameState.canvasSize={x:i,y:n}};t(),window.addEventListener("resize",t)}initializeGame(){this.gameState.isCompleted=!1,this.hideCongratulations();const t=this.gameState.levelConfigs.get(this.gameState.currentLevel),e=p.generateLevel(this.gameState.currentLevel,this.gameState.canvasSize,t);this.gameState.circles=e.circles,this.gameState.lines=e.lines,this.currentSolution=e.solution||null,t||this.storeLevelConfig(this.gameState.currentLevel,e.circles,e.lines,e.solution),this.inputManager.updateCircleHitTest(this.gameState.circles),m.updateIntersections(this.gameState.circles,this.gameState.lines),this.updateLevelDisplay()}updateLevelDisplay(){this.levelDisplay.textContent=`Level ${this.gameState.currentLevel}`}showCongratulations(){this.congratulationsElement.classList.add("show")}hideCongratulations(){this.congratulationsElement.classList.remove("show")}nextLevel(){this.gameState.currentLevel++,this.saveCurrentLevel(),this.initializeGame()}showNewGameDialog(){this.newGameDialog.classList.add("show")}hideNewGameDialog(){this.newGameDialog.classList.remove("show")}startNewGame(){this.gameState.currentLevel=1,this.gameState.levelConfigs.clear(),this.saveCurrentLevel(),this.hideNewGameDialog(),this.initializeGame()}showSolution(){if(!this.currentSolution){console.warn("No solution available for current level");return}const t=this.deepCopyCircles(this.gameState.circles),e=this.deepCopyLines(this.gameState.lines);this.gameState.circles=this.deepCopyCircles(this.currentSolution.circles),this.gameState.lines=this.deepCopyLines(this.currentSolution.lines),this.inputManager.updateCircleHitTest(this.gameState.circles),m.updateIntersections(this.gameState.circles,this.gameState.lines),setTimeout(()=>{this.gameState.circles=t,this.gameState.lines=e,this.inputManager.updateCircleHitTest(this.gameState.circles),m.updateIntersections(this.gameState.circles,this.gameState.lines)},3e3)}loadSavedLevel(){const t=localStorage.getItem("untangle-game-level");return t?parseInt(t,10):1}saveCurrentLevel(){localStorage.setItem("untangle-game-level",this.gameState.currentLevel.toString())}storeLevelConfig(t,e,i,n){const s={circles:this.deepCopyCircles(e),lines:this.deepCopyLines(i),levelNumber:t,canvasSize:{...this.gameState.canvasSize},solution:n?{circles:this.deepCopyCircles(n.circles),lines:this.deepCopyLines(n.lines)}:void 0};this.gameState.levelConfigs.set(t,s)}deepCopyCircles(t){return t.map(e=>({...e,position:{...e.position},connections:[...e.connections]}))}deepCopyLines(t){return t.map(e=>({...e}))}checkForCompletion(){if(this.gameState.isCompleted)return;this.gameState.lines.some(e=>e.isIntersecting)||(this.gameState.isCompleted=!0,this.showCongratulations())}onCircleDragStart(t,e){const i=this.gameState.circles.find(n=>n.id===t);i&&(i.isDragging=!0,this.gameState.draggedCircleId=t)}onCircleDrag(t,e){const i=this.gameState.circles.find(n=>n.id===t);i&&(i.position.x=d.clamp(e.x,i.radius,this.gameState.canvasSize.x-i.radius),i.position.y=d.clamp(e.y,i.radius,this.gameState.canvasSize.y-i.radius),m.updateIntersections(this.gameState.circles,this.gameState.lines))}onCircleDragEnd(t){const e=this.gameState.circles.find(i=>i.id===t);e&&(e.isDragging=!1,this.gameState.draggedCircleId=null,this.checkForCompletion())}gameLoop(){this.renderer.render(this.gameState.circles,this.gameState.lines,this.gameState.draggedCircleId),this.animationId=requestAnimationFrame(()=>this.gameLoop())}destroy(){this.animationId!==null&&cancelAnimationFrame(this.animationId)}}document.addEventListener("DOMContentLoaded",()=>{const g=document.createElement("canvas"),t=document.getElementById("game-container");if(!t)throw new Error("Game container not found");t.appendChild(g);const e=new C(g);window.addEventListener("beforeunload",()=>{e.destroy()})});
