var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,s=(t,n,i)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[n]=i,o=(e,o)=>{for(var r in o||(o={}))n.call(o,r)&&s(e,r,o[r]);if(t)for(var r of t(o))i.call(o,r)&&s(e,r,o[r]);return e},r=(e,t,n)=>s(e,"symbol"!=typeof t?t+"":t,n),l=(e,t,n)=>new Promise((i,s)=>{var o=e=>{try{l(n.next(e))}catch(t){s(t)}},r=e=>{try{l(n.throw(e))}catch(t){s(t)}},l=e=>e.done?i(e.value):Promise.resolve(e.value).then(o,r);l((n=n.apply(e,t)).next())});!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const a={maxLevels:50,colors:["red","blue","green","yellow","purple","orange"],gridSizes:[{width:2,height:2},{width:3,height:3},{width:4,height:4},{width:5,height:4},{width:5,height:5},{width:6,height:5},{width:6,height:6},{width:7,height:6},{width:7,height:7},{width:8,height:7},{width:8,height:8},{width:9,height:8}]},c={red:"#e74c3c",blue:"#3498db",green:"#2ecc71",yellow:"#f1c40f",purple:"#9b59b6",orange:"#e67e22"},d="snake-color-puzzle-state",h="snake-color-puzzle-highest-level";function u(e){return e[Math.floor(Math.random()*e.length)]}function g(e){return l(this,null,function*(){yield new Promise(e=>setTimeout(e,500+1e3*Math.random()));const t=Math.min(Math.floor((e-1)/5),a.gridSizes.length-1),n=a.gridSizes[t],i=Math.min(2+Math.floor(e/8),a.colors.length),s=a.colors.slice(0,i),o=function(e,t){const n=[];let i=0;for(let o=0;o<e.height;o++)for(let s=0;s<e.width;s++)n.push({id:"block-"+i++,color:u(t),position:{x:s,y:o},isSelected:!1,isConnected:!1});const s=new Set(n.map(e=>e.color));if(1===s.size&&t.length>1){const e=n[0].color,i=t.filter(t=>t!==e),s=Math.max(1,Math.floor(n.length/4)),o=new Set;for(;o.size<s;){const e=Math.floor(Math.random()*n.length);o.add(e)}o.forEach(e=>{const t=i[Math.floor(Math.random()*i.length)];n[e].color=t})}return n}(n,s),r=function(e){const{width:t,height:n}=e,i=t*n,s=[];for(let r=0;r<n;r++)for(let e=0;e<t;e++)s.push({x:e,y:r});const o=10;for(let r=0;r<o;r++){const t=p(s[Math.floor(Math.random()*s.length)],e);if(t.length===i)return t}return function(e){const{width:t,height:n}=e,i=[{x:0,y:0},{x:t-1,y:0},{x:0,y:n-1},{x:t-1,y:n-1}],s=i[Math.floor(Math.random()*i.length)],o=[];for(let r=0;r<n;r++)if(r%2==0)for(let e=0;e<t;e++)o.push({x:e,y:r});else for(let e=t-1;e>=0;e--)o.push({x:e,y:r});s.x===t-1&&o.forEach(e=>e.x=t-1-e.x);s.y===n-1&&o.forEach(e=>e.y=n-1-e.y);return o}(e)}(n),l=function(e){if(0===e.length)return[];const t=[e[0]];for(let n=1;n<e.length;n++)e[n]!==e[n-1]&&t.push(e[n]);if(1===t.length){const n=[...new Set(e)];if(n.length>1){const e=t[0],i=n.find(t=>t!==e);return[e,i]}return[t[0],t[0]]}return t}(r.map(e=>o.find(t=>t.position.x===e.x&&t.position.y===e.y).color));return{id:e,gridSize:n,colors:s,pattern:l,blocks:o,isCompleted:!1,isUnlocked:1===e}})}function p(e,t){const{width:n,height:i}=t,s=new Set,o=[];return function e(t){const r=`${t.x},${t.y}`;if(s.has(r))return!1;if(s.add(r),o.push(t),o.length===n*i)return!0;const l=[],a=[{dx:0,dy:-1},{dx:1,dy:0},{dx:0,dy:1},{dx:-1,dy:0}];for(const{dx:s,dy:o}of a){const e=t.x+s,r=t.y+o;e>=0&&e<n&&r>=0&&r<i&&l.push({x:e,y:r})}for(let n=l.length-1;n>0;n--){const e=Math.floor(Math.random()*(n+1));[l[n],l[e]]=[l[e],l[n]]}for(const n of l)if(e(n))return!0;return s.delete(r),o.pop(),!1}(e),o}function v(e){try{localStorage.setItem(h,e.toString())}catch(t){console.warn("Failed to save highest level:",t)}}const y={preventMistakes:!0},f="snake-color-puzzle-settings";function m(){try{const e=localStorage.getItem(f);if(e)return JSON.parse(e)}catch(e){console.warn("Failed to load settings:",e)}return y}class b{constructor(){r(this,"state"),r(this,"currentLevel",null),r(this,"listeners",[]),this.state=this.initializeState(),this.loadFromStorage()}initializeState(){return{currentLevel:1,highestUnlockedLevel:1,selectedBlocks:[],selectedPattern:[],isGameComplete:!1,isLoading:!1}}loadFromStorage(){const e=function(){try{const e=localStorage.getItem(d);if(e)return JSON.parse(e)}catch(e){console.warn("Failed to load game state:",e)}return null}(),t=function(){try{const e=localStorage.getItem(h);if(e)return parseInt(e,10)||1}catch(e){console.warn("Failed to load highest level:",e)}return 1}();e&&(this.state=o(o({},this.state),e)),t>this.state.highestUnlockedLevel&&(this.state.highestUnlockedLevel=t),this.state.currentLevel=this.state.highestUnlockedLevel}getState(){return o({},this.state)}getCurrentLevel(){return this.currentLevel}loadLevel(e){return l(this,null,function*(){if(e>this.state.highestUnlockedLevel)console.warn(`Level ${e} is not unlocked yet`);else{this.state.isLoading=!0,this.state.currentLevel=e,this.state.selectedBlocks=[],this.state.selectedPattern=[],this.notifyListeners();try{this.currentLevel=yield g(e)}catch(t){console.error("Failed to generate level:",t)}finally{this.state.isLoading=!1,this.notifyListeners()}}})}dispatch(e){switch(e.type){case"SELECT_BLOCK":this.selectBlock(e.block);break;case"DESELECT_BLOCK":this.deselectBlock(e.block);break;case"RESET_LEVEL":this.resetLevel();break;case"COMPLETE_LEVEL":this.completeLevel();break;case"UNLOCK_LEVEL":this.unlockLevel(e.level);break;case"LOAD_GAME":this.loadGame(e.state);break;case"SAVE_GAME":this.saveGame()}}selectBlock(e){if(!this.currentLevel)return;if(!(0===this.state.selectedBlocks.length||this.areAdjacent(e,this.state.selectedBlocks[this.state.selectedBlocks.length-1])))return;if(m().preventMistakes&&!this.isValidMoveAccordingToPattern(e))return;const t=this.currentLevel.blocks.findIndex(t=>t.id===e.id);-1!==t&&(this.currentLevel.blocks[t].isSelected=!0),this.state.selectedBlocks.push(e),this.updateSelectedPattern(e.color),this.notifyListeners()}deselectBlock(e){if(!this.currentLevel)return;const t=this.state.selectedBlocks.findIndex(t=>t.id===e.id);if(-1===t)return;if(t===this.state.selectedBlocks.length-1)return void this.notifyListeners();const n=this.state.selectedBlocks.slice(t+1);this.state.selectedBlocks.splice(t+1),this.rebuildSelectedPattern();const i=new Set(n.map(e=>e.id));this.currentLevel.blocks.forEach(e=>{i.has(e.id)&&(e.isSelected=!1)}),this.notifyListeners()}updateSelectedPattern(e){if(0===this.state.selectedPattern.length)return void this.state.selectedPattern.push(e);e!==this.state.selectedPattern[this.state.selectedPattern.length-1]&&this.state.selectedPattern.push(e)}rebuildSelectedPattern(){if(this.state.selectedPattern=[],0!==this.state.selectedBlocks.length)for(const e of this.state.selectedBlocks)this.updateSelectedPattern(e.color)}resetLevel(){this.currentLevel&&(this.currentLevel.blocks.forEach(e=>{e.isSelected=!1,e.isConnected=!1}),this.state.selectedBlocks=[],this.state.selectedPattern=[],this.notifyListeners())}completeLevel(){if(!this.currentLevel)return;this.currentLevel.isCompleted=!0;const e=this.state.currentLevel+1;e>this.state.highestUnlockedLevel&&(this.state.highestUnlockedLevel=e,v(e)),this.saveGame(),this.notifyListeners()}unlockLevel(e){e>this.state.highestUnlockedLevel&&(this.state.highestUnlockedLevel=e,v(e),this.notifyListeners())}loadGame(e){this.state=o({},e),this.notifyListeners()}saveGame(){!function(e){try{localStorage.setItem(d,JSON.stringify(e))}catch(t){console.warn("Failed to save game state:",t)}}(this.state)}areAdjacent(e,t){const n=Math.abs(e.position.x-t.position.x),i=Math.abs(e.position.y-t.position.y);return 1===n&&0===i||0===n&&1===i}isValidMoveAccordingToPattern(e){if(!this.currentLevel)return!1;const{pattern:t}=this.currentLevel,n=this.state.selectedPattern.length;if(0===n)return e.color===t[0];const i=this.state.selectedPattern[n-1];if(e.color===i)return!0;const s=t[((n-1)%t.length+1)%t.length];return e.color===s}subscribe(e){return this.listeners.push(e),()=>{const t=this.listeners.indexOf(e);t>-1&&this.listeners.splice(t,1)}}notifyListeners(){this.listeners.forEach(e=>e(this.getState()))}}class x{constructor(e,t){r(this,"container"),r(this,"onInfoClick"),this.container=e,this.onInfoClick=t,this.render(),this.setupEventListeners()}render(){this.container.innerHTML='\n      <div class="header">\n        <div class="header-content">\n          <h1 class="game-title">Snake Color Puzzle <span class="version">v1.0.8</span><button class="info-button-small" id="info-button" aria-label="View instructions" title="How to Play">\n            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n              <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>\n              <path d="M12 16v-4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>\n              <path d="M12 8h.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>\n            </svg>\n          </button></h1>\n          <div class="level-info">\n            <button class="level-number level-trigger" id="open-level-dialog" aria-label="Change level">Level <span id="current-level">1</span> ‚åÑ</button>\n            <button class="control-button restart-button" id="restart-button" aria-label="Restart level">üîÑ Restart</button>\n            <button class="control-button settings-button" id="open-settings-dialog" aria-label="Open settings">‚öôÔ∏è Settings</button>\n          </div>\n        </div>\n      </div>\n    '}setupEventListeners(){const e=this.container.querySelector("#info-button");e&&this.onInfoClick&&e.addEventListener("click",this.onInfoClick)}update(e,t){const n=this.container.querySelector("#current-level");n&&(n.textContent=t.id.toString())}}class L{constructor(e,t){r(this,"container"),r(this,"gridElement",null),this.container=e,this.render()}render(){this.container.innerHTML='\n      <div class="game-grid">\n        <div class="grid-container" id="grid-container">\n          \x3c!-- Grid will be generated here --\x3e\n        </div>\n      </div>\n    ',this.gridElement=this.container.querySelector("#grid-container")}update(e,t,n){this.gridElement&&(this.gridElement.innerHTML="",this.gridElement.style.gridTemplateColumns=`repeat(${e.gridSize.width}, 1fr)`,this.gridElement.style.gridTemplateRows=`repeat(${e.gridSize.height}, 1fr)`,e.blocks.forEach(e=>{const i=document.createElement("div");if(i.className="game-block "+(e.isSelected?"selected":""),i.style.backgroundColor=c[e.color],i.style.position="relative",e.isSelected){const n=t.findIndex(t=>t.id===e.id);if(-1!==n){const e=document.createElement("div");e.textContent=String(n+1),e.style.position="absolute",e.style.top="4px",e.style.right="6px",e.style.background="rgba(0,0,0,0.65)",e.style.color="#fff",e.style.borderRadius="10px",e.style.padding="2px 6px",e.style.fontSize="12px",e.style.lineHeight="1",e.style.pointerEvents="none",i.appendChild(e)}}i.addEventListener("click",()=>{this.handleBlockClick(e,n)}),i.addEventListener("touchstart",t=>{t.preventDefault(),this.handleBlockClick(e,n)}),this.gridElement.appendChild(i)}))}handleBlockClick(e,t){e.isSelected?t.dispatch({type:"DESELECT_BLOCK",block:e}):t.dispatch({type:"SELECT_BLOCK",block:e})}}class k{constructor(e){r(this,"container"),this.container=e,this.render()}render(){this.container.innerHTML='\n      <div class="pattern-display">\n        <div class="pattern-display-content">\n          <h3>Match this pattern:</h3>\n          <div class="pattern-container">\n            <div class="target-pattern" id="target-pattern">\n              \x3c!-- Target pattern will be displayed here --\x3e\n            </div>\n          </div>\n        </div>\n      </div>\n    '}update(e,t,n,i){const s=this.container.querySelector("#target-pattern"),o=m();s&&(s.innerHTML="",e.forEach((n,r)=>{const l=document.createElement("div");if(l.className="pattern-color-block",l.style.backgroundColor=c[n],o.preventMistakes&&this.shouldShowIndicator(r,t,e,i)){const e=document.createElement("div");e.className="pattern-indicator",e.style.cssText="\n            position: absolute;\n            top: -8px;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 0;\n            height: 0;\n            border-left: 8px solid transparent;\n            border-right: 8px solid transparent;\n            border-bottom: 12px solid #e74c3c;\n            z-index: 10;\n          ",l.style.position="relative",l.appendChild(e)}s.appendChild(l)}))}shouldShowIndicator(e,t,n,i){if(i&&0===i.length)return 0===e;if(!i||0===i.length)return!1;let s=0;for(let o=1;o<i.length;o++)i[o].color!==i[o-1].color&&s++;return s%=n.length,e===s}}class S{constructor(e,t){r(this,"container"),r(this,"gameStateManager"),r(this,"isOpen",!1),this.container=e,this.gameStateManager=t,this.render(),this.attachGlobalHandlers()}render(){if(this.container.querySelector(".level-dialog-overlay"))return;const e=document.createElement("div");e.className="level-dialog-overlay",e.innerHTML='\n      <div class="level-dialog" role="dialog" aria-modal="true" aria-labelledby="level-dialog-title">\n        <div class="level-dialog-header">\n          <h3 id="level-dialog-title">Select Level</h3>\n          <button class="level-dialog-close" id="level-dialog-close" aria-label="Close">‚úñ</button>\n        </div>\n        <div class="level-dialog-body">\n          <div class="level-buttons" id="dialog-level-buttons"></div>\n        </div>\n      </div>\n    ',this.container.appendChild(e);const t=e.querySelector("#level-dialog-close");null==t||t.addEventListener("click",()=>this.close()),e.addEventListener("click",t=>{t.target===e&&this.close()})}attachGlobalHandlers(){document.addEventListener("keydown",e=>{this.isOpen&&"Escape"===e.key&&this.close()})}open(){const e=this.container.querySelector(".level-dialog-overlay");e&&(this.isOpen=!0,e.style.display="flex")}close(){const e=this.container.querySelector(".level-dialog-overlay");e&&(this.isOpen=!1,e.style.display="none")}update(e){const t=this.container.querySelector("#dialog-level-buttons");if(!t)return;t.innerHTML="";const n=a.maxLevels;for(let i=1;i<=n;i++){const n=document.createElement("button"),s=i>e.highestUnlockedLevel,o=i===e.currentLevel,r=i<e.highestUnlockedLevel;n.className=`level-button ${s?"locked":"unlocked"} ${o?"current":""} ${r?"completed":""}`,n.textContent=i.toString(),n.disabled=s,s||n.addEventListener("click",()=>l(this,null,function*(){yield this.gameStateManager.loadLevel(i),this.close()})),t.appendChild(n)}}}class w{constructor(e){r(this,"container"),r(this,"overlay",null),r(this,"dialog",null),r(this,"settings"),this.container=e,this.settings=m(),this.render()}render(){this.overlay=document.createElement("div"),this.overlay.className="settings-overlay",this.overlay.style.cssText="\n            position: fixed;\n            inset: 0;\n            background: rgba(0,0,0,0.4);\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 1000;\n        ",this.dialog=document.createElement("div"),this.dialog.className="settings-dialog",this.dialog.style.cssText="\n            background: white;\n            padding: 24px 28px;\n            border-radius: 12px;\n            font-size: 16px;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n            min-width: 320px;\n            max-width: 400px;\n        ",this.dialog.innerHTML='\n            <div class="settings-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">\n                <h2 style="margin: 0; font-size: 20px; font-weight: bold; color: #2c3e50;">Settings</h2>\n                <button class="close-button" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #7f8c8d;">&times;</button>\n            </div>\n            \n            <div class="settings-content">\n                <div class="setting-item" style="display: flex; align-items: center; gap: 12px; padding: 12px 0;">\n                    <input type="checkbox" id="prevent-mistakes" class="setting-checkbox" style="width: 18px; height: 18px; cursor: pointer;">\n                    <label for="prevent-mistakes" style="cursor: pointer; font-size: 16px; color: #2c3e50;">\n                        Prevent mistakes\n                    </label>\n                </div>\n                <div class="setting-description" style="font-size: 14px; color: #7f8c8d; margin-top: 4px; line-height: 1.4;">\n                    When enabled, invalid moves will be blocked. You can only click on blocks that match the current pattern position.\n                </div>\n            </div>\n            \n            <div class="settings-actions" style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 8px;">\n                <button class="control-button cancel-button" style="background: #95a5a6; color: white; padding: 10px 16px; border-radius: 8px; font-size: 14px; font-weight: 600; border: none; cursor: pointer;">\n                    Cancel\n                </button>\n                <button class="control-button save-button" style="background: #3498db; color: white; padding: 10px 16px; border-radius: 8px; font-size: 14px; font-weight: 600; border: none; cursor: pointer;">\n                    Save\n                </button>\n            </div>\n        ',this.overlay.appendChild(this.dialog),this.container.appendChild(this.overlay),this.setupEventListeners(),this.updateUI()}setupEventListeners(){if(!this.overlay||!this.dialog)return;const e=this.dialog.querySelector(".close-button");null==e||e.addEventListener("click",()=>this.close());const t=this.dialog.querySelector(".cancel-button");null==t||t.addEventListener("click",()=>this.close());const n=this.dialog.querySelector(".save-button");null==n||n.addEventListener("click",()=>this.saveSettings()),this.overlay.addEventListener("click",e=>{e.target===this.overlay&&this.close()}),document.addEventListener("keydown",e=>{"Escape"===e.key&&this.isOpen()&&this.close()})}updateUI(){if(!this.dialog)return;const e=this.dialog.querySelector("#prevent-mistakes");e&&(e.checked=this.settings.preventMistakes)}open(){var e;if(this.overlay){this.overlay.style.display="flex";const t=null==(e=this.dialog)?void 0:e.querySelector("input");null==t||t.focus()}}close(){this.overlay&&(this.overlay.style.display="none")}isOpen(){var e;return"flex"===(null==(e=this.overlay)?void 0:e.style.display)}saveSettings(){if(!this.dialog)return;const e=this.dialog.querySelector("#prevent-mistakes");this.settings={preventMistakes:(null==e?void 0:e.checked)||!1},function(e){try{localStorage.setItem(f,JSON.stringify(e))}catch(t){console.warn("Failed to save settings:",t)}}(this.settings),this.close()}getSettings(){return this.settings}update(e){}}class E{constructor(e){r(this,"container"),r(this,"overlay",null),r(this,"dialog",null),this.container=e,this.render()}render(){this.overlay=document.createElement("div"),this.overlay.className="instructions-overlay",this.overlay.style.cssText="\n            position: fixed;\n            inset: 0;\n            background: rgba(0,0,0,0.4);\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 1000;\n        ",this.dialog=document.createElement("div"),this.dialog.className="instructions-dialog",this.dialog.style.cssText="\n            background: white;\n            padding: 24px 28px;\n            border-radius: 12px;\n            font-size: 16px;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n            min-width: 400px;\n            max-width: 500px;\n            max-height: 80vh;\n            overflow-y: auto;\n        ",this.dialog.innerHTML='\n            <div class="instructions-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">\n                <h2 style="margin: 0; font-size: 20px; font-weight: bold; color: #2c3e50;">How to Play</h2>\n                <button class="close-button" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #7f8c8d;">&times;</button>\n            </div>\n            \n            <div class="instructions-content" style="line-height: 1.6; color: #2c3e50;">\n                <div class="instruction-section" style="margin-bottom: 20px;">\n                    <h3 style="margin: 0 0 8px 0; font-size: 16px; font-weight: bold; color: #34495e;">üéØ Objective</h3>\n                    <p style="margin: 0;">Select blocks in the correct order to match the color pattern shown at the top of the screen.</p>\n                </div>\n\n                <div class="instruction-section" style="margin-bottom: 20px;">\n                    <h3 style="margin: 0 0 8px 0; font-size: 16px; font-weight: bold; color: #34495e;">üéÆ How to Play</h3>\n                    <ul style="margin: 0; padding-left: 20px;">\n                        <li style="margin-bottom: 6px;">Look at the color pattern displayed at the top</li>\n                        <li style="margin-bottom: 6px;">Click on blocks in the grid to select them in the correct order</li>\n                        <li style="margin-bottom: 6px;">Each selected block should match the next color in the pattern</li>\n                        <li style="margin-bottom: 6px;">Complete the pattern to finish the level</li>\n                    </ul>\n                </div>\n\n                <div class="instruction-section" style="margin-bottom: 20px;">\n                    <h3 style="margin: 0 0 8px 0; font-size: 16px; font-weight: bold; color: #34495e;">‚öôÔ∏è Settings</h3>\n                    <ul style="margin: 0; padding-left: 20px;">\n                        <li style="margin-bottom: 6px;"><strong>Prevent Mistakes:</strong> When enabled, you can only click on blocks that match the current pattern position</li>\n                        <li style="margin-bottom: 6px;">Use the Settings button to toggle this feature</li>\n                    </ul>\n                </div>\n\n                <div class="instruction-section" style="margin-bottom: 20px;">\n                    <h3 style="margin: 0 0 8px 0; font-size: 16px; font-weight: bold; color: #34495e;">üîÑ Controls</h3>\n                    <ul style="margin: 0; padding-left: 20px;">\n                        <li style="margin-bottom: 6px;"><strong>Restart:</strong> Reset the current level</li>\n                        <li style="margin-bottom: 6px;"><strong>Level Selector:</strong> Choose different levels</li>\n                        <li style="margin-bottom: 6px;"><strong>Settings:</strong> Adjust game preferences</li>\n                    </ul>\n                </div>\n\n                <div class="instruction-section">\n                    <h3 style="margin: 0 0 8px 0; font-size: 16px; font-weight: bold; color: #34495e;">üí° Tips</h3>\n                    <ul style="margin: 0; padding-left: 20px;">\n                        <li style="margin-bottom: 6px;">Start with the first color in the pattern</li>\n                        <li style="margin-bottom: 6px;">Look for blocks that are connected to your current selection</li>\n                        <li style="margin-bottom: 6px;">Use the "Prevent Mistakes" setting if you want guidance</li>\n                        <li style="margin-bottom: 6px;">Take your time to plan your moves</li>\n                    </ul>\n                </div>\n            </div>\n            \n            <div class="instructions-actions" style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 8px;">\n                <button class="control-button close-instructions-button" style="background: #3498db; color: white; padding: 10px 16px; border-radius: 8px; font-size: 14px; font-weight: 600; border: none; cursor: pointer;">\n                    Got it!\n                </button>\n            </div>\n        ',this.overlay.appendChild(this.dialog),this.container.appendChild(this.overlay),this.setupEventListeners()}setupEventListeners(){if(!this.overlay||!this.dialog)return;const e=this.dialog.querySelector(".close-button");null==e||e.addEventListener("click",()=>this.close());const t=this.dialog.querySelector(".close-instructions-button");null==t||t.addEventListener("click",()=>this.close()),this.overlay.addEventListener("click",e=>{e.target===this.overlay&&this.close()}),document.addEventListener("keydown",e=>{"Escape"===e.key&&this.isOpen()&&this.close()})}open(){var e;if(this.overlay){this.overlay.style.display="flex";const t=null==(e=this.dialog)?void 0:e.querySelector("button");null==t||t.focus()}}close(){this.overlay&&(this.overlay.style.display="none")}isOpen(){var e;return"flex"===(null==(e=this.overlay)?void 0:e.style.display)}}class C{constructor(e){r(this,"container"),r(this,"isVisible",!1),this.container=e,this.render()}render(){this.container.innerHTML='\n            <div class="loading-screen" style="display: none;">\n                <div class="loading-content">\n                    <div class="loading-spinner">\n                        <div class="spinner-ring"></div>\n                        <div class="spinner-ring"></div>\n                        <div class="spinner-ring"></div>\n                        <div class="spinner-ring"></div>\n                    </div>\n                    <div class="loading-text">Generating Level...</div>\n                    <div class="loading-subtext">Creating the perfect puzzle for you</div>\n                </div>\n            </div>\n        ';const e=document.createElement("style");e.textContent="\n            .loading-screen {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.8);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 9999;\n                backdrop-filter: blur(4px);\n            }\n\n            .loading-content {\n                text-align: center;\n                color: white;\n            }\n\n            .loading-spinner {\n                position: relative;\n                width: 80px;\n                height: 80px;\n                margin: 0 auto 24px;\n            }\n\n            .spinner-ring {\n                position: absolute;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                border: 3px solid transparent;\n                border-top: 3px solid #3498db;\n                border-radius: 50%;\n                animation: spin 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n            }\n\n            .spinner-ring:nth-child(1) {\n                animation-delay: -0.45s;\n                border-top-color: #e74c3c;\n            }\n\n            .spinner-ring:nth-child(2) {\n                animation-delay: -0.3s;\n                border-top-color: #f39c12;\n            }\n\n            .spinner-ring:nth-child(3) {\n                animation-delay: -0.15s;\n                border-top-color: #2ecc71;\n            }\n\n            .spinner-ring:nth-child(4) {\n                border-top-color: #9b59b6;\n            }\n\n            @keyframes spin {\n                0% {\n                    transform: rotate(0deg);\n                }\n                100% {\n                    transform: rotate(360deg);\n                }\n            }\n\n            .loading-text {\n                font-size: 24px;\n                font-weight: bold;\n                margin-bottom: 8px;\n                color: #ecf0f1;\n            }\n\n            .loading-subtext {\n                font-size: 16px;\n                color: #bdc3c7;\n                opacity: 0.8;\n            }\n\n            .loading-screen.show {\n                display: flex !important;\n                animation: fadeIn 0.3s ease-in-out;\n            }\n\n            .loading-screen.hide {\n                animation: fadeOut 0.3s ease-in-out forwards;\n            }\n\n            @keyframes fadeIn {\n                from {\n                    opacity: 0;\n                }\n                to {\n                    opacity: 1;\n                }\n            }\n\n            @keyframes fadeOut {\n                from {\n                    opacity: 1;\n                }\n                to {\n                    opacity: 0;\n                }\n            }\n        ",document.head.appendChild(e)}show(){if(this.isVisible)return;const e=this.container.querySelector(".loading-screen");e&&(e.style.display="flex",e.classList.add("show"),this.isVisible=!0)}hide(){if(!this.isVisible)return;const e=this.container.querySelector(".loading-screen");e&&(e.classList.remove("show"),e.classList.add("hide"),setTimeout(()=>{e.style.display="none",e.classList.remove("hide"),this.isVisible=!1},300))}isShowing(){return this.isVisible}}class M{constructor(e){r(this,"gameStateManager"),r(this,"container"),r(this,"header"),r(this,"levelDialog"),r(this,"settingsDialog"),r(this,"instructionsDialog"),r(this,"patternDisplay"),r(this,"gameGrid"),r(this,"loadingScreen"),r(this,"currentState",null),r(this,"currentLevel",null),this.container=e,this.gameStateManager=new b,this.initializeComponents(),this.setupEventListeners(),this.loadInitialLevel()}initializeComponents(){this.container.innerHTML="",this.container.innerHTML='\n      <div class="game-container">\n        <div class="game-header"></div>\n        <div class="level-dialog-container"></div>\n        <div class="settings-dialog-container"></div>\n        <div class="instructions-dialog-container"></div>\n        <div class="pattern-display-container"></div>\n        <div class="game-grid-container"></div>\n        <div class="loading-screen-container"></div>\n      </div>\n    ',this.header=new x(this.container.querySelector(".game-header"),()=>{this.instructionsDialog.open()}),this.levelDialog=new S(this.container.querySelector(".level-dialog-container"),this.gameStateManager),this.settingsDialog=new w(this.container.querySelector(".settings-dialog-container")),this.instructionsDialog=new E(this.container.querySelector(".instructions-dialog-container")),this.patternDisplay=new k(this.container.querySelector(".pattern-display-container")),this.gameGrid=new L(this.container.querySelector(".game-grid-container"),this.gameStateManager),this.loadingScreen=new C(this.container.querySelector(".loading-screen-container"))}setupEventListeners(){this.gameStateManager.subscribe(e=>{this.currentState=e,this.currentLevel=this.gameStateManager.getCurrentLevel(),this.updateUI()});(()=>{const e=this.container.querySelector("#open-level-dialog"),t=this.container.querySelector("#restart-button"),n=this.container.querySelector("#open-settings-dialog");e&&!e.getAttribute("data-bound")&&(e.setAttribute("data-bound","true"),e.addEventListener("click",()=>{this.levelDialog.open()})),t&&!t.getAttribute("data-bound")&&(t.setAttribute("data-bound","true"),t.addEventListener("click",()=>{this.gameStateManager.dispatch({type:"RESET_LEVEL"})})),n&&!n.getAttribute("data-bound")&&(n.setAttribute("data-bound","true"),n.addEventListener("click",()=>{this.settingsDialog.open()}))})()}loadInitialLevel(){return l(this,null,function*(){const e=this.gameStateManager.getState();yield this.gameStateManager.loadLevel(e.currentLevel)})}updateUI(){this.currentState&&(this.currentState.isLoading?this.loadingScreen.show():(this.loadingScreen.hide(),this.currentLevel&&(this.header.update(this.currentState,this.currentLevel),this.levelDialog.update(this.currentState),this.patternDisplay.update(this.currentLevel.pattern,this.currentState.selectedPattern,this.currentState,this.currentState.selectedBlocks),this.gameGrid.update(this.currentLevel,this.currentState.selectedBlocks,this.gameStateManager),!this.currentLevel.isCompleted&&this.currentLevel.blocks.every(e=>e.isSelected)&&this.checkAndMaybeCompleteLevel(),this.currentLevel.isCompleted&&this.showLevelCompleteDialog())))}checkAndMaybeCompleteLevel(){const e=this.gameStateManager.getState(),t=this.gameStateManager.getCurrentLevel();if(!t||t.isCompleted)return;const n=t.blocks.every(e=>e.isSelected),i=function(e,t){if(0===t.length)return!1;if(0===e.length)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(e.selectedPattern,t.pattern);n&&i&&this.gameStateManager.dispatch({type:"COMPLETE_LEVEL"})}showLevelCompleteDialog(){if(document.querySelector("#level-complete-overlay"))return;const e=document.createElement("div");e.id="level-complete-overlay",e.style.cssText="\n        position: fixed;\n        inset: 0;\n        background: rgba(0,0,0,0.4);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 1000;\n      ";const t=document.createElement("div");t.style.cssText="\n        background: #2ecc71;\n        color: white;\n        padding: 24px 28px;\n        border-radius: 12px;\n        font-size: 22px;\n        font-weight: bold;\n        box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n        display: flex;\n        flex-direction: column;\n        gap: 16px;\n        min-width: 260px;\n        text-align: center;\n      ";const n=document.createElement("div");n.textContent="üéâ Level Complete!";const i=document.createElement("button");i.className="control-button next-level-button",i.textContent="‚û°Ô∏è Next Level",i.style.cssText="\n        background: white;\n        color: #2ecc71;\n        padding: 10px 14px;\n        border-radius: 8px;\n        font-size: 18px;\n        font-weight: 700;\n        border: none;\n        cursor: pointer;\n      ",i.addEventListener("click",()=>l(this,null,function*(){const e=this.gameStateManager.getState();yield this.gameStateManager.loadLevel(e.currentLevel+1);const t=document.querySelector("#level-complete-overlay");t&&t.parentElement&&t.parentElement.removeChild(t)})),t.appendChild(n),t.appendChild(i),e.appendChild(t),document.body.appendChild(e)}}document.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("app");e&&new M(e)});
