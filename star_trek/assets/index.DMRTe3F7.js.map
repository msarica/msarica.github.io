{"version":3,"file":"index.DMRTe3F7.js","sources":["../../src/MathChallenge.ts","../../src/AssetManager.ts","../../src/Ship.ts","../../src/WeaponSystem.ts","../../src/CollisionManager.ts","../../src/ParticleSystem.ts","../../src/EnemyAI.ts","../../src/GameStateManager.ts","../../src/GameRenderer.ts","../../src/GameUI.ts","../../src/game.ts"],"sourcesContent":["/**\n * MathChallenge - Handles math problem generation and repair system\n */\nimport type { IMathChallenge, MathChallenge as MathChallengeType, MathOptions } from './types.js';\n\nexport class MathChallenge implements IMathChallenge {\n    public currentChallenge: MathChallengeType | null;\n    public panelOpen: boolean;\n\n    constructor() {\n        this.currentChallenge = null;\n        this.panelOpen = false;\n        this.initializeEventListeners();\n    }\n\n    private initializeEventListeners(): void {\n        const cancelBtn = document.getElementById('cancelMathBtn');\n        const optionA = document.getElementById('optionA');\n        const optionB = document.getElementById('optionB');\n        const optionC = document.getElementById('optionC');\n        const optionD = document.getElementById('optionD');\n        \n        cancelBtn?.addEventListener('click', () => this.closePanel());\n        \n        // Add event listeners for multiple choice options\n        optionA?.addEventListener('click', () => this.selectOption('A'));\n        optionB?.addEventListener('click', () => this.selectOption('B'));\n        optionC?.addEventListener('click', () => this.selectOption('C'));\n        optionD?.addEventListener('click', () => this.selectOption('D'));\n        \n        // Allow Escape key to cancel\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && this.panelOpen) {\n                this.closePanel();\n            }\n        });\n    }\n\n    public showChallenge(\n        repairType: 'hull' | 'energy',\n        onSuccess: (type: 'hull' | 'energy') => void,\n        onFailure: (type: 'hull' | 'energy') => void,\n        onCancel: () => void\n    ): boolean {\n        // Don't show if panel already open\n        if (this.panelOpen) {\n            return false;\n        }\n        \n        this.panelOpen = true;\n        \n        // Generate random multiplication question\n        const num1 = Math.floor(Math.random() * 9) + 2; // 2-10\n        const num2 = Math.floor(Math.random() * 9) + 2; // 2-10\n        const correctAnswer = num1 * num2;\n        \n        // Generate multiple choice options\n        const options = this.generateOptions(correctAnswer);\n        \n        this.currentChallenge = {\n            num1,\n            num2,\n            correctAnswer,\n            repairType,\n            options,\n            correctOptionLetter: (options as any).correctLetter,\n            onSuccess,\n            onFailure,\n            onCancel\n        };\n        \n        this.updatePanelContent();\n        this.showPanel();\n        \n        console.log(`Math challenge: ${num1} × ${num2} = ${correctAnswer} (for ${repairType})`);\n        console.log(`Options: A=${options.A}, B=${options.B}, C=${options.C}, D=${options.D}, Correct=${options.correctLetter}`);\n        \n        return true;\n    }\n\n    private generateOptions(correctAnswer: number): MathOptions {\n        // Generate 3 wrong answers\n        const wrongAnswers: number[] = [];\n        \n        // Create wrong answers by adding/subtracting small amounts and multiplying by close factors\n        while (wrongAnswers.length < 3) {\n            let wrongAnswer: number;\n            const method = Math.floor(Math.random() * 4);\n            \n            switch (method) {\n                case 0: // Add a small amount\n                    wrongAnswer = correctAnswer + Math.floor(Math.random() * 10) + 1;\n                    break;\n                case 1: // Subtract a small amount\n                    wrongAnswer = correctAnswer - Math.floor(Math.random() * 10) - 1;\n                    break;\n                case 2: // Multiply by a close factor\n                    wrongAnswer = Math.floor(correctAnswer * (0.8 + Math.random() * 0.4));\n                    break;\n                case 3: // Use a common mistake (like one number * 10)\n                    wrongAnswer = Math.floor(correctAnswer / 10) * 10 + Math.floor(Math.random() * 10);\n                    break;\n                default:\n                    wrongAnswer = correctAnswer + 1;\n                    break;\n            }\n            \n            // Make sure it's positive and different from correct answer and other wrong answers\n            if (wrongAnswer > 0 && wrongAnswer !== correctAnswer && !wrongAnswers.includes(wrongAnswer)) {\n                wrongAnswers.push(wrongAnswer);\n            }\n        }\n        \n        // Create array of all options\n        const allOptions = [correctAnswer, ...wrongAnswers];\n        \n        // Shuffle the options\n        for (let i = allOptions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [allOptions[i], allOptions[j]] = [allOptions[j]!, allOptions[i]!];\n        }\n        \n        // Assign to letters (we know array has exactly 4 elements)\n        const options = {\n            A: allOptions[0]!,\n            B: allOptions[1]!,\n            C: allOptions[2]!,\n            D: allOptions[3]!\n        };\n        \n        // Find which letter has the correct answer\n        const letters: ('A' | 'B' | 'C' | 'D')[] = ['A', 'B', 'C', 'D'];\n        const correctLetter = letters.find(letter => options[letter] === correctAnswer);\n        if (!correctLetter) {\n            throw new Error('Could not find correct answer in options');\n        }\n        (options as any).correctLetter = correctLetter;\n        \n        return options;\n    }\n\n    private updatePanelContent(): void {\n        if (!this.currentChallenge) return;\n        \n        const { num1, num2, repairType, options } = this.currentChallenge;\n        \n        // Update panel content\n        const questionElement = document.getElementById('mathQuestion');\n        const descriptionElement = document.getElementById('mathDescription');\n        const feedbackElement = document.getElementById('mathFeedback');\n        \n        if (questionElement) questionElement.textContent = `${num1} × ${num2} = ?`;\n        if (descriptionElement) descriptionElement.textContent = `Complete this calculation to repair your ${repairType === 'hull' ? 'hull integrity' : 'energy reserves'}`;\n        if (feedbackElement) {\n            feedbackElement.textContent = '';\n            feedbackElement.className = 'math-feedback';\n        }\n        \n        // Update option buttons\n        const optionAElement = document.getElementById('optionA')?.querySelector('.option-value');\n        const optionBElement = document.getElementById('optionB')?.querySelector('.option-value');\n        const optionCElement = document.getElementById('optionC')?.querySelector('.option-value');\n        const optionDElement = document.getElementById('optionD')?.querySelector('.option-value');\n        \n        if (optionAElement) optionAElement.textContent = String(options.A);\n        if (optionBElement) optionBElement.textContent = String(options.B);\n        if (optionCElement) optionCElement.textContent = String(options.C);\n        if (optionDElement) optionDElement.textContent = String(options.D);\n        \n        // Reset option button styles\n        ['optionA', 'optionB', 'optionC', 'optionD'].forEach(id => {\n            const btn = document.getElementById(id);\n            btn?.classList.remove('correct', 'incorrect');\n        });\n    }\n\n    private selectOption(selectedLetter: 'A' | 'B' | 'C' | 'D'): void {\n        if (!this.currentChallenge) return;\n        \n        const feedbackElement = document.getElementById('mathFeedback');\n        const selectedBtn = document.getElementById(`option${selectedLetter}`);\n        \n        // Reset all button styles first\n        ['optionA', 'optionB', 'optionC', 'optionD'].forEach(id => {\n            const btn = document.getElementById(id);\n            btn?.classList.remove('correct', 'incorrect');\n        });\n        \n        if (selectedLetter === this.currentChallenge.correctOptionLetter) {\n            // Correct answer!\n            selectedBtn?.classList.add('correct');\n            if (feedbackElement) {\n                feedbackElement.textContent = 'CORRECT! Repair applied.';\n                feedbackElement.className = 'math-feedback success';\n            }\n            \n            // Call success callback and close immediately\n            if (this.currentChallenge.onSuccess) {\n                this.currentChallenge.onSuccess(this.currentChallenge.repairType);\n            }\n            this.closePanel();\n        } else {\n            // Wrong answer - apply penalty\n            selectedBtn?.classList.add('incorrect');\n            if (feedbackElement) {\n                feedbackElement.textContent = 'INCORRECT! Penalty applied. Try again.';\n                feedbackElement.className = 'math-feedback error';\n            }\n            \n            // Call failure callback\n            if (this.currentChallenge.onFailure) {\n                this.currentChallenge.onFailure(this.currentChallenge.repairType);\n            }\n            \n            // Show correct answer briefly\n            const correctBtn = document.getElementById(`option${this.currentChallenge.correctOptionLetter}`);\n            correctBtn?.classList.add('correct');\n            \n            // Reset after 2 seconds\n            setTimeout(() => {\n                selectedBtn?.classList.remove('incorrect');\n                correctBtn?.classList.remove('correct');\n                if (feedbackElement) {\n                    feedbackElement.textContent = '';\n                    feedbackElement.className = 'math-feedback';\n                }\n            }, 2000);\n        }\n    }\n\n    private showPanel(): void {\n        // Hide weapons panel and show math challenge panel\n        const weaponsPanel = document.querySelector('.weapons-panel') as HTMLElement;\n        const mathPanel = document.getElementById('mathChallengePanel');\n        if (weaponsPanel) weaponsPanel.style.display = 'none';\n        if (mathPanel) mathPanel.style.display = 'block';\n    }\n\n    public closePanel(): void {\n        // Hide math challenge panel and show weapons panel\n        const mathPanel = document.getElementById('mathChallengePanel');\n        const weaponsPanel = document.querySelector('.weapons-panel') as HTMLElement;\n        if (mathPanel) mathPanel.style.display = 'none';\n        if (weaponsPanel) weaponsPanel.style.display = 'block';\n        \n        // Call cancel callback if provided\n        if (this.currentChallenge && this.currentChallenge.onCancel) {\n            this.currentChallenge.onCancel();\n        }\n        \n        // Reset state\n        this.panelOpen = false;\n        this.currentChallenge = null;\n        \n        console.log('Math challenge closed');\n    }\n\n    public isPanelOpen(): boolean {\n        return this.panelOpen;\n    }\n\n    public getCurrentChallenge(): MathChallengeType | null {\n        return this.currentChallenge;\n    }\n}\n","/**\n * AssetManager - Handles loading and managing game assets (images and sounds)\n */\nimport type { IAssetManager } from './types.js';\n\nexport class AssetManager implements IAssetManager {\n    public images: Record<string, HTMLImageElement>;\n    public sounds: Record<string, HTMLAudioElement>;\n    public loadingComplete: boolean;\n    public loadPromises: Promise<any>[];\n\n    constructor() {\n        this.images = {};\n        this.sounds = {};\n        this.loadingComplete = false;\n        this.loadPromises = [];\n        \n        this.initializeAssets();\n    }\n\n    public initializeAssets(): void {\n        // Get the base URL from Vite (will be / in dev, /star_trek/ in production)\n        const baseUrl = import.meta.env.BASE_URL;\n        \n        // Load images with promises\n        this.images = {\n            playerShip: this.loadImage(`${baseUrl}assets/images/player-ship.png`),\n            enemyShip: this.loadImage(`${baseUrl}assets/images/opponent-ship.png`),\n        };\n\n        // Load sounds with promises\n        this.sounds = {\n            photon: this.loadSound(`${baseUrl}assets/sounds/photon_torpedo.mp3`),\n            phaser: this.loadSound(`${baseUrl}assets/sounds/phasers.mp3`),\n            quantum: this.loadSound(`${baseUrl}assets/sounds/quantum_torpedo.mp3`),\n            romulanDisruptor: this.loadSound(`${baseUrl}assets/sounds/romulan_disruptor.mp3`),\n            romulanTorpedo: this.loadSound(`${baseUrl}assets/sounds/romulan_torpedo.mp3`),\n            explosion1: this.loadSound(`${baseUrl}assets/sounds/smallexplosion1.mp3`),\n            explosion2: this.loadSound(`${baseUrl}assets/sounds/smallexplosion2.mp3`),\n        };\n\n        // Use promise-based loading instead of polling\n        this.waitForAssets().then(() => {\n            this.loadingComplete = true;\n            console.log('All assets loaded successfully!');\n        }).catch(error => {\n            console.error('Error loading assets:', error);\n        });\n    }\n\n    public loadImage(src: string): HTMLImageElement {\n        const img = new Image();\n        \n        const loadPromise = new Promise((resolve, reject) => {\n            img.onload = () => {\n                console.log(`Image loaded: ${src}`);\n                resolve(img);\n            };\n            img.onerror = (e) => {\n                console.error(`Image load error for ${src}:`, e);\n                reject(e);\n            };\n        });\n        \n        this.loadPromises.push(loadPromise);\n        img.src = src;\n        return img;\n    }\n\n    public loadSound(src: string): HTMLAudioElement {\n        const audio = new Audio(src);\n        audio.volume = 0.3; // 30% volume to avoid being too loud\n        \n        const loadPromise = new Promise((resolve, reject) => {\n            audio.addEventListener('canplaythrough', () => {\n                console.log(`Sound loaded: ${src}`);\n                resolve(audio);\n            });\n            audio.addEventListener('error', (e) => {\n                console.error(`Sound load error for ${src}:`, e);\n                reject(e);\n            });\n        });\n        \n        this.loadPromises.push(loadPromise);\n        audio.load(); // Start loading\n        return audio;\n    }\n\n    public checkAssetsLoaded(): boolean {\n        const allImagesLoaded = Object.values(this.images).every(img => img.complete);\n        \n        if (allImagesLoaded && !this.loadingComplete) {\n            this.loadingComplete = true;\n            console.log('All assets loaded successfully!');\n            return true;\n        } else if (!allImagesLoaded) {\n            // Check again in 100ms\n            setTimeout(() => this.checkAssetsLoaded(), 100);\n            return false;\n        }\n        \n        return this.loadingComplete;\n    }\n\n    // Promise-based asset loading\n    public async waitForAssets(): Promise<boolean> {\n        try {\n            await Promise.all(this.loadPromises);\n            this.loadingComplete = true;\n            console.log('All assets loaded via promises!');\n            return true;\n        } catch (error) {\n            console.error('Error loading assets:', error);\n            return false;\n        }\n    }\n\n    public getImage(name: string): HTMLImageElement | undefined {\n        return this.images[name];\n    }\n\n    public getSound(name: string): HTMLAudioElement | undefined {\n        return this.sounds[name];\n    }\n\n    public playSound(name: string): void {\n        const sound = this.sounds[name];\n        if (sound) {\n            console.log(`Playing ${name} sound...`);\n            sound.currentTime = 0; // Reset to beginning\n            sound.play().catch(error => {\n                console.error(`Sound play failed for ${name}:`, error);\n            });\n        } else {\n            console.error(`Sound not found: ${name}`);\n        }\n    }\n\n    public playWeaponSound(weaponType: string): void {\n        console.log(`${weaponType.toUpperCase()} FIRED!`);\n        this.playSound(weaponType);\n    }\n\n    public playEnemyWeaponSound(weaponType: string): void {\n        console.log(`ENEMY ${weaponType.toUpperCase()} FIRED!`);\n        \n        // Map enemy weapon types to Romulan sounds\n        const soundMap: Record<string, string> = {\n            'phaser': 'romulanDisruptor',\n            'torpedo': 'romulanTorpedo'\n        };\n        \n        const soundKey = soundMap[weaponType];\n        if (soundKey) {\n            this.playSound(soundKey);\n        } else {\n            console.error(`Enemy sound not found for weapon type: ${weaponType}`);\n        }\n    }\n\n    public playExplosionSound(): void {\n        // Randomly select between the two explosion sounds\n        const explosionSounds = ['explosion1', 'explosion2'];\n        const randomSound = explosionSounds[Math.floor(Math.random() * explosionSounds.length)]!;\n        this.playSound(randomSound);\n    }\n\n    public isLoaded(): boolean {\n        return this.loadingComplete;\n    }\n\n    // Get all assets for backwards compatibility\n    public getAssets(): { images: Record<string, HTMLImageElement>; sounds: Record<string, HTMLAudioElement> } {\n        return {\n            images: this.images,\n            sounds: this.sounds\n        };\n    }\n}\n","/**\n * Ship - Represents player and enemy ships with their properties and behaviors\n */\nimport type { IShip, ShipConfig, ShipBounds } from './types.js';\n\nexport class Ship implements IShip {\n    // Ship properties\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public health: number;\n    public maxHealth: number;\n    public energy: number;\n    public maxEnergy: number;\n    public velocityX: number;\n    public direction: number;\n    public minX: number;\n    public maxX: number;\n    public isPlayer: boolean;\n    public isEnemy: boolean;\n\n    constructor(config: ShipConfig) {\n        // Position and size\n        this.x = config.x ?? 0;\n        this.y = config.y ?? 0;\n        this.width = config.width;\n        this.height = config.height;\n        \n        // Health and energy\n        this.health = config.health || 100;\n        this.maxHealth = config.maxHealth || this.health;\n        this.energy = config.energy || 100;\n        this.maxEnergy = config.maxEnergy || this.energy;\n        \n        // Movement properties\n        this.velocityX = config.velocityX || 0.8;\n        this.direction = config.direction || 1; // 1 for right, -1 for left\n        this.minX = config.minX || 60;\n        this.maxX = config.maxX || 740;\n        \n        // Ship type\n        this.isPlayer = config.isPlayer || false;\n        this.isEnemy = config.isEnemy || false;\n    }\n\n    // Update ship position and handle boundary collisions\n    public update(): void {\n        // Update position\n        this.x += this.velocityX * this.direction;\n        \n        // Bounce off boundaries\n        if (this.x <= this.minX) {\n            this.x = this.minX;\n            this.direction = 1; // Change direction to right\n        } else if (this.x >= this.maxX) {\n            this.x = this.maxX;\n            this.direction = -1; // Change direction to left\n        }\n    }\n\n    // Take damage\n    public takeDamage(damage: number): boolean {\n        this.health -= damage;\n        this.health = Math.max(0, this.health);\n        \n        console.log(`${this.isPlayer ? 'Player' : 'Enemy'} took ${damage} damage! Health: ${this.health}`);\n        \n        return this.health <= 0; // Return true if destroyed\n    }\n\n    // Repair hull (used by math challenge system)\n    public repairHull(amount: number = 100): void {\n        this.health = Math.min(this.maxHealth, this.health + amount);\n        console.log(`Hull repaired! Health: ${this.health}`);\n    }\n\n    // Recharge energy (used by math challenge system)\n    public rechargeEnergy(amount: number = 100): void {\n        if (this.isPlayer) {\n            this.energy = Math.min(this.maxEnergy, this.energy + amount);\n            console.log(`Energy recharged! Energy: ${this.energy}`);\n        }\n    }\n\n    // Consume energy (for weapons)\n    public consumeEnergy(amount: number): boolean {\n        if (this.isPlayer) {\n            this.energy -= amount;\n            this.energy = Math.max(0, this.energy);\n            return this.energy >= 0;\n        }\n        return true; // Enemy ships don't use energy system\n    }\n\n    // Check if ship has enough energy for an action\n    public hasEnergy(amount: number): boolean {\n        if (this.isPlayer) {\n            return this.energy >= amount;\n        }\n        return true; // Enemy ships don't use energy system\n    }\n\n    // Get collision bounds\n    public getBounds(): ShipBounds {\n        return {\n            left: this.x - this.width/2,\n            right: this.x + this.width/2,\n            top: this.y - this.height/2,\n            bottom: this.y + this.height/2\n        };\n    }\n\n    // Check if a point is inside the ship\n    public contains(x: number, y: number): boolean {\n        const bounds = this.getBounds();\n        return x >= bounds.left && x <= bounds.right &&\n               y >= bounds.top && y <= bounds.bottom;\n    }\n\n    // Reset ship to initial state\n    public reset(config: Partial<ShipConfig>): void {\n        this.x = config.x ?? this.x;\n        this.y = config.y ?? this.y;\n        this.health = config.health ?? this.maxHealth;\n        this.energy = config.energy ?? this.maxEnergy;\n        this.direction = config.direction ?? 1;\n    }\n\n    // Level up enemy ship (increase stats)\n    public levelUp(level: number): void {\n        if (this.isEnemy) {\n            this.maxHealth = 100 + (level - 1) * 25;\n            this.health = this.maxHealth;\n            console.log(`Enemy leveled up! Level ${level}, Health: ${this.maxHealth}`);\n        }\n    }\n\n    // Get health percentage\n    public getHealthPercent(): number {\n        return (this.health / this.maxHealth) * 100;\n    }\n\n    // Get energy percentage  \n    public getEnergyPercent(): number {\n        return (this.energy / this.maxEnergy) * 100;\n    }\n\n    // Check if ship is destroyed\n    public isDestroyed(): boolean {\n        return this.health <= 0;\n    }\n\n    // Check if ship is alive\n    public isAlive(): boolean {\n        return this.health > 0;\n    }\n}\n\n// Factory functions for creating specific ship types\nexport function createPlayerShip(canvasWidth: number, canvasHeight: number): Ship {\n    return new Ship({\n        x: canvasWidth / 2,\n        y: canvasHeight - 120,\n        width: 120,\n        height: 90,\n        health: 100,\n        energy: 100,\n        maxEnergy: 100,\n        velocityX: 0.8,\n        direction: 1,\n        minX: 60,\n        maxX: canvasWidth - 60,\n        isPlayer: true\n    });\n}\n\nexport function createEnemyShip(canvasWidth: number, _canvasHeight: number, level: number = 1): Ship {\n    const maxHealth = 100 + (level - 1) * 25;\n    return new Ship({\n        x: canvasWidth / 2,\n        y: 90,\n        width: 120,\n        height: 90,\n        health: maxHealth,\n        maxHealth: maxHealth,\n        velocityX: 0.6,\n        direction: -1,\n        minX: 60,\n        maxX: canvasWidth - 60,\n        isEnemy: true\n    });\n}\n","/**\n * WeaponSystem - Handles weapons, projectiles, and combat mechanics\n */\nimport type { IWeaponSystem, IAssetManager, ICollisionManager, IParticleSystem, IShip, Projectile, MissMessage, ShipExplosion, WeaponConfigs, WeaponConfig, TorpedoProjectile, PhaserBeam } from './types.js';\n\nexport class WeaponSystem implements IWeaponSystem {\n    public assetManager: IAssetManager;\n    public collisionManager: ICollisionManager;\n    public particleSystem: IParticleSystem;\n    public projectiles: Projectile[];\n    public missMessages: MissMessage[];\n    public weaponConfigs: WeaponConfigs;\n\n    constructor(assetManager: IAssetManager, collisionManager: ICollisionManager, particleSystem: IParticleSystem) {\n        this.assetManager = assetManager;\n        this.collisionManager = collisionManager;\n        this.particleSystem = particleSystem;\n        this.projectiles = [];\n        this.missMessages = [];\n        \n        // Weapon configurations\n        this.weaponConfigs = {\n            photon: {\n                energyCost: 25,\n                damage: 15,\n                color: '#ff0000',\n                speed: 0.005,\n                arcHeight: { min: 80, max: 200 }\n            },\n            phaser: {\n                energyCost: 50,\n                damage: 10,\n                duration: 500,\n                instant: true\n            },\n            quantum: {\n                energyCost: 50,\n                damage: 20,\n                color: '#ffffff',\n                speed: 0.006,\n                arcHeight: { min: 100, max: 250 },\n                hasParticles: true\n            }\n        };\n    }\n\n    // Fire a weapon from a ship\n    public fireWeapon(weaponType: string, shooterShip: IShip, targetShip: IShip): boolean {\n        const config = this.weaponConfigs[weaponType];\n        if (!config) {\n            console.error(`Unknown weapon type: ${weaponType}`);\n            return false;\n        }\n\n        // Check energy cost for player ships\n        if (shooterShip.isPlayer && !shooterShip.hasEnergy(config.energyCost)) {\n            console.log(`Insufficient energy for ${weaponType}! Need ${config.energyCost}, have ${shooterShip.energy}`);\n            return false;\n        }\n\n        // Consume energy\n        if (shooterShip.isPlayer) {\n            shooterShip.consumeEnergy(config.energyCost);\n        }\n\n        // Handle phaser (instant hit)\n        if (config.instant) {\n            this.createPhaserBeam(shooterShip, targetShip, config);\n            this.assetManager.playWeaponSound(weaponType);\n            \n            // Apply damage immediately for phaser\n            const wasDestroyed = targetShip.takeDamage(config.damage);\n            if (wasDestroyed) {\n                this.particleSystem.createShipExplosion(targetShip);\n            }\n            return true;\n        }\n\n        // Create projectile for torpedoes\n        const projectile = this.createProjectile(weaponType, shooterShip, targetShip, config);\n        this.projectiles.push(projectile);\n        \n        // Play weapon sound\n        if (shooterShip.isPlayer) {\n            this.assetManager.playWeaponSound(weaponType);\n        } else {\n            this.assetManager.playEnemyWeaponSound('torpedo');\n        }\n\n        return true;\n    }\n\n    // Fire enemy weapons\n    public fireEnemyWeapon(enemyShip: IShip, playerShip: IShip, level: number = 1): void {\n        const weaponTypes = ['phaser', 'torpedo'];\n        const weaponType = weaponTypes[Math.floor(Math.random() * weaponTypes.length)];\n        \n        if (weaponType === 'phaser') {\n            // Enemy phaser beam\n            const beam: PhaserBeam = {\n                shooterShip: enemyShip,\n                targetShip: playerShip,\n                duration: 500,\n                startTime: Date.now(),\n                type: 'enemy_phaser',\n                damage: 15 + level * 2\n            };\n            \n            this.projectiles.push(beam);\n            this.assetManager.playEnemyWeaponSound('phaser');\n            \n            // Apply damage immediately for enemy phaser\n            const wasDestroyed = playerShip.takeDamage(beam.damage);\n            if (wasDestroyed) {\n                this.particleSystem.createShipExplosion(playerShip);\n            }\n        } else {\n            // Enemy torpedo\n            const projectile = {\n                x: enemyShip.x,\n                y: enemyShip.y + enemyShip.height/2 + 10,\n                startX: enemyShip.x,\n                startY: enemyShip.y + enemyShip.height/2 + 10,\n                targetX: playerShip.x,\n                targetY: playerShip.y,\n                progress: 0,\n                arcHeight: 60 + Math.random() * 80,\n                arcDirection: Math.random() < 0.5 ? -1 : 1,\n                speed: 0.008 + level * 0.001,\n                width: 4,\n                height: 12,\n                damage: 20 + level * 3,\n                color: '#00ff00',\n                type: 'enemy_torpedo',\n                trail: [],\n                useCircularArc: true,\n                isEnemyProjectile: true\n            };\n            \n            this.projectiles.push(projectile);\n            this.assetManager.playEnemyWeaponSound('torpedo');\n        }\n        \n        console.log(`Enemy fired ${weaponType}!`);\n    }\n\n    private createProjectile(weaponType: string, shooterShip: IShip, targetShip: IShip, config: WeaponConfig): TorpedoProjectile {\n        const isEnemy = shooterShip.isEnemy;\n        const startY = isEnemy ? \n            shooterShip.y + shooterShip.height/2 + 10 : \n            shooterShip.y - shooterShip.height/2 - 10;\n\n        const projectile: TorpedoProjectile = {\n            x: shooterShip.x,\n            y: startY,\n            startX: shooterShip.x,\n            startY: startY,\n            targetX: targetShip.x,\n            targetY: targetShip.y,\n            progress: 0,\n            arcHeight: config.arcHeight ? config.arcHeight.min + Math.random() * (config.arcHeight.max - config.arcHeight.min) : 100,\n            arcDirection: Math.random() < 0.5 ? -1 : 1,\n            speed: config.speed || 0.005,\n            width: weaponType === 'quantum' ? 6 : 4,\n            height: weaponType === 'quantum' ? 20 : 15,\n            damage: config.damage,\n            color: config.color || '#ff0000',\n            type: weaponType,\n            trail: [],\n            useCircularArc: true,\n            isEnemyProjectile: isEnemy\n        };\n\n        // Add particles for quantum torpedoes\n        if (config.hasParticles) {\n            projectile.particles = [];\n        }\n\n        return projectile;\n    }\n\n    private createPhaserBeam(shooterShip: IShip, targetShip: IShip, config: WeaponConfig): void {\n        const isEnemy = shooterShip.isEnemy;\n        const beam: PhaserBeam = {\n            shooterShip: shooterShip,\n            targetShip: targetShip,\n            duration: config.duration || 500,\n            startTime: Date.now(),\n            type: isEnemy ? 'enemy_phaser' : 'phaser',\n            damage: config.damage\n        };\n        \n        this.projectiles.push(beam);\n    }\n\n    // Update all projectiles\n    public update(playerShip: IShip, enemyShip: IShip): void {\n        this.updateProjectiles(playerShip, enemyShip);\n        this.updateMissMessages();\n        this.particleSystem.update();\n    }\n\n    private updateProjectiles(playerShip: IShip, enemyShip: IShip): void {\n        this.projectiles = this.projectiles.filter(projectile => {\n            // Handle phaser beams\n            if (projectile.type === 'phaser' || projectile.type === 'enemy_phaser') {\n                const phaserBeam = projectile as PhaserBeam;\n                return Date.now() - phaserBeam.startTime < phaserBeam.duration;\n            }\n            \n            // Handle explosion particles\n            if (projectile.type === 'explosion') {\n                const explosionParticle = projectile as any;\n                explosionParticle.x += explosionParticle.vx;\n                explosionParticle.y += explosionParticle.vy;\n                explosionParticle.life--;\n                return explosionParticle.life > 0;\n            }\n            \n            // Handle torpedoes with arc movement\n            if ('progress' in projectile) {\n                const torpedoProjectile = projectile as TorpedoProjectile;\n                this.updateProjectileArc(torpedoProjectile);\n                \n                // Add trail effect\n                if (torpedoProjectile.trail) {\n                    torpedoProjectile.trail.push({x: torpedoProjectile.x, y: torpedoProjectile.y});\n                    const maxTrailLength = torpedoProjectile.useCircularArc ? 30 : 8;\n                    if (torpedoProjectile.trail.length > maxTrailLength) {\n                        torpedoProjectile.trail.shift();\n                    }\n                }\n                \n                // Add particles for quantum torpedoes\n                this.particleSystem.updateQuantumParticles(torpedoProjectile);\n                \n                // Check collisions\n                const collision = this.checkCollisions(torpedoProjectile, playerShip, enemyShip);\n                if (collision) {\n                    return false; // Remove projectile\n                }\n                \n                // Remove if arc completed without hit\n                if (this.collisionManager.checkProjectileMiss(torpedoProjectile)) {\n                    this.createMissMessage(torpedoProjectile, playerShip, enemyShip);\n                    return false;\n                }\n            }\n            \n            return true;\n        });\n    }\n\n    private updateProjectileArc(projectile: TorpedoProjectile): void {\n        projectile.progress += projectile.speed;\n        \n        // Store previous position for rotation\n        const prevX = projectile.x;\n        const prevY = projectile.y;\n        \n        const t = projectile.progress;\n        \n        if (projectile.useCircularArc) {\n            // Cache expensive calculations on first use\n            if (!projectile.cached) {\n                const deltaX = projectile.targetX - projectile.startX;\n                const deltaY = projectile.targetY - projectile.startY;\n                const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n                \n                projectile.cached = {\n                    deltaX: deltaX,\n                    deltaY: deltaY,\n                    perpX: -deltaY / distance,\n                    perpY: deltaX / distance\n                };\n            }\n            \n            // Create sideways rainbow arc using cached values\n            const baseX = projectile.startX + projectile.cached.deltaX * t;\n            const baseY = projectile.startY + projectile.cached.deltaY * t;\n            \n            // Arc displacement: sine wave for smooth curve\n            const arcOffset = Math.sin(Math.PI * t) * projectile.arcHeight * projectile.arcDirection;\n            \n            projectile.x = baseX + projectile.cached.perpX * arcOffset;\n            projectile.y = baseY + projectile.cached.perpY * arcOffset;\n        }\n        \n        // Calculate rotation angle\n        if (prevX !== undefined && prevY !== undefined) {\n            const dx = projectile.x - prevX;\n            const dy = projectile.y - prevY;\n            projectile.rotation = Math.atan2(dy, dx);\n        }\n        \n        // // Ensure final position\n        // if (projectile.progress >= 1.0) {\n        //     projectile.x = projectile.targetX;\n        //     projectile.y = projectile.targetY;\n        // }\n    }\n\n\n\n    private checkCollisions(projectile: TorpedoProjectile, playerShip: IShip, enemyShip: IShip): boolean {\n        const collisionResult = this.collisionManager.checkProjectileCollision(projectile, playerShip, enemyShip);\n        \n        if (collisionResult.hit && collisionResult.impactPoint) {\n            this.particleSystem.createExplosion(collisionResult.impactPoint.x, collisionResult.impactPoint.y);\n            \n            if (collisionResult.wasDestroyed && collisionResult.targetShip) {\n                this.particleSystem.createShipExplosion(collisionResult.targetShip);\n            }\n            \n            return true; // Collision detected\n        }\n        \n        return false;\n    }\n\n\n\n\n\n    private createMissMessage(projectile: TorpedoProjectile, playerShip: IShip, enemyShip: IShip): void {\n        const targetShip = projectile.isEnemyProjectile ? playerShip : enemyShip;\n        const messageX = targetShip.x + targetShip.width/2 + 20;\n        const messageY = targetShip.y;\n        \n        this.missMessages.push({\n            x: messageX,\n            y: messageY,\n            text: 'MISSED',\n            life: 120,\n            maxLife: 120,\n            color: '#ff0000',\n            fontSize: 16,\n            startTime: Date.now()\n        });\n        \n        console.log(`${projectile.isEnemyProjectile ? 'Enemy' : 'Player'} torpedo missed!`);\n    }\n\n    private updateMissMessages(): void {\n        this.missMessages = this.missMessages.filter(message => {\n            message.life--;\n            return message.life > 0;\n        });\n    }\n\n\n\n    // Clear all projectiles and effects\n    public clear(): void {\n        this.projectiles = [];\n        this.missMessages = [];\n        this.particleSystem.clear();\n    }\n\n    // Getters for rendering\n    public getProjectiles(): Projectile[] {\n        return [...this.projectiles, ...this.particleSystem.getExplosionParticles()];\n    }\n\n    public getMissMessages(): MissMessage[] {\n        return this.missMessages;\n    }\n\n    public getShipExplosions(): ShipExplosion[] {\n        return this.particleSystem.getShipExplosions();\n    }\n}\n","/**\n * CollisionManager - Handles all collision detection in the game\n */\nimport type { ICollisionManager, IShip, TorpedoProjectile, CollisionResult } from './types.js';\n\nexport class CollisionManager implements ICollisionManager {\n    constructor() {\n        // No dependencies needed for collision detection\n    }\n\n    /**\n     * Check collision between a projectile and its target ship\n     * @param projectile The projectile to check\n     * @param playerShip The player ship\n     * @param enemyShip The enemy ship\n     * @returns CollisionResult with hit information\n     */\n    public checkProjectileCollision(projectile: TorpedoProjectile, playerShip: IShip, enemyShip: IShip): CollisionResult {\n        const targetShip = projectile.isEnemyProjectile ? playerShip : enemyShip;\n        \n        if (targetShip.contains(projectile.x, projectile.y)) {\n            const wasDestroyed = targetShip.takeDamage(projectile.damage);\n            \n            return {\n                hit: true,\n                targetShip: targetShip,\n                wasDestroyed: wasDestroyed,\n                impactPoint: { x: projectile.x, y: projectile.y }\n            };\n        }\n        \n        return { hit: false };\n    }\n\n    /**\n     * Check if two ships are colliding (for future ship-to-ship collision)\n     * @param ship1 First ship\n     * @param ship2 Second ship\n     * @returns true if ships are colliding\n     */\n    public checkShipCollision(ship1: IShip, ship2: IShip): boolean {\n        const bounds1 = ship1.getBounds();\n        const bounds2 = ship2.getBounds();\n        \n        return !(bounds1.right < bounds2.left || \n                bounds1.left > bounds2.right || \n                bounds1.bottom < bounds2.top || \n                bounds1.top > bounds2.bottom);\n    }\n\n    /**\n     * Check if a point is within a ship's bounds\n     * @param x X coordinate\n     * @param y Y coordinate\n     * @param ship Ship to check against\n     * @returns true if point is within ship bounds\n     */\n    public checkPointInShip(x: number, y: number, ship: IShip): boolean {\n        return ship.contains(x, y);\n    }\n\n    /**\n     * Check if projectile has missed its target (used for miss messages)\n     * @param projectile The projectile to check\n     * @returns true if projectile has clearly missed\n     */\n    public checkProjectileMiss(projectile: TorpedoProjectile): boolean {\n        // Projectile is considered missed if progress >= 1.5 (past target)\n        return projectile.progress >= 1.5;\n    }\n}\n","/**\n * ParticleSystem - Handles all particle effects, explosions, and visual effects\n */\nimport type { IParticleSystem, IAssetManager, IShip, ExplosionParticle, ShipExplosion, Particle, Projectile } from './types.js';\n\nexport class ParticleSystem implements IParticleSystem {\n    private assetManager: IAssetManager;\n    private explosionParticles: ExplosionParticle[];\n    private shipExplosions: ShipExplosion[];\n\n    constructor(assetManager: IAssetManager) {\n        this.assetManager = assetManager;\n        this.explosionParticles = [];\n        this.shipExplosions = [];\n    }\n\n    /**\n     * Create an explosion at the specified location\n     * @param x X coordinate\n     * @param y Y coordinate\n     */\n    public createExplosion(x: number, y: number): ExplosionParticle[] {\n        this.assetManager.playExplosionSound();\n        \n        const newParticles: ExplosionParticle[] = [];\n        \n        // Add explosion particles\n        for (let i = 0; i < 20; i++) {\n            const explosionParticle: ExplosionParticle = {\n                x: x + (Math.random() - 0.5) * 20,\n                y: y + (Math.random() - 0.5) * 20,\n                vx: (Math.random() - 0.5) * 4,\n                vy: (Math.random() - 0.5) * 4,\n                life: 30,\n                maxLife: 30,\n                size: Math.random() * 3 + 1,\n                type: 'explosion'\n            };\n            \n            this.explosionParticles.push(explosionParticle);\n            newParticles.push(explosionParticle);\n        }\n        \n        return newParticles;\n    }\n\n    /**\n     * Create a ship explosion with multiple waves\n     * @param ship The ship that exploded\n     */\n    public createShipExplosion(ship: IShip): void {\n        this.assetManager.playExplosionSound();\n        \n        const explosionData: ShipExplosion = {\n            x: ship.x,\n            y: ship.y,\n            width: ship.width,\n            height: ship.height,\n            particles: [],\n            startTime: Date.now(),\n            duration: 3000,\n            isPlayer: ship.isPlayer\n        };\n        \n        // Create many explosion particles\n        for (let i = 0; i < 80; i++) {\n            const particle: Particle = {\n                x: ship.x + (Math.random() - 0.5) * ship.width,\n                y: ship.y + (Math.random() - 0.5) * ship.height,\n                vx: (Math.random() - 0.5) * 8,\n                vy: (Math.random() - 0.5) * 8,\n                life: 60 + Math.random() * 120,\n                maxLife: 60 + Math.random() * 120,\n                size: Math.random() * 6 + 2,\n                color: Math.random() < 0.5 ? '#ff6600' : '#ffff00',\n                type: 'shipExplosion'\n            };\n            explosionData.particles.push(particle);\n        }\n        \n        // Add secondary explosion waves\n        for (let wave = 0; wave < 3; wave++) {\n            setTimeout(() => {\n                for (let i = 0; i < 30; i++) {\n                    const particle: Particle = {\n                        x: ship.x + (Math.random() - 0.5) * ship.width * (1 + wave * 0.5),\n                        y: ship.y + (Math.random() - 0.5) * ship.height * (1 + wave * 0.5),\n                        vx: (Math.random() - 0.5) * (6 - wave),\n                        vy: (Math.random() - 0.5) * (6 - wave),\n                        life: 40 + Math.random() * 80,\n                        maxLife: 40 + Math.random() * 80,\n                        size: Math.random() * 4 + 1,\n                        color: wave === 0 ? '#ff0000' : (wave === 1 ? '#ff6600' : '#ffff00'),\n                        type: 'shipExplosion'\n                    };\n                    explosionData.particles.push(particle);\n                }\n                if (wave < 2) {\n                    this.assetManager.playExplosionSound();\n                }\n            }, wave * 500);\n        }\n        \n        this.shipExplosions.push(explosionData);\n        console.log(`${ship.isPlayer ? 'Player' : 'Enemy'} ship explosion created!`);\n    }\n\n    /**\n     * Update all particle effects\n     */\n    public update(): void {\n        this.updateExplosionParticles();\n        this.updateShipExplosions();\n    }\n\n    /**\n     * Update explosion particles\n     */\n    private updateExplosionParticles(): void {\n        this.explosionParticles = this.explosionParticles.filter(particle => {\n            particle.x += particle.vx;\n            particle.y += particle.vy;\n            particle.life--;\n            return particle.life > 0;\n        });\n    }\n\n    /**\n     * Update ship explosions\n     */\n    private updateShipExplosions(): void {\n        this.shipExplosions.forEach(explosion => {\n            explosion.particles = explosion.particles.filter(particle => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                particle.life--;\n                \n                // Add gravity effect\n                particle.vy += 0.1;\n                particle.vx *= 0.99;\n                particle.vy *= 0.99;\n                \n                return particle.life > 0;\n            });\n        });\n        \n        // Remove finished explosions\n        this.shipExplosions = this.shipExplosions.filter(explosion => {\n            const elapsed = Date.now() - explosion.startTime;\n            return elapsed < explosion.duration && explosion.particles.length > 0;\n        });\n    }\n\n    /**\n     * Add quantum torpedo particles to a projectile\n     * @param projectile The quantum torpedo projectile\n     */\n    public updateQuantumParticles(projectile: any): void {\n        if (projectile.type === 'quantum' && projectile.particles) {\n            // Add new particles\n            for (let i = 0; i < 3; i++) {\n                projectile.particles.push({\n                    x: projectile.x + (Math.random() - 0.5) * 10,\n                    y: projectile.y + (Math.random() - 0.5) * 10,\n                    vx: (Math.random() - 0.5) * 2,\n                    vy: (Math.random() - 0.5) * 2,\n                    life: 30,\n                    maxLife: 30\n                });\n            }\n            \n            // Update existing particles\n            projectile.particles = projectile.particles.filter((particle: Particle) => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                particle.life--;\n                return particle.life > 0;\n            });\n        }\n    }\n\n    /**\n     * Get all explosion particles as projectiles for rendering\n     */\n    public getExplosionParticles(): Projectile[] {\n        return this.explosionParticles as Projectile[];\n    }\n\n    /**\n     * Get all ship explosions\n     */\n    public getShipExplosions(): ShipExplosion[] {\n        return this.shipExplosions;\n    }\n\n    /**\n     * Clear all particle effects\n     */\n    public clear(): void {\n        this.explosionParticles = [];\n        this.shipExplosions = [];\n    }\n}\n","/**\n * EnemyAI - Handles enemy behavior, shooting patterns, and AI decisions\n */\nimport type { IEnemyAI, IShip, IWeaponSystem, EnemyAIConfig } from './types.js';\n\nexport class EnemyAI implements IEnemyAI {\n    private weaponSystem: IWeaponSystem;\n    private lastShotTime: number;\n    private shootInterval: number;\n    private baseShootInterval: number;\n    private level: number;\n\n    constructor(weaponSystem: IWeaponSystem, config?: EnemyAIConfig) {\n        this.weaponSystem = weaponSystem;\n        this.lastShotTime = Date.now();\n        this.baseShootInterval = config?.baseShootInterval || 6000; // 6 seconds default\n        this.shootInterval = this.baseShootInterval;\n        this.level = 1;\n    }\n\n    /**\n     * Update enemy AI behavior\n     * @param enemyShip The enemy ship\n     * @param playerShip The player ship\n     * @param gameActive Whether the game is active (not paused, not level completed)\n     */\n    public update(enemyShip: IShip, playerShip: IShip, gameActive: boolean): void {\n        if (!gameActive || !enemyShip.isAlive()) {\n            return;\n        }\n\n        const currentTime = Date.now();\n        \n        // Check if it's time to shoot\n        if (currentTime - this.lastShotTime > this.shootInterval) {\n            this.fireAtPlayer(enemyShip, playerShip);\n            this.lastShotTime = currentTime;\n        }\n    }\n\n    /**\n     * Fire a weapon at the player\n     * @param enemyShip The enemy ship\n     * @param playerShip The player ship\n     */\n    private fireAtPlayer(enemyShip: IShip, playerShip: IShip): void {\n        this.weaponSystem.fireEnemyWeapon(enemyShip, playerShip, this.level);\n    }\n\n    /**\n     * Update enemy AI for a new level\n     * @param level The new level\n     */\n    public setLevel(level: number): void {\n        this.level = level;\n        \n        // Increase enemy firing rate based on level (faster = shorter interval)\n        // Level 1: 6000ms, Level 2: 5700ms, Level 3: 5400ms, etc.\n        // Minimum interval: 800ms\n        this.shootInterval = Math.max(800, this.baseShootInterval - (level - 1) * 300);\n        \n        console.log(`Enemy AI updated to Level ${level}! Firing rate: ${this.shootInterval}ms`);\n    }\n\n    /**\n     * Get current shooting interval\n     */\n    public getShootInterval(): number {\n        return this.shootInterval;\n    }\n\n    /**\n     * Get current level\n     */\n    public getLevel(): number {\n        return this.level;\n    }\n\n    /**\n     * Reset AI to initial state\n     */\n    public reset(): void {\n        this.lastShotTime = Date.now();\n        this.shootInterval = this.baseShootInterval;\n        this.level = 1;\n    }\n\n    /**\n     * Force immediate shot (for testing or special events)\n     * @param enemyShip The enemy ship\n     * @param playerShip The player ship\n     */\n    public forceShot(enemyShip: IShip, playerShip: IShip): void {\n        this.fireAtPlayer(enemyShip, playerShip);\n        this.lastShotTime = Date.now();\n    }\n\n    /**\n     * Check if enemy should be shooting based on difficulty settings\n     * @param difficulty Difficulty modifier (1.0 = normal, 1.5 = hard, 0.7 = easy)\n     */\n    public setDifficulty(difficulty: number): void {\n        // Adjust shooting interval based on difficulty\n        // Higher difficulty = faster shooting\n        this.shootInterval = Math.max(500, this.baseShootInterval / difficulty);\n        console.log(`Enemy AI difficulty set to ${difficulty}x! New firing rate: ${this.shootInterval}ms`);\n    }\n}\n","/**\n * GameStateManager - Handles game state transitions, level progression, and victory/defeat conditions\n */\nimport type { IGameStateManager, IShip, IEnemyAI, GameStateChangeCallback, GameStateInfo } from './types.js';\n\nexport class GameStateManager implements IGameStateManager {\n    private level: number;\n    private gameOver: boolean;\n    private gameOverMessage: string;\n    private levelCompleted: boolean;\n    private gameStarted: boolean;\n    private gamePaused: boolean;\n    private callbacks: GameStateChangeCallback[];\n\n    constructor() {\n        this.level = 1;\n        this.gameOver = false;\n        this.gameOverMessage = '';\n        this.levelCompleted = false;\n        this.gameStarted = false;\n        this.gamePaused = false;\n        this.callbacks = [];\n    }\n\n    /**\n     * Register a callback for state changes\n     * @param callback Function to call when state changes\n     */\n    public onStateChange(callback: GameStateChangeCallback): void {\n        this.callbacks.push(callback);\n    }\n\n    /**\n     * Notify all callbacks of state change\n     */\n    private notifyStateChange(): void {\n        const state = this.getCurrentState();\n        this.callbacks.forEach(callback => callback(state));\n    }\n\n    /**\n     * Start the game\n     */\n    public startGame(): void {\n        this.gameStarted = true;\n        this.gameOver = false;\n        this.gamePaused = false;\n        this.levelCompleted = false;\n        \n        console.log('Game started!');\n        this.notifyStateChange();\n    }\n\n    /**\n     * Pause the game\n     */\n    public pauseGame(): void {\n        if (this.gameStarted && !this.gameOver) {\n            this.gamePaused = true;\n            console.log('Game paused');\n            this.notifyStateChange();\n        }\n    }\n\n    /**\n     * Resume the game\n     */\n    public resumeGame(): void {\n        if (this.gameStarted && !this.gameOver) {\n            this.gamePaused = false;\n            console.log('Game resumed');\n            this.notifyStateChange();\n        }\n    }\n\n    /**\n     * End the game with a message\n     * @param message The game over message\n     */\n    public endGame(message: string): void {\n        this.gameOver = true;\n        this.gameOverMessage = message;\n        \n        console.log(`Game Over: ${message}`);\n        this.notifyStateChange();\n    }\n\n    /**\n     * Complete the current level\n     */\n    public completeLevel(): void {\n        if (!this.gameOver && this.gameStarted) {\n            this.levelCompleted = true;\n            console.log(`Level ${this.level} completed!`);\n            this.notifyStateChange();\n        }\n    }\n\n    /**\n     * Advance to the next level\n     * @param playerShip The player ship to reset\n     * @param enemyShip The enemy ship to reset\n     * @param enemyAI The enemy AI to update\n     * @param canvasWidth Canvas width for ship positioning\n     * @param canvasHeight Canvas height for ship positioning\n     */\n    public advanceToNextLevel(\n        playerShip: IShip, \n        enemyShip: IShip, \n        enemyAI: IEnemyAI,\n        canvasWidth: number,\n        canvasHeight: number\n    ): void {\n        this.level++;\n        this.levelCompleted = false;\n        \n        // Reset player to full health and energy\n        playerShip.reset({\n            x: canvasWidth / 2,\n            y: canvasHeight - 120,\n            health: 100,\n            energy: 100,\n            direction: 1\n        });\n        \n        // Level up and reset enemy ship\n        enemyShip.levelUp(this.level);\n        enemyShip.reset({\n            x: canvasWidth / 2,\n            y: 90,\n            health: enemyShip.maxHealth, // Use the new maxHealth from levelUp\n            direction: -1\n        });\n        \n        // Update enemy AI for new level\n        enemyAI.setLevel(this.level);\n        \n        console.log(`Advanced to Level ${this.level}! Enemy Health: ${enemyShip.maxHealth}`);\n        this.notifyStateChange();\n    }\n\n    /**\n     * Restart the game to initial state\n     * @param playerShip The player ship to reset\n     * @param enemyShip The enemy ship to reset\n     * @param enemyAI The enemy AI to reset\n     * @param canvasWidth Canvas width for ship positioning\n     * @param canvasHeight Canvas height for ship positioning\n     */\n    public restartGame(\n        playerShip: IShip, \n        enemyShip: IShip, \n        enemyAI: IEnemyAI,\n        canvasWidth: number,\n        canvasHeight: number\n    ): void {\n        // Reset game state\n        this.gameOver = false;\n        this.gameOverMessage = '';\n        this.level = 1;\n        this.levelCompleted = false;\n        this.gameStarted = false;\n        this.gamePaused = false;\n        \n        // Reset ships\n        playerShip.reset({\n            x: canvasWidth / 2,\n            y: canvasHeight - 120,\n            health: 100,\n            energy: 100,\n            direction: 1\n        });\n        \n        enemyShip.reset({\n            x: canvasWidth / 2,\n            y: 90,\n            health: 100,\n            direction: -1\n        });\n        \n        // Reset enemy AI\n        enemyAI.reset();\n        \n        console.log('Game restarted!');\n        this.notifyStateChange();\n    }\n\n    /**\n     * Check victory condition\n     * @param enemyShip The enemy ship to check\n     * @returns true if level should be completed\n     */\n    public checkVictoryCondition(enemyShip: IShip): boolean {\n        if (!this.levelCompleted && enemyShip.isDestroyed()) {\n            this.completeLevel();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Check defeat condition\n     * @param playerShip The player ship to check\n     * @returns true if game should end\n     */\n    public checkDefeatCondition(playerShip: IShip): boolean {\n        if (playerShip.isDestroyed() && !this.gameOver) {\n            this.endGame('MISSION FAILED');\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Get current game state\n     */\n    public getCurrentState(): GameStateInfo {\n        return {\n            level: this.level,\n            gameOver: this.gameOver,\n            gameOverMessage: this.gameOverMessage,\n            levelCompleted: this.levelCompleted,\n            gameStarted: this.gameStarted,\n            gamePaused: this.gamePaused,\n            canUpdate: this.gameStarted && !this.gamePaused && !this.gameOver,\n            canUpdateProjectiles: this.gameStarted && !this.gamePaused && !this.gameOver\n        };\n    }\n\n    /**\n     * Get current level\n     */\n    public getLevel(): number {\n        return this.level;\n    }\n\n    /**\n     * Check if game is active (can receive input)\n     */\n    public isGameActive(): boolean {\n        return this.gameStarted && !this.gameOver && !this.gamePaused;\n    }\n\n    /**\n     * Check if level is completed\n     */\n    public isLevelCompleted(): boolean {\n        return this.levelCompleted;\n    }\n\n    /**\n     * Check if game is over\n     */\n    public isGameOver(): boolean {\n        return this.gameOver;\n    }\n\n    /**\n     * Check if game is started\n     */\n    public isGameStarted(): boolean {\n        return this.gameStarted;\n    }\n\n    /**\n     * Check if game is paused\n     */\n    public isGamePaused(): boolean {\n        return this.gamePaused;\n    }\n}\n","/**\n * GameRenderer - Handles all drawing and rendering operations\n */\nimport type { IGameRenderer, IAssetManager, GameState, Star, Projectile, TorpedoProjectile, PhaserBeam, ExplosionParticle, MissMessage, ShipExplosion, IShip } from './types.js';\n\nexport class GameRenderer implements IGameRenderer {\n    public canvas: HTMLCanvasElement;\n    public ctx: CanvasRenderingContext2D;\n    public width: number;\n    public height: number;\n    public assetManager: IAssetManager;\n    public stars: Star[];\n    private processedImageCache?: Map<string, HTMLCanvasElement>;\n\n    constructor(canvas: HTMLCanvasElement, assetManager: IAssetManager) {\n        this.canvas = canvas;\n        const context = canvas.getContext('2d');\n        if (!context) {\n            throw new Error('Could not get 2D context from canvas');\n        }\n        this.ctx = context;\n        this.width = canvas.width;\n        this.height = canvas.height;\n        this.assetManager = assetManager;\n        \n        // Initialize starfield\n        this.stars = [];\n        this.initializeStars();\n    }\n\n    private initializeStars(): void {\n        for (let i = 0; i < 200; i++) {\n            this.stars.push({\n                x: Math.random() * this.width,\n                y: Math.random() * this.height,\n                size: Math.random() * 2 + 0.5,\n                speed: Math.random() * 0.5 + 0.1,\n                brightness: Math.random() * 0.8 + 0.2\n            });\n        }\n    }\n\n    private updateStars(): void {\n        this.stars.forEach(star => {\n            star.y += star.speed;\n            if (star.y > this.height) {\n                star.y = 0;\n                star.x = Math.random() * this.width;\n            }\n        });\n    }\n\n    public render(gameState: GameState): void {\n        // Clear canvas\n        this.ctx.fillStyle = '#000';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        \n        // Draw stars\n        this.drawStars();\n        \n        // Show loading message if assets aren't ready\n        if (!this.assetManager.isLoaded()) {\n            this.drawLoadingScreen();\n            return;\n        }\n        \n        // Draw ships\n        this.drawShips(gameState.playerShip, gameState.enemyShip);\n        \n        // Draw projectiles\n        this.drawProjectiles(gameState.weaponSystem.getProjectiles());\n        \n        // Draw miss messages\n        this.drawMissMessages(gameState.weaponSystem.getMissMessages());\n        \n        // Draw ship explosions\n        this.drawShipExplosions(gameState.weaponSystem.getShipExplosions());\n        \n        // Draw game over screen if needed\n        if (gameState.gameOver) {\n            this.drawGameOverScreen(gameState);\n        }\n    }\n\n    private drawLoadingScreen(): void {\n        this.ctx.fillStyle = '#00ff00';\n        this.ctx.font = '24px Courier New';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('Loading Assets...', this.width / 2, this.height / 2);\n        this.ctx.textAlign = 'left';\n    }\n\n    private drawStars(): void {\n        this.ctx.fillStyle = '#ffffff';\n        this.stars.forEach(star => {\n            this.ctx.globalAlpha = star.brightness;\n            this.ctx.fillRect(star.x, star.y, star.size, star.size);\n        });\n        this.ctx.globalAlpha = 1;\n    }\n\n    private drawShips(playerShip: IShip, enemyShip: IShip): void {\n        // Draw player ship (only if alive)\n        if (playerShip.isAlive()) {\n            const playerImage = this.assetManager.getImage('playerShip');\n            if (playerImage && playerImage.complete) {\n                this.drawShipWithTransparency(\n                    playerImage,\n                    playerShip.x - playerShip.width/2,\n                    playerShip.y - playerShip.height/2,\n                    playerShip.width,\n                    playerShip.height,\n                    '#00ffff'\n                );\n            } else {\n                // Fallback rectangle\n                this.ctx.fillStyle = '#00ff00';\n                this.ctx.fillRect(\n                    playerShip.x - playerShip.width/2,\n                    playerShip.y - playerShip.height/2,\n                    playerShip.width,\n                    playerShip.height\n                );\n            }\n        }\n        \n        // Draw enemy ship (only if alive)\n        if (enemyShip.isAlive()) {\n            const enemyImage = this.assetManager.getImage('enemyShip');\n            if (enemyImage && enemyImage.complete) {\n                this.drawShipWithTransparency(\n                    enemyImage,\n                    enemyShip.x - enemyShip.width/2,\n                    enemyShip.y - enemyShip.height/2,\n                    enemyShip.width,\n                    enemyShip.height,\n                    '#ff6600'\n                );\n            } else {\n                // Fallback rectangle\n                this.ctx.fillStyle = '#ff0000';\n                this.ctx.fillRect(\n                    enemyShip.x - enemyShip.width/2,\n                    enemyShip.y - enemyShip.height/2,\n                    enemyShip.width,\n                    enemyShip.height\n                );\n            }\n        }\n    }\n\n    private drawShipWithTransparency(image: HTMLImageElement, x: number, y: number, width: number, height: number, glowColor: string): void {\n        // Use a cached processed image to avoid reprocessing every frame\n        const cacheKey = `${image.src}_${width}_${height}`;\n        \n        if (!this.processedImageCache) {\n            this.processedImageCache = new Map();\n        }\n        \n        let processedCanvas = this.processedImageCache.get(cacheKey);\n        \n        if (!processedCanvas) {\n            // Create and cache the processed image\n            processedCanvas = document.createElement('canvas');\n            const tempCtx = processedCanvas.getContext('2d')!;\n            processedCanvas.width = width;\n            processedCanvas.height = height;\n            \n            // Draw the image to temp canvas\n            tempCtx.drawImage(image, 0, 0, width, height);\n            \n            // Get image data to process transparency\n            const imageData = tempCtx.getImageData(0, 0, width, height);\n            const data = imageData.data;\n            \n            // Remove background (make white/light colors transparent)\n            for (let i = 0; i < data.length; i += 4) {\n                const r = data[i]!;\n                const g = data[i + 1]!;\n                const b = data[i + 2]!;\n                \n                // Check if pixel is close to white/background color\n                const brightness = (r + g + b) / 3;\n                const isBackground = brightness > 200 && \n                                   Math.abs(r - g) < 30 && \n                                   Math.abs(g - b) < 30 && \n                                   Math.abs(r - b) < 30;\n                \n                if (isBackground) {\n                    data[i + 3] = 0; // Make transparent\n                }\n            }\n            \n            // Put the processed data back\n            tempCtx.putImageData(imageData, 0, 0);\n            \n            // Cache the processed canvas\n            this.processedImageCache.set(cacheKey, processedCanvas);\n        }\n        \n        // Draw the cached processed image to main canvas\n        this.ctx.drawImage(processedCanvas, x, y);\n    }\n\n    private drawProjectiles(projectiles: Projectile[]): void {\n        projectiles.forEach(projectile => {\n            if (projectile.type === 'phaser' || projectile.type === 'enemy_phaser') {\n                this.drawPhaserBeam(projectile as PhaserBeam);\n            } else if (projectile.type === 'explosion') {\n                this.drawExplosionParticle(projectile as ExplosionParticle);\n            } else {\n                this.drawTorpedo(projectile as TorpedoProjectile);\n            }\n        });\n    }\n\n    private drawPhaserBeam(beam: PhaserBeam): void {\n        const elapsed = Date.now() - beam.startTime;\n        const alpha = 1 - (elapsed / beam.duration);\n        \n        // Calculate current positions from ship references\n        const isEnemy = beam.shooterShip.isEnemy;\n        const startX = beam.shooterShip.x;\n        const startY = isEnemy ? \n            beam.shooterShip.y + beam.shooterShip.height/2 : \n            beam.shooterShip.y - beam.shooterShip.height/2;\n        const endX = beam.targetShip.x;\n        const endY = beam.targetShip.y;\n        \n        // Choose color based on beam type\n        const color = beam.type === 'enemy_phaser' ? '#00ff00' : '#ff0000';\n        \n        this.ctx.globalAlpha = alpha;\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 4;\n        this.ctx.shadowColor = color;\n        this.ctx.shadowBlur = 10;\n        \n        this.ctx.beginPath();\n        this.ctx.moveTo(startX, startY);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.stroke();\n        \n        this.ctx.shadowBlur = 0;\n        this.ctx.globalAlpha = 1;\n    }\n\n    private drawExplosionParticle(particle: ExplosionParticle): void {\n        const alpha = particle.life / particle.maxLife;\n        this.ctx.globalAlpha = alpha;\n        this.ctx.fillStyle = `hsl(${30 + Math.random() * 30}, 100%, 50%)`;\n        this.ctx.fillRect(particle.x, particle.y, particle.size, particle.size);\n        this.ctx.globalAlpha = 1;\n    }\n\n    private drawTorpedo(projectile: TorpedoProjectile): void {\n        // Draw trail as small circles\n        if (projectile.trail) {\n            projectile.trail.forEach((point, index) => {\n                const alpha = index / projectile.trail.length * 0.5;\n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = projectile.color;\n                \n                this.ctx.beginPath();\n                this.ctx.arc(point.x, point.y, 1.5, 0, Math.PI * 2);\n                this.ctx.fill();\n            });\n            this.ctx.globalAlpha = 1;\n        }\n        \n        // Draw particles for quantum torpedoes\n        if (projectile.particles) {\n            projectile.particles.forEach(particle => {\n                const alpha = particle.life / particle.maxLife;\n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = projectile.color;\n                \n                this.ctx.beginPath();\n                this.ctx.arc(particle.x, particle.y, 1, 0, Math.PI * 2);\n                this.ctx.fill();\n            });\n            this.ctx.globalAlpha = 1;\n        }\n        \n        // Draw main projectile as a circle\n        this.ctx.fillStyle = projectile.color;\n        this.ctx.shadowColor = projectile.color;\n        this.ctx.shadowBlur = 10;\n        \n        const radius = Math.max(projectile.width, projectile.height) / 2;\n        \n        this.ctx.beginPath();\n        this.ctx.arc(projectile.x, projectile.y, radius, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        // Add bright center glow\n        this.ctx.shadowBlur = 5;\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        this.ctx.beginPath();\n        this.ctx.arc(projectile.x, projectile.y, radius * 0.4, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        this.ctx.shadowBlur = 0;\n    }\n\n    private drawMissMessages(missMessages: MissMessage[]): void {\n        missMessages.forEach(message => {\n            const alpha = message.life / message.maxLife;\n            \n            this.ctx.globalAlpha = alpha;\n            this.ctx.fillStyle = message.color;\n            this.ctx.font = `bold ${message.fontSize}px Courier New`;\n            this.ctx.textAlign = 'left';\n            this.ctx.shadowColor = message.color;\n            this.ctx.shadowBlur = 8;\n            \n            this.ctx.fillText(message.text, message.x, message.y);\n            \n            this.ctx.globalAlpha = 1;\n            this.ctx.shadowBlur = 0;\n            this.ctx.textAlign = 'left';\n        });\n    }\n\n    private drawShipExplosions(shipExplosions: ShipExplosion[]): void {\n        shipExplosions.forEach(explosion => {\n            explosion.particles.forEach(particle => {\n                const alpha = particle.life / particle.maxLife;\n                \n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = particle.color || '#000000';\n                this.ctx.shadowColor = particle.color || '#000000';\n                this.ctx.shadowBlur = 8;\n                \n                this.ctx.beginPath();\n                this.ctx.arc(particle.x, particle.y, particle.size || 0, 0, Math.PI * 2);\n                this.ctx.fill();\n                \n                // Add bright center for dramatic effect\n                if (alpha > 0.5) {\n                    this.ctx.fillStyle = '#ffffff';\n                    this.ctx.globalAlpha = alpha * 0.8;\n                    this.ctx.beginPath();\n                    this.ctx.arc(particle.x, particle.y, particle.size || 0 * 0.4, 0, Math.PI * 2);\n                    this.ctx.fill();\n                }\n            });\n        });\n        \n        this.ctx.globalAlpha = 1;\n        this.ctx.shadowBlur = 0;\n    }\n\n    private drawGameOverScreen(gameState: GameState): void {\n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        \n        // Game Over title\n        this.ctx.fillStyle = '#ff0000';\n        this.ctx.font = 'bold 48px Courier New';\n        this.ctx.textAlign = 'center';\n        this.ctx.shadowColor = '#ff0000';\n        this.ctx.shadowBlur = 15;\n        this.ctx.fillText(gameState.gameOverMessage, this.width / 2, this.height / 2 - 40);\n        \n        // Subtitle\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.font = '24px Courier New';\n        this.ctx.shadowColor = '#ffffff';\n        this.ctx.shadowBlur = 8;\n        this.ctx.fillText(`Hull Integrity: ${gameState.playerShip.health}%`, this.width / 2, this.height / 2 + 20);\n        this.ctx.fillText(`Final Level Reached: ${gameState.level}`, this.width / 2, this.height / 2 + 60);\n        \n        // Restart instruction\n        this.ctx.fillStyle = '#00ff00';\n        this.ctx.font = '20px Courier New';\n        this.ctx.shadowColor = '#00ff00';\n        this.ctx.shadowBlur = 10;\n        this.ctx.fillText('Click RESTART to begin new mission', this.width / 2, this.height / 2 + 120);\n        \n        // Reset text styling\n        this.ctx.textAlign = 'left';\n        this.ctx.shadowBlur = 0;\n    }\n\n    // Update animations (call this every frame)\n    public update(): void {\n        this.updateStars();\n    }\n}\n","/**\n * GameUI - Handles UI updates and management\n */\nimport type { IGameUI, WeaponCallbacks, RepairCallbacks, GameCallbacks, GameState, IShip } from './types.js';\n\nexport class GameUI implements IGameUI {\n    public weaponConfigs: Record<string, number>;\n    public weaponCallbacks: WeaponCallbacks = {};\n    public repairCallbacks: RepairCallbacks = {};\n    public gameCallbacks: GameCallbacks = {};\n\n    constructor() {\n        this.weaponConfigs = {\n            photon: 25,\n            phaser: 50,\n            quantum: 50\n        };\n        \n        this.initializeEventListeners();\n    }\n\n    private initializeEventListeners(): void {\n        // These will be set by the main game class\n        this.weaponCallbacks = {};\n        this.repairCallbacks = {};\n        this.gameCallbacks = {};\n    }\n\n    // Set callback functions for weapon firing\n    public setWeaponCallbacks(callbacks: WeaponCallbacks): void {\n        this.weaponCallbacks = callbacks;\n        \n        const photonBtn = document.getElementById('photonBtn');\n        const phaserBtn = document.getElementById('phaserBtn');\n        const quantumBtn = document.getElementById('quantumBtn');\n        \n        photonBtn?.addEventListener('click', () => this.fireWeapon('photon'));\n        phaserBtn?.addEventListener('click', () => this.fireWeapon('phaser'));\n        quantumBtn?.addEventListener('click', () => this.fireWeapon('quantum'));\n    }\n\n    // Set callback functions for repair actions\n    public setRepairCallbacks(callbacks: RepairCallbacks): void {\n        this.repairCallbacks = callbacks;\n        \n        const repairHullBtn = document.getElementById('repairHullBtn');\n        const repairEnergyBtn = document.getElementById('repairEnergyBtn');\n        \n        repairHullBtn?.addEventListener('click', () => this.showMathChallenge('hull'));\n        repairEnergyBtn?.addEventListener('click', () => this.showMathChallenge('energy'));\n    }\n\n    // Set callback functions for game actions\n    public setGameCallbacks(callbacks: GameCallbacks): void {\n        this.gameCallbacks = callbacks;\n        \n        const restartBtn = document.getElementById('restartBtn');\n        const continueBtn = document.getElementById('continueBtn');\n        const startGameBtn = document.getElementById('startGameBtn');\n        \n        restartBtn?.addEventListener('click', () => {\n            this.gameCallbacks.restart?.();\n            this.hideRestartButton();\n        });\n        \n        continueBtn?.addEventListener('click', () => {\n            this.gameCallbacks.continue?.();\n            this.hideContinueButton();\n        });\n        \n        startGameBtn?.addEventListener('click', () => this.gameCallbacks.start?.());\n    }\n\n    private fireWeapon(weaponType: string): void {\n        this.weaponCallbacks.fire?.(weaponType);\n        \n        // Add visual feedback\n        const button = document.getElementById(weaponType + 'Btn');\n        button?.classList.add('firing');\n        setTimeout(() => button?.classList.remove('firing'), 500);\n    }\n\n    private showMathChallenge(repairType: string): void {\n        this.repairCallbacks.show?.(repairType as 'hull' | 'energy');\n    }\n\n    // Update all UI elements\n    public updateUI(gameState: GameState): void {\n        this.updateHealthBars(gameState);\n        this.updateWeaponStatus(gameState.playerShip);\n        this.updateLevelDisplay(gameState.level);\n        this.updateEnemyLabel(gameState.level);\n    }\n\n    private updateHealthBars(gameState: GameState): void {\n        // Update player health bar\n        const hullBar = document.querySelector('.hull-integrity') as HTMLElement;\n        if (hullBar) {\n            hullBar.style.width = gameState.playerShip.health + '%';\n        }\n        \n        // Update player energy bar\n        const energyBar = document.querySelector('.energy-reserves') as HTMLElement;\n        if (energyBar) {\n            const energyPercent = gameState.playerShip.getEnergyPercent();\n            energyBar.style.width = energyPercent + '%';\n        }\n        \n        // Update enemy health bar\n        const enemyHealthBar = document.querySelector('.enemy-health') as HTMLElement;\n        if (enemyHealthBar) {\n            const enemyHealthPercent = gameState.enemyShip.getHealthPercent();\n            enemyHealthBar.style.width = enemyHealthPercent + '%';\n        }\n    }\n\n    private updateWeaponStatus(playerShip: IShip): void {\n        Object.keys(this.weaponConfigs).forEach(weaponType => {\n            const button = document.getElementById(weaponType + 'Btn');\n            const statusElement = button?.querySelector('.weapon-status') as HTMLElement;\n            const energyCost = this.weaponConfigs[weaponType]!;\n            \n            if (playerShip.hasEnergy(energyCost) && statusElement && button) {\n                statusElement.textContent = 'Ready';\n                statusElement.style.color = '#00FF00';\n                statusElement.style.borderColor = '#00FF00';\n                statusElement.style.backgroundColor = 'rgba(0, 255, 0, 0.1)';\n                button.style.opacity = '1';\n                button.style.cursor = 'pointer';\n            } else if (statusElement && button) {\n                statusElement.textContent = 'No Energy';\n                statusElement.style.color = '#FF4444';\n                statusElement.style.borderColor = '#FF4444';\n                statusElement.style.backgroundColor = 'rgba(255, 68, 68, 0.1)';\n                button.style.opacity = '0.6';\n                button.style.cursor = 'not-allowed';\n            }\n        });\n    }\n\n    private updateLevelDisplay(level: number): void {\n        const levelNumber = document.querySelector('.level-number');\n        if (levelNumber) {\n            levelNumber.textContent = level.toString();\n        }\n    }\n\n    private updateEnemyLabel(level: number): void {\n        const enemyLabel = document.querySelector('.enemy-label');\n        if (enemyLabel) {\n            enemyLabel.textContent = `Enemy (Level ${level}):`;\n        }\n    }\n\n    // Screen management\n    public showStartupScreen(): void {\n        const startupScreen = document.getElementById('startupScreen') as HTMLElement;\n        const gameContainer = document.getElementById('gameContainer') as HTMLElement;\n        \n        if (startupScreen) startupScreen.style.display = 'flex';\n        if (gameContainer) gameContainer.style.display = 'none';\n    }\n\n    public showGameScreen(): void {\n        const startupScreen = document.getElementById('startupScreen') as HTMLElement;\n        const gameContainer = document.getElementById('gameContainer') as HTMLElement;\n        \n        if (startupScreen) startupScreen.style.display = 'none';\n        if (gameContainer) gameContainer.style.display = 'flex';\n    }\n\n    // Button visibility management\n    public showRestartButton(): void {\n        const restartContainer = document.getElementById('restartContainer');\n        if (restartContainer) {\n            restartContainer.style.display = 'block';\n        }\n    }\n\n    public hideRestartButton(): void {\n        const restartContainer = document.getElementById('restartContainer');\n        if (restartContainer) {\n            restartContainer.style.display = 'none';\n        }\n    }\n\n    public showContinueButton(): void {\n        const continueContainer = document.getElementById('continueContainer');\n        if (continueContainer) {\n            continueContainer.style.display = 'block';\n        }\n    }\n\n    public hideContinueButton(): void {\n        const continueContainer = document.getElementById('continueContainer');\n        if (continueContainer) {\n            continueContainer.style.display = 'none';\n        }\n    }\n\n    // Panel management\n    private showWeaponsPanel(): void {\n        const weaponsPanel = document.querySelector('.weapons-panel') as HTMLElement;\n        if (weaponsPanel) {\n            weaponsPanel.style.display = 'block';\n        }\n    }\n\n    private hideWeaponsPanel(): void {\n        const weaponsPanel = document.querySelector('.weapons-panel') as HTMLElement;\n        if (weaponsPanel) {\n            weaponsPanel.style.display = 'none';\n        }\n    }\n\n    // Reset UI to initial state\n    public reset(): void {\n        this.hideRestartButton();\n        this.hideContinueButton();\n        this.showWeaponsPanel();\n        this.updateLevelDisplay(1);\n        this.updateEnemyLabel(1);\n        \n        // Reset health bars to full\n        const hullBar = document.querySelector('.hull-integrity') as HTMLElement;\n        const energyBar = document.querySelector('.energy-reserves') as HTMLElement;\n        const enemyHealthBar = document.querySelector('.enemy-health') as HTMLElement;\n        \n        if (hullBar) hullBar.style.width = '100%';\n        if (energyBar) energyBar.style.width = '100%';\n        if (enemyHealthBar) enemyHealthBar.style.width = '100%';\n    }\n\n    // Show loading state\n    private showLoading(): void {\n        // This could be enhanced with a loading overlay\n        console.log('Loading game assets...');\n    }\n\n    private hideLoading(): void {\n        console.log('Assets loaded, game ready!');\n    }\n}\n","import { MathChallenge } from './MathChallenge.js';\nimport { AssetManager } from './AssetManager.js';\nimport { createPlayerShip, createEnemyShip } from './Ship.js';\nimport { WeaponSystem } from './WeaponSystem.js';\nimport { CollisionManager } from './CollisionManager.js';\nimport { ParticleSystem } from './ParticleSystem.js';\nimport { EnemyAI } from './EnemyAI.js';\nimport { GameStateManager } from './GameStateManager.js';\nimport { GameRenderer } from './GameRenderer.js';\nimport { GameUI } from './GameUI.js';\nimport type { IShip, IAssetManager, IWeaponSystem, ICollisionManager, IParticleSystem, IEnemyAI, IGameStateManager, IGameRenderer, IGameUI, IMathChallenge } from './types.js';\n\nclass StarTrekGame {\n    // Canvas properties\n    private canvas: HTMLCanvasElement;\n    private width: number;\n    private height: number;\n    \n    // Game modules\n    private assetManager: IAssetManager;\n    private collisionManager: ICollisionManager;\n    private particleSystem: IParticleSystem;\n    private enemyAI: IEnemyAI;\n    private gameStateManager: IGameStateManager;\n    private mathChallenge: IMathChallenge;\n    private weaponSystem: IWeaponSystem;\n    private renderer: IGameRenderer;\n    private ui: IGameUI;\n    \n    // Ships\n    private playerShip!: IShip;\n    private enemyShip!: IShip;\n    constructor() {\n        const canvasElement = document.getElementById('gameCanvas') as HTMLCanvasElement;\n        if (!canvasElement) {\n            throw new Error('Game canvas element not found');\n        }\n        this.canvas = canvasElement;\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        \n        // Initialize modules\n        this.assetManager = new AssetManager();\n        this.collisionManager = new CollisionManager();\n        this.particleSystem = new ParticleSystem(this.assetManager);\n        this.mathChallenge = new MathChallenge();\n        this.weaponSystem = new WeaponSystem(this.assetManager, this.collisionManager, this.particleSystem);\n        this.enemyAI = new EnemyAI(this.weaponSystem);\n        this.gameStateManager = new GameStateManager();\n        this.renderer = new GameRenderer(this.canvas, this.assetManager);\n        this.ui = new GameUI();\n        \n        // Initialize game\n        this.initializeShips();\n        this.initializeControls();\n        \n        // Start render loop\n        this.renderLoop();\n    }\n    \n\n    \n    private initializeShips(): void {\n        // Create ships using factory functions\n        this.playerShip = createPlayerShip(this.width, this.height);\n        this.enemyShip = createEnemyShip(this.width, this.height, this.gameStateManager.getLevel());\n    }\n    \n    private initializeControls(): void {\n        // Set up UI callbacks\n        this.ui.setWeaponCallbacks({\n            fire: (weaponType) => this.fireWeapon(weaponType)\n        });\n        \n        this.ui.setRepairCallbacks({\n            show: (repairType) => this.showMathChallenge(repairType)\n        });\n        \n        this.ui.setGameCallbacks({\n            start: () => this.startGame(),\n            restart: () => this.restartGame(),\n            continue: () => this.continueToNextLevel()\n        });\n    }\n    \n    private startGame(): void {\n        // Show game screen\n        this.ui.showGameScreen();\n        \n        // Start the game\n        this.gameStateManager.startGame();\n    }\n    \n\n    \n    private showMathChallenge(repairType: 'hull' | 'energy'): void {\n        // Don't show if game not active or panel already open\n        if (!this.gameStateManager.isGameActive() || this.mathChallenge.isPanelOpen()) {\n            return;\n        }\n        \n        // Pause the game\n        this.gameStateManager.pauseGame();\n        \n        // Show math challenge with callbacks\n        this.mathChallenge.showChallenge(\n            repairType,\n            (type) => this.applyRepair(type),      // onSuccess\n            (type) => this.applyPenalty(type),     // onFailure\n            () => this.closeMathPanel()            // onCancel\n        );\n    }\n    \n\n    \n    private applyRepair(repairType: 'hull' | 'energy'): void {\n        if (repairType === 'hull') {\n            this.playerShip.repairHull();\n        } else if (repairType === 'energy') {\n            this.playerShip.rechargeEnergy();\n        }\n    }\n    \n    private applyPenalty(repairType: 'hull' | 'energy'): void {\n        if (repairType === 'hull') {\n            const wasDestroyed = this.playerShip.takeDamage(1);\n            \n            // Check if player is defeated due to penalty\n            if (wasDestroyed) {\n                this.gameStateManager.endGame('MISSION FAILED');\n                this.ui.showRestartButton();\n                this.mathChallenge.closePanel();\n                console.log('Game Over due to penalty!');\n            }\n        } else if (repairType === 'energy') {\n            this.playerShip.consumeEnergy(1);\n            console.log(`Penalty applied to energy! Energy: ${this.playerShip.energy}`);\n        }\n    }\n    \n    private closeMathPanel(): void {\n        // Resume game\n        this.gameStateManager.resumeGame();\n        \n        console.log('Math challenge closed, game resumed');\n    }\n\n    private fireWeapon(weaponType: string): void {\n        // Don't allow firing if game is not active or level is completed\n        if (!this.gameStateManager.isGameActive() || this.gameStateManager.isLevelCompleted()) {\n            return;\n        }\n        \n        // Fire weapon using weapon system\n        this.weaponSystem.fireWeapon(weaponType, this.playerShip, this.enemyShip);\n    }\n    \n\n    \n\n    \n\n    \n\n    \n    private updateShips(): void {\n        // Don't update ship positions if game is not active\n        if (!this.gameStateManager.isGameActive()) {\n            return;\n        }\n        \n        // Update ship movements\n        this.playerShip.update();\n        this.enemyShip.update();\n    }\n    \n    private updateProjectiles(): void {\n        // Don't update projectiles if game is not active\n        if (!this.gameStateManager.isGameActive()) {\n            return;\n        }\n        \n        // Update enemy AI (only if level not completed)\n        const gameActive = !this.gameStateManager.isLevelCompleted();\n        this.enemyAI.update(this.enemyShip, this.playerShip, gameActive);\n        \n        // Check if player was destroyed by enemy fire\n        if (this.gameStateManager.checkDefeatCondition(this.playerShip)) {\n            setTimeout(() => {\n                this.ui.showRestartButton();\n            }, 1000);\n        }\n        \n        // Update weapon system\n        this.weaponSystem.update(this.playerShip, this.enemyShip);\n        \n        // Check for victory condition after projectiles are updated\n        if (this.gameStateManager.checkVictoryCondition(this.enemyShip)) {\n            // Show continue button after a brief delay for explosion\n            setTimeout(() => {\n                this.ui.showContinueButton();\n            }, 1000);\n        }\n    }\n    \n\n    \n    private render(): void {\n        const currentState = this.gameStateManager.getCurrentState();\n        \n        // Create game state object for renderer\n        const gameState = {\n            level: currentState.level,\n            gameOver: currentState.gameOver,\n            gameOverMessage: currentState.gameOverMessage,\n            playerShip: this.playerShip,\n            enemyShip: this.enemyShip,\n            weaponSystem: this.weaponSystem\n        };\n        \n        // Render using the GameRenderer\n        this.renderer.render(gameState);\n        \n        // Update UI\n        this.ui.updateUI(gameState);\n    }\n    \n\n    \n    private continueToNextLevel(): void {\n        // Use GameStateManager to advance to next level\n        this.gameStateManager.advanceToNextLevel(\n            this.playerShip, \n            this.enemyShip, \n            this.enemyAI,\n            this.width,\n            this.height\n        );\n        \n        // Clear weapon system\n        this.weaponSystem.clear();\n    }\n    \n    private restartGame(): void {\n        // Close math panel if open\n        if (this.mathChallenge.isPanelOpen()) {\n            this.mathChallenge.closePanel();\n        }\n        \n        // Use GameStateManager to restart game\n        this.gameStateManager.restartGame(\n            this.playerShip,\n            this.enemyShip,\n            this.enemyAI,\n            this.width,\n            this.height\n        );\n        \n        // Show startup screen\n        this.ui.showStartupScreen();\n        \n        // Clear weapon system\n        this.weaponSystem.clear();\n        \n        // Reset UI\n        this.ui.reset();\n    }\n    \n    private renderLoop(): void {\n        // Always update renderer animations\n        this.renderer.update();\n        \n        // Only update game logic if game is active\n        if (this.gameStateManager.isGameActive()) {\n            this.updateShips();\n            this.updateProjectiles();\n        }\n        \n        // Always render\n        this.render();\n        \n        requestAnimationFrame(() => this.renderLoop());\n    }\n}\n\n// Initialize game when page loads\nwindow.addEventListener('load', () => {\n    new StarTrekGame();\n});\n"],"names":["MathChallenge","constructor","this","currentChallenge","panelOpen","initializeEventListeners","cancelBtn","document","getElementById","optionA","optionB","optionC","optionD","addEventListener","closePanel","selectOption","event","key","showChallenge","repairType","onSuccess","onFailure","onCancel","num1","Math","floor","random","num2","correctAnswer","options","generateOptions","correctOptionLetter","correctLetter","updatePanelContent","showPanel","console","log","A","B","C","D","wrongAnswers","length","wrongAnswer","includes","push","allOptions","i","j","find","letter","Error","questionElement","descriptionElement","feedbackElement","textContent","className","optionAElement","_a","querySelector","optionBElement","_b","optionCElement","_c","optionDElement","_d","String","forEach","id","btn","classList","remove","selectedLetter","selectedBtn","add","correctBtn","setTimeout","weaponsPanel","mathPanel","style","display","isPanelOpen","getCurrentChallenge","AssetManager","images","sounds","loadingComplete","loadPromises","initializeAssets","baseUrl","playerShip","loadImage","enemyShip","photon","loadSound","phaser","quantum","romulanDisruptor","romulanTorpedo","explosion1","explosion2","waitForAssets","then","catch","error","src","img","Image","loadPromise","Promise","resolve","reject","onload","onerror","e","audio","Audio","volume","load","checkAssetsLoaded","allImagesLoaded","Object","values","every","complete","all","getImage","name","getSound","playSound","sound","currentTime","play","playWeaponSound","weaponType","toUpperCase","playEnemyWeaponSound","soundKey","torpedo","playExplosionSound","explosionSounds","randomSound","isLoaded","getAssets","Ship","config","x","y","width","height","health","maxHealth","energy","maxEnergy","velocityX","direction","minX","maxX","isPlayer","isEnemy","update","takeDamage","damage","max","repairHull","amount","min","rechargeEnergy","consumeEnergy","hasEnergy","getBounds","left","right","top","bottom","contains","bounds","reset","levelUp","level","getHealthPercent","getEnergyPercent","isDestroyed","isAlive","WeaponSystem","assetManager","collisionManager","particleSystem","projectiles","missMessages","weaponConfigs","energyCost","color","speed","arcHeight","duration","instant","hasParticles","fireWeapon","shooterShip","targetShip","createPhaserBeam","createShipExplosion","projectile","createProjectile","fireEnemyWeapon","weaponTypes","beam","startTime","Date","now","type","startX","startY","targetX","targetY","progress","arcDirection","trail","useCircularArc","isEnemyProjectile","particles","updateProjectiles","updateMissMessages","filter","phaserBeam","explosionParticle","vx","vy","life","torpedoProjectile","updateProjectileArc","maxTrailLength","shift","updateQuantumParticles","checkCollisions","checkProjectileMiss","createMissMessage","prevX","prevY","t","cached","deltaX","deltaY","distance","sqrt","perpX","perpY","baseX","baseY","arcOffset","sin","PI","dx","dy","rotation","atan2","collisionResult","checkProjectileCollision","hit","impactPoint","createExplosion","wasDestroyed","messageX","messageY","text","maxLife","fontSize","message","clear","getProjectiles","getExplosionParticles","getMissMessages","getShipExplosions","CollisionManager","checkShipCollision","ship1","ship2","bounds1","bounds2","checkPointInShip","ship","ParticleSystem","explosionParticles","shipExplosions","newParticles","size","explosionData","particle","wave","updateExplosionParticles","updateShipExplosions","explosion","EnemyAI","weaponSystem","lastShotTime","baseShootInterval","shootInterval","gameActive","fireAtPlayer","setLevel","getShootInterval","getLevel","forceShot","setDifficulty","difficulty","GameStateManager","gameOver","gameOverMessage","levelCompleted","gameStarted","gamePaused","callbacks","onStateChange","callback","notifyStateChange","state","getCurrentState","startGame","pauseGame","resumeGame","endGame","completeLevel","advanceToNextLevel","enemyAI","canvasWidth","canvasHeight","restartGame","checkVictoryCondition","checkDefeatCondition","canUpdate","canUpdateProjectiles","isGameActive","isLevelCompleted","isGameOver","isGameStarted","isGamePaused","GameRenderer","canvas","context","getContext","ctx","stars","initializeStars","brightness","updateStars","star","render","gameState","fillStyle","fillRect","drawStars","drawShips","drawProjectiles","drawMissMessages","drawShipExplosions","drawGameOverScreen","drawLoadingScreen","font","textAlign","fillText","globalAlpha","playerImage","drawShipWithTransparency","enemyImage","image","glowColor","cacheKey","processedImageCache","Map","processedCanvas","get","createElement","tempCtx","drawImage","imageData","getImageData","data","r","g","b","abs","putImageData","set","drawPhaserBeam","drawExplosionParticle","drawTorpedo","alpha","endX","endY","strokeStyle","lineWidth","shadowColor","shadowBlur","beginPath","moveTo","lineTo","stroke","point","index","arc","fill","radius","GameUI","weaponCallbacks","repairCallbacks","gameCallbacks","setWeaponCallbacks","photonBtn","phaserBtn","quantumBtn","setRepairCallbacks","repairHullBtn","repairEnergyBtn","showMathChallenge","setGameCallbacks","restartBtn","continueBtn","startGameBtn","restart","call","hideRestartButton","continue","hideContinueButton","start","fire","button","show","updateUI","updateHealthBars","updateWeaponStatus","updateLevelDisplay","updateEnemyLabel","hullBar","energyBar","energyPercent","enemyHealthBar","enemyHealthPercent","keys","statusElement","borderColor","backgroundColor","opacity","cursor","levelNumber","toString","enemyLabel","showStartupScreen","startupScreen","gameContainer","showGameScreen","showRestartButton","restartContainer","showContinueButton","continueContainer","showWeaponsPanel","hideWeaponsPanel","showLoading","hideLoading","StarTrekGame","canvasElement","mathChallenge","gameStateManager","renderer","ui","initializeShips","initializeControls","renderLoop","_canvasHeight","createEnemyShip","continueToNextLevel","applyRepair","applyPenalty","closeMathPanel","updateShips","currentState","requestAnimationFrame","window"],"mappings":"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"}