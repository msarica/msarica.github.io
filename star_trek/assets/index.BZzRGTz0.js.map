{"version":3,"file":"index.BZzRGTz0.js","sources":["../../src/MathChallenge.ts","../../src/AssetManager.ts","../../src/Ship.ts","../../src/WeaponSystem.ts","../../src/CollisionManager.ts","../../src/ParticleSystem.ts","../../src/EnemyAI.ts","../../src/GameStateManager.ts","../../src/GameRenderer.ts","../../src/GameUI.ts","../../src/Router.ts","../../src/GameSettings.ts","../../src/ModalService.ts","../../src/UIComponent.ts","../../src/pages/SettingsPage.ts","../../src/pages/AboutPage.ts","../../src/HexagonalMap.ts","../../src/pages/MapPage.ts","../../src/pages/ShipSelectionPage.ts","../../src/pages/WeaponSelectionPage.ts","../../src/game.ts"],"sourcesContent":["/**\n * MathChallenge - Handles math problem generation and repair system\n */\nimport type { MathChallenge as MathChallengeType, MathOptions } from './types.js';\nimport { AssetManager } from './AssetManager.js';\n\nexport class MathChallenge {\n    public currentChallenge: MathChallengeType | null;\n    public panelOpen: boolean;\n    private assetManager: AssetManager;\n\n    constructor(assetManager: AssetManager) {\n        this.currentChallenge = null;\n        this.panelOpen = false;\n        this.assetManager = assetManager;\n        this.initializeEventListeners();\n    }\n\n    private initializeEventListeners(): void {\n        const cancelBtn = document.getElementById('cancelMathBtn');\n        const optionA = document.getElementById('optionA');\n        const optionB = document.getElementById('optionB');\n        const optionC = document.getElementById('optionC');\n        const optionD = document.getElementById('optionD');\n\n        cancelBtn?.addEventListener('click', () => {\n            this.assetManager.playUIClickSound();\n            this.closePanel();\n        });\n\n        // Add event listeners for multiple choice options\n        optionA?.addEventListener('click', () => {\n            this.assetManager.playUIClickSound();\n            this.selectOption('A');\n        });\n        optionB?.addEventListener('click', () => {\n            this.assetManager.playUIClickSound();\n            this.selectOption('B');\n        });\n        optionC?.addEventListener('click', () => {\n            this.assetManager.playUIClickSound();\n            this.selectOption('C');\n        });\n        optionD?.addEventListener('click', () => {\n            this.assetManager.playUIClickSound();\n            this.selectOption('D');\n        });\n\n        // Allow Escape key to cancel\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && this.panelOpen) {\n                this.closePanel();\n            }\n        });\n    }\n\n    public showChallenge(\n        repairType: 'hull' | 'energy',\n        onSuccess: (type: 'hull' | 'energy') => void,\n        onFailure: (type: 'hull' | 'energy') => void,\n        onCancel: () => void\n    ): boolean {\n        // Don't show if panel already open\n        if (this.panelOpen) {\n            return false;\n        }\n\n        this.panelOpen = true;\n\n        // Generate random multiplication question\n        const num1 = Math.floor(Math.random() * 9) + 2; // 2-10\n        const num2 = Math.floor(Math.random() * 9) + 2; // 2-10\n        const correctAnswer = num1 * num2;\n\n        // Generate multiple choice options\n        const options = this.generateOptions(correctAnswer);\n\n        this.currentChallenge = {\n            num1,\n            num2,\n            correctAnswer,\n            repairType,\n            options,\n            correctOptionLetter: (options as any).correctLetter,\n            onSuccess,\n            onFailure,\n            onCancel\n        };\n\n        this.updatePanelContent();\n        this.showPanel();\n\n        console.log(`Math challenge: ${num1} × ${num2} = ${correctAnswer} (for ${repairType})`);\n        console.log(`Options: A=${options.A}, B=${options.B}, C=${options.C}, D=${options.D}, Correct=${options.correctLetter}`);\n\n        return true;\n    }\n\n    private generateOptions(correctAnswer: number): MathOptions {\n        // Generate 3 wrong answers\n        const wrongAnswers: number[] = [];\n\n        // Create wrong answers by adding/subtracting small amounts and multiplying by close factors\n        while (wrongAnswers.length < 3) {\n            let wrongAnswer: number;\n            const method = Math.floor(Math.random() * 4);\n\n            switch (method) {\n                case 0: // Add a small amount\n                    wrongAnswer = correctAnswer + Math.floor(Math.random() * 10) + 1;\n                    break;\n                case 1: // Subtract a small amount\n                    wrongAnswer = correctAnswer - Math.floor(Math.random() * 10) - 1;\n                    break;\n                case 2: // Multiply by a close factor\n                    wrongAnswer = Math.floor(correctAnswer * (0.8 + Math.random() * 0.4));\n                    break;\n                case 3: // Use a common mistake (like one number * 10)\n                    wrongAnswer = Math.floor(correctAnswer / 10) * 10 + Math.floor(Math.random() * 10);\n                    break;\n                default:\n                    wrongAnswer = correctAnswer + 1;\n                    break;\n            }\n\n            // Make sure it's positive and different from correct answer and other wrong answers\n            if (wrongAnswer > 0 && wrongAnswer !== correctAnswer && !wrongAnswers.includes(wrongAnswer)) {\n                wrongAnswers.push(wrongAnswer);\n            }\n        }\n\n        // Create array of all options\n        const allOptions = [correctAnswer, ...wrongAnswers];\n\n        // Shuffle the options\n        for (let i = allOptions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [allOptions[i], allOptions[j]] = [allOptions[j]!, allOptions[i]!];\n        }\n\n        // Assign to letters (we know array has exactly 4 elements)\n        const options = {\n            A: allOptions[0]!,\n            B: allOptions[1]!,\n            C: allOptions[2]!,\n            D: allOptions[3]!\n        };\n\n        // Find which letter has the correct answer\n        const letters: ('A' | 'B' | 'C' | 'D')[] = ['A', 'B', 'C', 'D'];\n        const correctLetter = letters.find(letter => options[letter] === correctAnswer);\n        if (!correctLetter) {\n            throw new Error('Could not find correct answer in options');\n        }\n        (options as any).correctLetter = correctLetter;\n\n        return options;\n    }\n\n    private updatePanelContent(): void {\n        if (!this.currentChallenge) return;\n\n        const { num1, num2, repairType, options } = this.currentChallenge;\n\n        // Update panel content\n        const questionElement = document.getElementById('mathQuestion');\n        const descriptionElement = document.getElementById('mathDescription');\n        const feedbackElement = document.getElementById('mathFeedback');\n\n        if (questionElement) questionElement.textContent = `${num1} × ${num2} = ?`;\n        if (descriptionElement) descriptionElement.textContent = `Complete this calculation to repair your ${repairType === 'hull' ? 'hull integrity' : 'energy reserves'}`;\n        if (feedbackElement) {\n            feedbackElement.textContent = '';\n            feedbackElement.className = 'math-feedback';\n        }\n\n        // Update option buttons\n        const optionAElement = document.getElementById('optionA')?.querySelector('.option-value');\n        const optionBElement = document.getElementById('optionB')?.querySelector('.option-value');\n        const optionCElement = document.getElementById('optionC')?.querySelector('.option-value');\n        const optionDElement = document.getElementById('optionD')?.querySelector('.option-value');\n\n        if (optionAElement) optionAElement.textContent = String(options.A);\n        if (optionBElement) optionBElement.textContent = String(options.B);\n        if (optionCElement) optionCElement.textContent = String(options.C);\n        if (optionDElement) optionDElement.textContent = String(options.D);\n\n        // Reset option button styles\n        ['optionA', 'optionB', 'optionC', 'optionD'].forEach(id => {\n            const btn = document.getElementById(id);\n            btn?.classList.remove('correct', 'incorrect');\n        });\n    }\n\n    private selectOption(selectedLetter: 'A' | 'B' | 'C' | 'D'): void {\n        if (!this.currentChallenge) return;\n\n        const feedbackElement = document.getElementById('mathFeedback');\n        const selectedBtn = document.getElementById(`option${selectedLetter}`);\n\n        // Reset all button styles first\n        ['optionA', 'optionB', 'optionC', 'optionD'].forEach(id => {\n            const btn = document.getElementById(id);\n            btn?.classList.remove('correct', 'incorrect');\n        });\n\n        if (selectedLetter === this.currentChallenge.correctOptionLetter) {\n            // Correct answer!\n            selectedBtn?.classList.add('correct');\n            if (feedbackElement) {\n                feedbackElement.textContent = 'CORRECT! Repair applied.';\n                feedbackElement.className = 'math-feedback success';\n            }\n\n            // Call success callback and close immediately\n            if (this.currentChallenge.onSuccess) {\n                this.currentChallenge.onSuccess(this.currentChallenge.repairType);\n            }\n            this.closePanel();\n        } else {\n            // Wrong answer - apply penalty\n            selectedBtn?.classList.add('incorrect');\n            if (feedbackElement) {\n                feedbackElement.textContent = 'INCORRECT! Penalty applied. Try again.';\n                feedbackElement.className = 'math-feedback error';\n            }\n\n            // Call failure callback\n            if (this.currentChallenge.onFailure) {\n                this.currentChallenge.onFailure(this.currentChallenge.repairType);\n            }\n\n            // Show correct answer briefly\n            const correctBtn = document.getElementById(`option${this.currentChallenge.correctOptionLetter}`);\n            correctBtn?.classList.add('correct');\n\n            // Reset after 2 seconds\n            setTimeout(() => {\n                selectedBtn?.classList.remove('incorrect');\n                correctBtn?.classList.remove('correct');\n                if (feedbackElement) {\n                    feedbackElement.textContent = '';\n                    feedbackElement.className = 'math-feedback';\n                }\n            }, 2000);\n        }\n    }\n\n    private showPanel(): void {\n        // Hide weapons panel and show math challenge panel\n        const weaponsPanel = document.querySelector('.weapons-panel') as HTMLElement;\n        const mathPanel = document.getElementById('mathChallengePanel');\n        if (weaponsPanel) weaponsPanel.style.display = 'none';\n        if (mathPanel) mathPanel.style.display = 'block';\n    }\n\n    public closePanel(): void {\n        // Hide math challenge panel and show weapons panel\n        const mathPanel = document.getElementById('mathChallengePanel');\n        const weaponsPanel = document.querySelector('.weapons-panel') as HTMLElement;\n        if (mathPanel) mathPanel.style.display = 'none';\n        if (weaponsPanel) weaponsPanel.style.display = 'block';\n\n        // Call cancel callback if provided\n        if (this.currentChallenge && this.currentChallenge.onCancel) {\n            this.currentChallenge.onCancel();\n        }\n\n        // Reset state\n        this.panelOpen = false;\n        this.currentChallenge = null;\n\n        console.log('Math challenge closed');\n    }\n\n    public isPanelOpen(): boolean {\n        return this.panelOpen;\n    }\n\n    public getCurrentChallenge(): MathChallengeType | null {\n        return this.currentChallenge;\n    }\n}\n","/**\n * AssetManager - Handles loading and managing game assets (images and sounds)\n */\nimport type { GameSettingsManager } from './GameSettings.js';\n\nexport class AssetManager {\n    public images: Record<string, HTMLImageElement>;\n    public sounds: Record<string, HTMLAudioElement>;\n    public loadingComplete: boolean;\n    public loadPromises: Promise<any>[];\n    public gameSettings: GameSettingsManager;\n\n    constructor(gameSettings: GameSettingsManager) {\n        this.images = {};\n        this.sounds = {};\n        this.loadingComplete = false;\n        this.loadPromises = [];\n        this.gameSettings = gameSettings;\n\n        this.initializeAssets();\n    }\n\n    public initializeAssets(): void {\n        // Get the base URL from Vite (will be / in dev, /star_trek/ in production)\n        const baseUrl = import.meta.env.BASE_URL;\n\n        // Load ship images dynamically\n        this.loadShipImages(baseUrl);\n\n        // Load weapon sounds dynamically\n        this.loadWeaponSounds(baseUrl);\n\n        // Load explosion sounds dynamically\n        this.loadExplosionSounds(baseUrl);\n\n        // Load UI sounds\n        this.loadUISounds(baseUrl);\n\n        // Use promise-based loading instead of polling\n        this.waitForAssets().then(() => {\n            this.loadingComplete = true;\n            console.log('All assets loaded successfully!');\n        }).catch(error => {\n            console.error('Error loading assets:', error);\n        });\n    }\n\n    private loadShipImages(baseUrl: string): void {\n        // Load all available ship images\n        const ships = this.gameSettings.getAllShips();\n        ships.forEach(ship => {\n            if (ship.image) {\n                this.images[ship.id] = this.loadImage(`${baseUrl}assets/images/${ship.image}`);\n                this.images[ship.image] = this.images[ship.id]!;\n            }\n        });\n    }\n\n    private loadWeaponSounds(baseUrl: string): void {\n        const weapons = this.gameSettings.getAllWeapons();\n        const uniqueSounds = new Set<string>();\n\n        // Collect all unique sound files from all weapons\n        weapons.forEach(weapon => {\n            if (weapon.soundFile) {\n                uniqueSounds.add(weapon.soundFile);\n            }\n        });\n\n        // Load each unique sound file\n        uniqueSounds.forEach(soundFile => {\n            const soundKey = soundFile.replace('.mp3', '');\n            this.sounds[soundKey] = this.loadSound(`${baseUrl}assets/sounds/${soundFile}`);\n        });\n    }\n\n    private loadExplosionSounds(baseUrl: string): void {\n        const explosionSounds = this.gameSettings.getExplosionSounds();\n        explosionSounds.forEach(explosion => {\n            this.sounds[explosion.id] = this.loadSound(`${baseUrl}assets/sounds/${explosion.soundFile}`);\n        });\n    }\n\n    private loadUISounds(baseUrl: string): void {\n        // Load UI click sound\n        this.sounds['computerbeep'] = this.loadSound(`${baseUrl}assets/sounds/computerbeep_9.mp3`);\n    }\n\n    public loadImage(src: string): HTMLImageElement {\n        const img = new Image();\n\n        const loadPromise = new Promise((resolve, reject) => {\n            img.onload = () => resolve(img);\n            img.onerror = (e) => {\n                console.error(`Image load error for ${src}:`, e);\n                reject(e);\n            };\n        });\n\n        this.loadPromises.push(loadPromise);\n        img.src = src;\n        return img;\n    }\n\n    public loadSound(src: string): HTMLAudioElement {\n        const audio = new Audio(src);\n        audio.volume = 0.3; // 30% volume to avoid being too loud\n\n        const loadPromise = new Promise((resolve, reject) => {\n            audio.addEventListener('canplaythrough', () => resolve(audio));\n            audio.addEventListener('error', (e) => {\n                console.error(`Sound load error for ${src}:`, e);\n                reject(e);\n            });\n        });\n\n        this.loadPromises.push(loadPromise);\n        audio.load(); // Start loading\n        return audio;\n    }\n\n    public checkAssetsLoaded(): boolean {\n        const allImagesLoaded = Object.values(this.images).every(img => img.complete);\n\n        if (allImagesLoaded && !this.loadingComplete) {\n            this.loadingComplete = true;\n            console.log('All assets loaded successfully!');\n            return true;\n        } else if (!allImagesLoaded) {\n            // Check again in 100ms\n            setTimeout(() => this.checkAssetsLoaded(), 100);\n            return false;\n        }\n\n        return this.loadingComplete;\n    }\n\n    // Promise-based asset loading\n    public async waitForAssets(): Promise<boolean> {\n        try {\n            await Promise.all(this.loadPromises);\n            this.loadingComplete = true;\n            console.log('All assets loaded via promises!');\n            return true;\n        } catch (error) {\n            console.error('Error loading assets:', error);\n            return false;\n        }\n    }\n\n    public getImage(name: string): HTMLImageElement | undefined {\n        return this.images[name];\n    }\n\n    public getSound(name: string): HTMLAudioElement | undefined {\n        return this.sounds[name];\n    }\n\n    public playSound(name: string): void {\n        const sound = this.sounds[name];\n        if (sound) {\n            sound.currentTime = 0; // Reset to beginning\n            sound.play().catch(error => {\n                console.error(`Sound play failed for ${name}:`, error);\n            });\n        } else {\n            console.error(`Sound not found: ${name}`);\n        }\n    }\n\n    public playWeaponSound(weaponType: string): void {\n        const soundFile = this.gameSettings.getWeaponSoundFile(weaponType);\n        if (soundFile) {\n            const soundKey = soundFile.replace('.mp3', '');\n            this.playSound(soundKey);\n        } else {\n            console.error(`Sound file not found for weapon type: ${weaponType}`);\n        }\n    }\n\n\n    public playExplosionSound(): void {\n        // Randomly select between available explosion sounds\n        const explosionSounds = this.gameSettings.getExplosionSounds();\n        if (explosionSounds.length > 0) {\n            const randomSound = explosionSounds[Math.floor(Math.random() * explosionSounds.length)]!;\n            this.playSound(randomSound.id);\n        } else {\n            console.error('No explosion sounds available');\n        }\n    }\n\n    public playUIClickSound(): void {\n        this.playSound('computerbeep');\n    }\n\n    public isLoaded(): boolean {\n        return this.loadingComplete;\n    }\n\n    // Get all assets for backwards compatibility\n    public getAssets(): { images: Record<string, HTMLImageElement>; sounds: Record<string, HTMLAudioElement> } {\n        return {\n            images: this.images,\n            sounds: this.sounds\n        };\n    }\n}\n","/**\n * Ship - Represents player and enemy ships with their properties and behaviors\n */\nimport { ShipType, WeaponType } from './GameSettings.js';\nimport type { ShipConfig, ShipBounds, ShipData, ShipWeapon } from './types.js';\n\nexport class Ship {\n    // Ship properties\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public health: number;\n    public maxHealth: number;\n    public energy: number;\n    public maxEnergy: number;\n    public velocityX: number;\n    public direction: number;\n    public minX: number;\n    public maxX: number;\n    public isPlayer: boolean;\n    public isEnemy: boolean;\n    public image: string;\n    public shipData: ShipData;\n\n    constructor(public config: ShipConfig) {\n        // Store ship data\n        this.shipData = config.shipData;\n\n        // Position and size\n        this.x = config.x ?? 0;\n        this.y = config.y ?? 0;\n        this.width = config.width;\n        this.height = config.height;\n\n        // Health and energy (use ship data values as defaults)\n        this.health = config.health || this.shipData.maxHealth;\n        this.maxHealth = config.maxHealth || this.shipData.maxHealth;\n        this.energy = config.energy || this.shipData.maxEnergy;\n        this.maxEnergy = config.maxEnergy || this.shipData.maxEnergy;\n\n        // Movement properties\n        this.velocityX = config.velocityX || 0.8;\n        this.direction = config.direction || 1; // 1 for right, -1 for left\n        this.minX = config.minX || 60;\n        this.maxX = config.maxX || 740;\n\n        // Ship type\n        this.isPlayer = config.isPlayer || false;\n        this.isEnemy = config.isEnemy || false;\n\n        // Ship image\n        this.image = this.shipData.image;\n    }\n\n    // Update ship position and handle boundary collisions\n    public update(): void {\n        // Update position\n        this.x += this.velocityX * this.direction;\n\n        // Bounce off boundaries (both player and enemy ships)\n        if (this.x <= this.minX) {\n            this.x = this.minX;\n            this.direction = 1; // Change direction to right\n        } else if (this.x >= this.maxX) {\n            this.x = this.maxX;\n            this.direction = -1; // Change direction to left\n        }\n    }\n\n    // Take damage\n    public takeDamage(damage: number): boolean {\n        this.health -= damage;\n        this.health = Math.max(0, this.health);\n\n        console.log(`${this.isPlayer ? 'Player' : 'Enemy'} took ${damage} damage! Health: ${this.health}`);\n\n        return this.health <= 0; // Return true if destroyed\n    }\n\n    // Repair hull (used by math challenge system)\n    public repairHull(amount: number = 100): void {\n        this.health = Math.min(this.maxHealth, this.health + amount);\n        console.log(`Hull repaired! Health: ${this.health}`);\n    }\n\n    // Recharge energy (used by math challenge system)\n    public rechargeEnergy(amount: number = 100): void {\n        if (this.isPlayer) {\n            this.energy = Math.min(this.maxEnergy, this.energy + amount);\n            console.log(`Energy recharged! Energy: ${this.energy}`);\n        }\n    }\n\n    // Consume energy (for weapons)\n    public consumeEnergy(amount: number): boolean {\n        if (this.isPlayer) {\n            this.energy -= amount;\n            this.energy = Math.max(0, this.energy);\n            return this.energy >= 0;\n        }\n        return true; // Enemy ships don't use energy system\n    }\n\n    // // Check if ship has enough energy for an action\n    // public hasEnergy(amount: number): boolean {\n    //     if (this.isPlayer) {\n    //         return this.energy >= amount;\n    //     }\n    //     return true; // Enemy ships don't use energy system\n    // }\n\n    // Get collision bounds\n    public getBounds(): ShipBounds {\n        return {\n            left: this.x - this.width / 2,\n            right: this.x + this.width / 2,\n            top: this.y - this.height / 2,\n            bottom: this.y + this.height / 2\n        };\n    }\n\n    // Check if a point is inside the ship\n    public contains(x: number, y: number): boolean {\n        const bounds = this.getBounds();\n        return x >= bounds.left && x <= bounds.right &&\n            y >= bounds.top && y <= bounds.bottom;\n    }\n\n    // Reset ship to initial state\n    public reset(config: Partial<ShipConfig>): void {\n        this.x = config.x ?? this.x;\n        this.y = config.y ?? this.y;\n        this.health = config.health ?? this.maxHealth;\n        this.energy = config.energy ?? this.maxEnergy;\n        this.direction = config.direction ?? 1;\n        \n        if (config.shipData) {\n            this.shipData = config.shipData;\n            this.image = this.shipData.image;\n        }\n    }\n\n    // Level up enemy ship (increase stats)\n    public levelUp(level: number): void {\n        if (this.isEnemy) {\n            this.maxHealth = 100 + (level - 1) * 25;\n            this.health = this.maxHealth;\n            console.log(`Enemy leveled up! Level ${level}, Health: ${this.maxHealth}`);\n        }\n    }\n\n    // Get health percentage\n    public getHealthPercent(): number {\n        return (this.health / this.maxHealth) * 100;\n    }\n\n    // Get energy percentage  \n    public getEnergyPercent(): number {\n        return (this.energy / this.maxEnergy) * 100;\n    }\n\n    // Check if ship is destroyed\n    public isDestroyed(): boolean {\n        return this.health <= 0;\n    }\n\n    // Check if ship is alive\n    public isAlive(): boolean {\n        return this.health > 0;\n    }\n\n    // New methods for ship-owned weapons\n    public getWeapons(): ShipWeapon[] {\n        return this.shipData.weapons;\n    }\n\n    public getWeapon(weaponId: string): ShipWeapon | undefined {\n        return this.shipData.weapons.find(weapon => weapon.id === weaponId);\n    }\n\n    public addWeapon(weapon: ShipWeapon): boolean {\n        if (this.shipData.weapons.length >= this.shipData.weaponSlots) {\n            return false; // No more weapon slots available\n        }\n        \n        // Create a unique ID for this weapon instance if needed\n        if (!weapon.id || this.getWeapon(weapon.id)) {\n            weapon.id = `${weapon.templateId}_${Date.now()}_${Math.random()}`;\n        }\n        \n        this.shipData.weapons.push(weapon);\n        this.shipData.lastModified = Date.now();\n        return true;\n    }\n\n    public removeWeapon(weaponId: string): boolean {\n        const index = this.shipData.weapons.findIndex(weapon => weapon.id === weaponId);\n        if (index >= 0) {\n            this.shipData.weapons.splice(index, 1);\n            this.shipData.lastModified = Date.now();\n            return true;\n        }\n        return false;\n    }\n\n    public upgradeWeapon(weaponId: string, upgradeId: string): boolean {\n        const weapon = this.getWeapon(weaponId);\n        if (!weapon || !weapon.upgrades) {\n            return false;\n        }\n        \n        const upgrade = weapon.upgrades.find(u => u.id === upgradeId);\n        if (!upgrade) {\n            return false;\n        }\n        \n        // Apply upgrade effects\n        Object.keys(upgrade.effects).forEach(key => {\n            const effect = upgrade.effects[key];\n            if (effect !== undefined && key in weapon) {\n                (weapon as any)[key] += effect;\n            }\n        });\n        \n        // Remove the used upgrade\n        weapon.upgrades = weapon.upgrades.filter(u => u.id !== upgradeId);\n        weapon.level++;\n        this.shipData.lastModified = Date.now();\n        \n        console.log(`Upgraded weapon ${weapon.name} with ${upgrade.name}`);\n        return true;\n    }\n}\n\n// Utility function to create a weapon instance from a weapon template\nexport function createWeaponInstance(weaponTemplate: WeaponType, level: number = 1): ShipWeapon {\n    return {\n        id: `${weaponTemplate.id}_${Date.now()}_${Math.random()}`,\n        templateId: weaponTemplate.id,\n        name: weaponTemplate.name,\n        description: weaponTemplate.description,\n        \n        // Combat stats (can be modified from template)\n        damage: weaponTemplate.damage,\n        energyCost: weaponTemplate.energyCost,\n        \n        // Behavior properties\n        projectileSpeed: weaponTemplate.projectileSpeed,\n        projectileLifetime: weaponTemplate.projectileLifetime,\n        isInstantHit: weaponTemplate.isInstantHit,\n        hasParticles: weaponTemplate.hasParticles,\n        useCircularArc: weaponTemplate.useCircularArc,\n        \n        // Loading properties\n        maxEnergy: weaponTemplate.maxEnergy,\n        currentEnergy: weaponTemplate.currentEnergy,\n        loadingTime: weaponTemplate.loadingTime,\n        \n        // Visual and audio properties\n        soundFile: weaponTemplate.soundFile,\n        projectileColor: weaponTemplate.projectileColor,\n        projectileSize: weaponTemplate.projectileSize,\n        \n        // Metadata\n        faction: weaponTemplate.faction,\n        cost: weaponTemplate.cost || 0,\n        level: level,\n        upgrades: [] // Start with no upgrades available\n    };\n}\n\n// Utility function to create ship data from ship type and weapons\nexport function createShipData(shipType: ShipType, weapons: WeaponType[], customName?: string): ShipData {\n    const weaponInstances = weapons.map(weaponTemplate => createWeaponInstance(weaponTemplate));\n    \n    return {\n        id: `ship_${Date.now()}_${Math.random()}`,\n        templateId: shipType.id,\n        name: customName || shipType.name,\n        value: shipType.cost || 1000,\n        \n        // Combat stats\n        maxHealth: shipType.maxHealth,\n        maxEnergy: shipType.maxEnergy,\n        speed: shipType.speed,\n        \n        // Weapons\n        weapons: weaponInstances,\n        weaponSlots: shipType.weaponSlots,\n        \n        // Visual properties\n        image: shipType.image,\n        faction: shipType.faction,\n        \n        // Metadata\n        level: 1,\n        experience: 0,\n        upgrades: [],\n        \n        // Serialization info\n        createdAt: Date.now(),\n        lastModified: Date.now()\n    };\n}\n\n// Factory functions for creating specific ship types\nexport function createPlayerShip(shipType: ShipType, canvasWidth: number, canvasHeight: number, selectedWeapons: WeaponType[]): Ship {\n    const shipData = createShipData(shipType, selectedWeapons || [], `Player ${shipType.name}`);\n    \n    return new Ship({\n        x: canvasWidth / 2,\n        y: canvasHeight - 120,\n        width: 120,\n        height: 90,\n        velocityX: 0.8,\n        direction: 1,\n        minX: 60,\n        maxX: canvasWidth - 60,\n        isPlayer: true,\n        shipData: shipData\n    });\n}\n\nexport function createEnemyShip(enemyShipType: ShipType, canvasWidth: number, _canvasHeight: number, level: number = 1, enemyWeapons: WeaponType[] = []): Ship {\n    const maxHealth = enemyShipType.maxHealth + (level - 1) * 25;\n    const shipData = createShipData(enemyShipType, enemyWeapons, `Enemy ${enemyShipType.name}`);\n    \n    // Level up the ship data for higher levels\n    shipData.maxHealth = maxHealth;\n    shipData.level = level;\n    \n    return new Ship({\n        x: canvasWidth / 2,\n        y: 90,\n        width: 120,\n        height: 90,\n        health: maxHealth,\n        maxHealth: maxHealth,\n        energy: enemyShipType.maxEnergy,\n        maxEnergy: enemyShipType.maxEnergy,\n        velocityX: 0.6,\n        direction: -1,\n        minX: 60,\n        maxX: canvasWidth - 60,\n        isEnemy: true,\n        shipData: shipData\n    });\n}\n","/**\n * WeaponSystem - Handles weapons, projectiles, and combat mechanics\n */\nimport type { Projectile, MissMessage, ShipExplosion, TorpedoProjectile, PhaserBeam, ShipWeapon } from './types.js';\nimport { Ship } from './Ship.js';\nimport { AssetManager } from './AssetManager.js';\nimport { CollisionManager } from './CollisionManager.js';\nimport { ParticleSystem } from './ParticleSystem.js';\n\nexport class WeaponSystem {\n    public assetManager: AssetManager;\n    public collisionManager: CollisionManager;\n    public particleSystem: ParticleSystem;\n    public projectiles: Projectile[];\n    public missMessages: MissMessage[];\n    private lastUpdateTime: number = 0;\n\n    constructor(assetManager: AssetManager, collisionManager: CollisionManager, particleSystem: ParticleSystem) {\n        this.assetManager = assetManager;\n        this.collisionManager = collisionManager;\n        this.particleSystem = particleSystem;\n        this.projectiles = [];\n        this.missMessages = [];\n        this.lastUpdateTime = Date.now();\n    }\n\n    // Update weapon configs for a player ship\n    public updateWeaponConfigs(playerShip: Ship): void {\n        // Initialize weapon energy states for player weapons\n        const weapons = playerShip.getWeapons();\n        weapons.forEach(weapon => {\n            if (weapon.currentEnergy === undefined) {\n                weapon.currentEnergy = 0; // Start with no energy\n            }\n        });\n    }\n\n    // Update weapon loading progress - weapons load energy over time\n    private updateWeaponLoading(deltaTime: number, playerShip: Ship): void {\n        const weapons = playerShip.getWeapons();\n        weapons.forEach(weapon => {\n            // Only load if weapon is not at max energy\n            if (weapon.currentEnergy < weapon.maxEnergy) {\n                // Load energy over time based on loadingTime\n                const energyPerSecond = weapon.maxEnergy / (weapon.loadingTime / 1000);\n                const energyGain = (energyPerSecond * deltaTime) / 1000;\n\n                weapon.currentEnergy = Math.min(weapon.maxEnergy, weapon.currentEnergy + energyGain);\n            }\n        });\n    }\n\n\n    // Fire a weapon from a ship\n    public fireWeapon(weapon: ShipWeapon, shooterShip: Ship, targetShip: Ship): void {\n        // Check if weapon has enough energy to fire\n        if (shooterShip.isPlayer && !this.haveEnoughEnergyFor(shooterShip, weapon.id)) {\n            console.log(`Insufficient weapon energy for ${weapon.name}! Need ${weapon.energyCost}, have ${weapon.currentEnergy}`);\n            return;\n        }\n\n        // Consume weapon energy\n        if (shooterShip.isPlayer) {\n            weapon.currentEnergy = Math.max(0, weapon.currentEnergy - weapon.energyCost);\n            console.log(`Weapon ${weapon.name} fired! Energy: ${weapon.currentEnergy}/${weapon.maxEnergy}`);\n        }\n\n        // Handle phaser (instant hit)\n        if (weapon.isInstantHit) {\n            this.createPhaserBeam(shooterShip, targetShip, weapon);\n            this.assetManager.playWeaponSound(weapon.templateId);\n\n            // Apply damage immediately for phaser\n            const wasDestroyed = targetShip.takeDamage(weapon.damage);\n            if (wasDestroyed) {\n                this.particleSystem.createShipExplosion(targetShip);\n            }\n            return;\n        }\n\n        // Create projectile for torpedoes\n        const projectile = this.createProjectile(weapon.templateId, shooterShip, targetShip, weapon);\n        this.projectiles.push(projectile);\n\n        // Play weapon sound\n        this.assetManager.playWeaponSound(weapon.templateId);\n    }\n\n    private createProjectile(weaponType: string, shooterShip: Ship, targetShip: Ship, weapon: ShipWeapon): TorpedoProjectile {\n        const isEnemy = shooterShip.isEnemy;\n        const startY = isEnemy ?\n            shooterShip.y + shooterShip.height / 2 + 10 :\n            shooterShip.y - shooterShip.height / 2 - 10;\n\n        // Calculate arc height for curved weapons\n        const arcHeight = weapon.useCircularArc ? 80 + Math.random() * 120 : 100;\n\n        const projectile: TorpedoProjectile = {\n            x: shooterShip.x,\n            y: startY,\n            startX: shooterShip.x,\n            startY: startY,\n            targetX: targetShip.x,\n            targetY: targetShip.y,\n            progress: 0,\n            arcHeight: arcHeight,\n            arcDirection: Math.random() < 0.5 ? -1 : 1,\n            speed: weapon.projectileSpeed / 1000, // Convert to appropriate scale\n            width: weapon.projectileSize.width,\n            height: weapon.projectileSize.height,\n            damage: weapon.damage,\n            color: weapon.projectileColor,\n            type: weaponType,\n            trail: [],\n            useCircularArc: weapon.useCircularArc,\n            isEnemyProjectile: isEnemy\n        };\n\n        // Add particles for weapons that have them\n        if (weapon.hasParticles) {\n            projectile.particles = [];\n        }\n\n        return projectile;\n    }\n\n    private createPhaserBeam(shooterShip: Ship, targetShip: Ship, weapon: ShipWeapon): void {\n        // const isEnemy = shooterShip.isEnemy;\n        const beam: PhaserBeam = {\n            shooterShip: shooterShip,\n            targetShip: targetShip,\n            duration: weapon.projectileLifetime,\n            startTime: Date.now(),\n            type: 'phaser',\n            damage: weapon.damage,\n            color: weapon.projectileColor\n        };\n\n        this.projectiles.push(beam);\n    }\n\n    // Update all projectiles\n    public update(playerShip: Ship, enemyShip: Ship): void {\n        // Calculate delta time for weapon loading\n        const currentTime = Date.now();\n        const deltaTime = currentTime - this.lastUpdateTime;\n        this.lastUpdateTime = currentTime;\n\n\n        // Update weapon loading progress for player ship\n        this.updateWeaponLoading(deltaTime, playerShip);\n\n        this.updateProjectiles(playerShip, enemyShip);\n        this.updateMissMessages();\n        this.particleSystem.update();\n    }\n\n    private updateProjectiles(playerShip: Ship, enemyShip: Ship): void {\n        this.projectiles = this.projectiles.filter(projectile => {\n            // Handle phaser beams\n            if (projectile.type === 'phaser' || projectile.type === 'enemy_phaser') {\n                const phaserBeam = projectile as PhaserBeam;\n                return Date.now() - phaserBeam.startTime < phaserBeam.duration;\n            }\n\n            // Handle explosion particles\n            if (projectile.type === 'explosion') {\n                const explosionParticle = projectile as any;\n                explosionParticle.x += explosionParticle.vx;\n                explosionParticle.y += explosionParticle.vy;\n                explosionParticle.life--;\n                return explosionParticle.life > 0;\n            }\n\n            // Handle torpedoes with arc movement\n            if ('progress' in projectile) {\n                const torpedoProjectile = projectile as TorpedoProjectile;\n                this.updateProjectileArc(torpedoProjectile);\n\n                // Add trail effect\n                if (torpedoProjectile.trail) {\n                    torpedoProjectile.trail.push({ x: torpedoProjectile.x, y: torpedoProjectile.y });\n                    const maxTrailLength = torpedoProjectile.useCircularArc ? 30 : 8;\n                    if (torpedoProjectile.trail.length > maxTrailLength) {\n                        torpedoProjectile.trail.shift();\n                    }\n                }\n\n                // Add particles for quantum torpedoes\n                this.particleSystem.updateQuantumParticles(torpedoProjectile);\n\n                // Check collisions\n                const collision = this.checkCollisions(torpedoProjectile, playerShip, enemyShip);\n                if (collision) {\n                    return false; // Remove projectile\n                }\n\n                // Remove if arc completed without hit\n                if (this.collisionManager.checkProjectileMiss(torpedoProjectile)) {\n                    this.createMissMessage(torpedoProjectile, playerShip, enemyShip);\n                    return false;\n                }\n            }\n\n            return true;\n        });\n    }\n\n    private updateProjectileArc(projectile: TorpedoProjectile): void {\n        projectile.progress += projectile.speed;\n\n        // Store previous position for rotation\n        const prevX = projectile.x;\n        const prevY = projectile.y;\n\n        const t = projectile.progress;\n\n        if (projectile.useCircularArc) {\n            // Cache expensive calculations on first use\n            if (!projectile.cached) {\n                const deltaX = projectile.targetX - projectile.startX;\n                const deltaY = projectile.targetY - projectile.startY;\n                const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n                projectile.cached = {\n                    deltaX: deltaX,\n                    deltaY: deltaY,\n                    perpX: -deltaY / distance,\n                    perpY: deltaX / distance\n                };\n            }\n\n            // Create sideways rainbow arc using cached values\n            const baseX = projectile.startX + projectile.cached.deltaX * t;\n            const baseY = projectile.startY + projectile.cached.deltaY * t;\n\n            // Arc displacement: sine wave for smooth curve\n            const arcOffset = Math.sin(Math.PI * t) * projectile.arcHeight * projectile.arcDirection;\n\n            projectile.x = baseX + projectile.cached.perpX * arcOffset;\n            projectile.y = baseY + projectile.cached.perpY * arcOffset;\n        } else {\n            // Straight line movement\n            const deltaX = projectile.targetX - projectile.startX;\n            const deltaY = projectile.targetY - projectile.startY;\n\n            projectile.x = projectile.startX + deltaX * t;\n            projectile.y = projectile.startY + deltaY * t;\n        }\n\n        // Calculate rotation angle\n        if (prevX !== undefined && prevY !== undefined) {\n            const dx = projectile.x - prevX;\n            const dy = projectile.y - prevY;\n            projectile.rotation = Math.atan2(dy, dx);\n        }\n\n    }\n\n\n\n    private checkCollisions(projectile: TorpedoProjectile, playerShip: Ship, enemyShip: Ship): boolean {\n        const collisionResult = this.collisionManager.checkProjectileCollision(projectile, playerShip, enemyShip);\n\n        if (collisionResult.hit && collisionResult.impactPoint) {\n            this.particleSystem.createExplosion(collisionResult.impactPoint.x, collisionResult.impactPoint.y);\n\n            if (collisionResult.wasDestroyed && collisionResult.targetShip) {\n                this.particleSystem.createShipExplosion(collisionResult.targetShip);\n            }\n\n            return true; // Collision detected\n        }\n\n        return false;\n    }\n\n\n\n\n\n    private createMissMessage(projectile: TorpedoProjectile, playerShip: Ship, enemyShip: Ship): void {\n        const targetShip = projectile.isEnemyProjectile ? playerShip : enemyShip;\n        const messageX = targetShip.x + targetShip.width / 2 + 20;\n        const messageY = targetShip.y;\n\n        this.missMessages.push({\n            x: messageX,\n            y: messageY,\n            text: 'MISSED',\n            life: 120,\n            maxLife: 120,\n            color: '#ff0000',\n            fontSize: 16,\n            startTime: Date.now()\n        });\n\n        console.log(`${projectile.isEnemyProjectile ? 'Enemy' : 'Player'} torpedo missed!`);\n    }\n\n    private updateMissMessages(): void {\n        this.missMessages = this.missMessages.filter(message => {\n            message.life--;\n            return message.life > 0;\n        });\n    }\n\n\n\n    // Clear all projectiles and effects\n    public clear(): void {\n        this.projectiles = [];\n        this.missMessages = [];\n        this.particleSystem.clear();\n    }\n\n    // Getters for rendering\n    public getProjectiles(): Projectile[] {\n        return [...this.projectiles, ...this.particleSystem.getExplosionParticles()];\n    }\n\n    public getMissMessages(): MissMessage[] {\n        return this.missMessages;\n    }\n\n    public getShipExplosions(): ShipExplosion[] {\n        return this.particleSystem.getShipExplosions();\n    }\n\n    // Get weapon loading progress (0.0 to 1.0)\n    public getWeaponLoadingProgress(playerShip: Ship, weaponId: string): number {\n        const weapon = playerShip.getWeapon(weaponId);\n        if (!weapon) return 0;\n\n        return weapon.currentEnergy / weapon.maxEnergy;\n    }\n\n    // Check if weapon is ready to fire\n    public haveEnoughEnergyFor(playerShip: Ship, weaponId: string): boolean {\n        const weapon = playerShip.getWeapon(weaponId);\n        if (!weapon) {\n            return false;\n        }\n\n        const ready = weapon.currentEnergy >= weapon.energyCost;\n        return ready;\n    }\n}\n","/**\n * CollisionManager - Handles all collision detection in the game\n */\nimport type { TorpedoProjectile, CollisionResult } from './types.js';\nimport { Ship } from './Ship.js';\n\nexport class CollisionManager {\n    constructor() {\n        // No dependencies needed for collision detection\n    }\n\n    /**\n     * Check collision between a projectile and its target ship\n     * @param projectile The projectile to check\n     * @param playerShip The player ship\n     * @param enemyShip The enemy ship\n     * @returns CollisionResult with hit information\n     */\n    public checkProjectileCollision(projectile: TorpedoProjectile, playerShip: Ship, enemyShip: Ship): CollisionResult {\n        const targetShip = projectile.isEnemyProjectile ? playerShip : enemyShip;\n        \n        if (targetShip.contains(projectile.x, projectile.y)) {\n            const wasDestroyed = targetShip.takeDamage(projectile.damage);\n            \n            return {\n                hit: true,\n                targetShip: targetShip,\n                wasDestroyed: wasDestroyed,\n                impactPoint: { x: projectile.x, y: projectile.y }\n            };\n        }\n        \n        return { hit: false };\n    }\n\n    /**\n     * Check if two ships are colliding (for future ship-to-ship collision)\n     * @param ship1 First ship\n     * @param ship2 Second ship\n     * @returns true if ships are colliding\n     */\n    public checkShipCollision(ship1: Ship, ship2: Ship): boolean {\n        const bounds1 = ship1.getBounds();\n        const bounds2 = ship2.getBounds();\n        \n        return !(bounds1.right < bounds2.left || \n                bounds1.left > bounds2.right || \n                bounds1.bottom < bounds2.top || \n                bounds1.top > bounds2.bottom);\n    }\n\n    /**\n     * Check if a point is within a ship's bounds\n     * @param x X coordinate\n     * @param y Y coordinate\n     * @param ship Ship to check against\n     * @returns true if point is within ship bounds\n     */\n    public checkPointInShip(x: number, y: number, ship: Ship): boolean {\n        return ship.contains(x, y);\n    }\n\n    /**\n     * Check if projectile has missed its target (used for miss messages)\n     * @param projectile The projectile to check\n     * @returns true if projectile has clearly missed\n     */\n    public checkProjectileMiss(projectile: TorpedoProjectile): boolean {\n        // Projectile is considered missed if progress >= 1.5 (past target)\n        return projectile.progress >= 1.5;\n    }\n}\n","/**\n * ParticleSystem - Handles all particle effects, explosions, and visual effects\n */\nimport type { ExplosionParticle, ShipExplosion, Particle, Projectile } from './types.js';\nimport { Ship } from './Ship.js';\nimport { AssetManager } from './AssetManager.js';\n\nexport class ParticleSystem {\n    private assetManager: AssetManager;\n    private explosionParticles: ExplosionParticle[];\n    private shipExplosions: ShipExplosion[];\n\n    constructor(assetManager: AssetManager) {\n        this.assetManager = assetManager;\n        this.explosionParticles = [];\n        this.shipExplosions = [];\n    }\n\n    /**\n     * Create an explosion at the specified location\n     * @param x X coordinate\n     * @param y Y coordinate\n     */\n    public createExplosion(x: number, y: number): ExplosionParticle[] {\n        this.assetManager.playExplosionSound();\n\n        const newParticles: ExplosionParticle[] = [];\n\n        // Add explosion particles\n        for (let i = 0; i < 20; i++) {\n            const explosionParticle: ExplosionParticle = {\n                x: x + (Math.random() - 0.5) * 20,\n                y: y + (Math.random() - 0.5) * 20,\n                vx: (Math.random() - 0.5) * 4,\n                vy: (Math.random() - 0.5) * 4,\n                life: 30,\n                maxLife: 30,\n                size: Math.random() * 3 + 1,\n                type: 'explosion'\n            };\n\n            this.explosionParticles.push(explosionParticle);\n            newParticles.push(explosionParticle);\n        }\n\n        return newParticles;\n    }\n\n    /**\n     * Create a ship explosion with multiple waves\n     * @param ship The ship that exploded\n     */\n    public createShipExplosion(ship: Ship): void {\n        this.assetManager.playExplosionSound();\n\n        const explosionData: ShipExplosion = {\n            x: ship.x,\n            y: ship.y,\n            width: ship.width,\n            height: ship.height,\n            particles: [],\n            startTime: Date.now(),\n            duration: 3000,\n            isPlayer: ship.isPlayer\n        };\n\n        // Create many explosion particles\n        for (let i = 0; i < 80; i++) {\n            const particle: Particle = {\n                x: ship.x + (Math.random() - 0.5) * ship.width,\n                y: ship.y + (Math.random() - 0.5) * ship.height,\n                vx: (Math.random() - 0.5) * 8,\n                vy: (Math.random() - 0.5) * 8,\n                life: 60 + Math.random() * 120,\n                maxLife: 60 + Math.random() * 120,\n                size: Math.random() * 6 + 2,\n                color: Math.random() < 0.5 ? '#ff6600' : '#ffff00',\n                type: 'shipExplosion'\n            };\n            explosionData.particles.push(particle);\n        }\n\n        // Add secondary explosion waves\n        for (let wave = 0; wave < 3; wave++) {\n            setTimeout(() => {\n                for (let i = 0; i < 30; i++) {\n                    const particle: Particle = {\n                        x: ship.x + (Math.random() - 0.5) * ship.width * (1 + wave * 0.5),\n                        y: ship.y + (Math.random() - 0.5) * ship.height * (1 + wave * 0.5),\n                        vx: (Math.random() - 0.5) * (6 - wave),\n                        vy: (Math.random() - 0.5) * (6 - wave),\n                        life: 40 + Math.random() * 80,\n                        maxLife: 40 + Math.random() * 80,\n                        size: Math.random() * 4 + 1,\n                        color: wave === 0 ? '#ff0000' : (wave === 1 ? '#ff6600' : '#ffff00'),\n                        type: 'shipExplosion'\n                    };\n                    explosionData.particles.push(particle);\n                }\n                if (wave < 2) {\n                    this.assetManager.playExplosionSound();\n                }\n            }, wave * 500);\n        }\n\n        this.shipExplosions.push(explosionData);\n        console.log(`${ship.isPlayer ? 'Player' : 'Enemy'} ship explosion created!`);\n    }\n\n    /**\n     * Update all particle effects\n     */\n    public update(): void {\n        this.updateExplosionParticles();\n        this.updateShipExplosions();\n    }\n\n    /**\n     * Update explosion particles\n     */\n    private updateExplosionParticles(): void {\n        this.explosionParticles = this.explosionParticles.filter(particle => {\n            particle.x += particle.vx;\n            particle.y += particle.vy;\n            particle.life--;\n            return particle.life > 0;\n        });\n    }\n\n    /**\n     * Update ship explosions\n     */\n    private updateShipExplosions(): void {\n        this.shipExplosions.forEach(explosion => {\n            explosion.particles = explosion.particles.filter(particle => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                particle.life--;\n\n                // In space, particles maintain their velocity without gravity\n                // Optional: Add slight air resistance for visual effect\n                particle.vx *= 0.999;\n                particle.vy *= 0.999;\n\n                return particle.life > 0;\n            });\n        });\n\n        // Remove finished explosions\n        this.shipExplosions = this.shipExplosions.filter(explosion => {\n            const elapsed = Date.now() - explosion.startTime;\n            return elapsed < explosion.duration && explosion.particles.length > 0;\n        });\n    }\n\n    /**\n     * Add quantum torpedo particles to a projectile\n     * @param projectile The quantum torpedo projectile\n     */\n    public updateQuantumParticles(projectile: any): void {\n        if (projectile.type === 'quantum' && projectile.particles) {\n            // Add new particles\n            for (let i = 0; i < 3; i++) {\n                projectile.particles.push({\n                    x: projectile.x + (Math.random() - 0.5) * 10,\n                    y: projectile.y + (Math.random() - 0.5) * 10,\n                    vx: (Math.random() - 0.5) * 2,\n                    vy: (Math.random() - 0.5) * 2,\n                    life: 30,\n                    maxLife: 30\n                });\n            }\n\n            // Update existing particles\n            projectile.particles = projectile.particles.filter((particle: Particle) => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                particle.life--;\n                return particle.life > 0;\n            });\n        }\n    }\n\n    /**\n     * Get all explosion particles as projectiles for rendering\n     */\n    public getExplosionParticles(): Projectile[] {\n        return this.explosionParticles as Projectile[];\n    }\n\n    /**\n     * Get all ship explosions\n     */\n    public getShipExplosions(): ShipExplosion[] {\n        return this.shipExplosions;\n    }\n\n    /**\n     * Clear all particle effects\n     */\n    public clear(): void {\n        this.explosionParticles = [];\n        this.shipExplosions = [];\n    }\n}\n","/**\n * EnemyAI - Handles enemy behavior, shooting patterns, and AI decisions\n */\nimport type { EnemyAIConfig } from './types.js';\nimport { Ship } from './Ship.js';\nimport { WeaponSystem } from './WeaponSystem.js';\n\nexport class EnemyAI {\n    private weaponSystem: WeaponSystem;\n    private lastShotTime: number;\n    private shootInterval: number;\n    private baseShootInterval: number;\n    private level: number;\n\n    constructor(weaponSystem: WeaponSystem, config?: EnemyAIConfig) {\n        this.weaponSystem = weaponSystem;\n        this.lastShotTime = Date.now();\n        this.baseShootInterval = config?.baseShootInterval || 6000; // 6 seconds default\n        this.shootInterval = this.baseShootInterval;\n        this.level = 1;\n    }\n\n    /**\n     * Update enemy AI behavior\n     * @param enemyShip The enemy ship\n     * @param playerShip The player ship\n     * @param gameActive Whether the game is active (not paused, not level completed)\n     */\n    public update(enemyShip: Ship, playerShip: Ship, gameActive: boolean): void {\n        if (!gameActive || !enemyShip.isAlive()) {\n            return;\n        }\n\n        const currentTime = Date.now();\n\n        // Check if it's time to shoot\n        if (currentTime - this.lastShotTime > this.shootInterval) {\n            this.fireAtPlayer(enemyShip, playerShip);\n            this.lastShotTime = currentTime;\n        }\n    }\n\n    /**\n     * Fire a weapon at the player\n     * @param enemyShip The enemy ship\n     * @param playerShip The player ship\n     */\n    private fireAtPlayer(enemyShip: Ship, playerShip: Ship): void {\n        // Use the ship's available weapons, fallback to default if none available\n        const availableWeapons = enemyShip.getWeapons();\n        if (availableWeapons.length === 0) {\n            console.log('Enemy ship has no weapons assigned');\n            return;\n        }\n\n        const selectedWeapon = availableWeapons[Math.floor(Math.random() * availableWeapons.length)];\n\n        if (!selectedWeapon) {\n            console.error('No weapon available for enemy ship');\n            return;\n        }\n\n        // Create a modified weapon with level-based damage scaling\n        const scaledWeapon = {\n            ...selectedWeapon,\n            damage: selectedWeapon.damage + this.level * (selectedWeapon.isInstantHit ? 2 : 3)\n        };\n\n        this.weaponSystem.fireWeapon(scaledWeapon, enemyShip, playerShip);\n        console.log(`Enemy fired ${selectedWeapon.name}!`);\n    }\n\n    /**\n     * Update enemy AI for a new level\n     * @param level The new level\n     */\n    public setLevel(level: number): void {\n        this.level = level;\n\n        // Increase enemy firing rate based on level (faster = shorter interval)\n        // Level 1: 6000ms, Level 2: 5700ms, Level 3: 5400ms, etc.\n        // Minimum interval: 800ms\n        this.shootInterval = Math.max(800, this.baseShootInterval - (level - 1) * 300);\n\n        console.log(`Enemy AI updated to Level ${level}! Firing rate: ${this.shootInterval}ms`);\n    }\n\n    /**\n     * Get current shooting interval\n     */\n    public getShootInterval(): number {\n        return this.shootInterval;\n    }\n\n    /**\n     * Get current level\n     */\n    public getLevel(): number {\n        return this.level;\n    }\n\n    /**\n     * Reset AI to initial state\n     */\n    public reset(): void {\n        this.lastShotTime = Date.now();\n        this.shootInterval = this.baseShootInterval;\n        this.level = 1;\n    }\n\n    /**\n     * Force immediate shot (for testing or special events)\n     * @param enemyShip The enemy ship\n     * @param playerShip The player ship\n     */\n    public forceShot(enemyShip: Ship, playerShip: Ship): void {\n        this.fireAtPlayer(enemyShip, playerShip);\n        this.lastShotTime = Date.now();\n    }\n\n    /**\n     * Check if enemy should be shooting based on difficulty settings\n     * @param difficulty Difficulty modifier (1.0 = normal, 1.5 = hard, 0.7 = easy)\n     */\n    public setDifficulty(difficulty: number): void {\n        // Adjust shooting interval based on difficulty\n        // Higher difficulty = faster shooting\n        this.shootInterval = Math.max(500, this.baseShootInterval / difficulty);\n        console.log(`Enemy AI difficulty set to ${difficulty}x! New firing rate: ${this.shootInterval}ms`);\n    }\n}\n","/**\n * GameStateManager - Handles game state transitions, level progression, and victory/defeat conditions\n */\nimport type { GameStateChangeCallback, GameStateInfo } from './types.js';\nimport { Ship } from './Ship.js';\nimport { EnemyAI } from './EnemyAI.js';\nimport type { GameSettingsManager } from './GameSettings.js';\n\nexport class GameStateManager {\n    private level: number;\n    private gameOver: boolean;\n    private gameOverMessage: string;\n    private levelCompleted: boolean;\n    private gameStarted: boolean;\n    private gamePaused: boolean;\n    private callbacks: GameStateChangeCallback[];\n    private currentCredits: number;\n    private creditUpdateCallback?: (credits: number) => void;\n    private settingsManager: GameSettingsManager | undefined;\n\n    constructor(settingsManager?: GameSettingsManager) {\n        this.level = 1;\n        this.gameOver = false;\n        this.gameOverMessage = '';\n        this.levelCompleted = false;\n        this.gameStarted = false;\n        this.gamePaused = false;\n        this.currentCredits = 4000;\n        this.callbacks = [];\n        this.settingsManager = settingsManager;\n    }\n\n    /**\n     * Register a callback for state changes\n     * @param callback Function to call when state changes\n     */\n    public onStateChange(callback: GameStateChangeCallback): void {\n        this.callbacks.push(callback);\n    }\n\n    /**\n     * Notify all callbacks of state change\n     */\n    private notifyStateChange(): void {\n        const state = this.getCurrentState();\n        this.callbacks.forEach(callback => callback(state));\n    }\n\n    /**\n     * Start the game\n     */\n    public startGame(): void {\n        this.gameStarted = true;\n        this.gameOver = false;\n        this.gamePaused = false;\n        this.levelCompleted = false;\n\n        console.log('Game started!');\n        this.notifyStateChange();\n    }\n\n    /**\n     * Pause the game\n     */\n    public pauseGame(): void {\n        if (this.gameStarted && !this.gameOver) {\n            this.gamePaused = true;\n            console.log('Game paused');\n            this.notifyStateChange();\n        }\n    }\n\n    /**\n     * Resume the game\n     */\n    public resumeGame(): void {\n        if (this.gameStarted && !this.gameOver) {\n            this.gamePaused = false;\n            console.log('Game resumed');\n            this.notifyStateChange();\n        }\n    }\n\n    /**\n     * End the game with a message\n     * @param message The game over message\n     */\n    public endGame(message: string): void {\n        this.gameOver = true;\n        this.gameOverMessage = message;\n\n        console.log(`Game Over: ${message}`);\n        this.notifyStateChange();\n    }\n\n    /**\n     * Complete the current battle\n     */\n    public completeLevel(): void {\n        if (!this.gameOver && this.gameStarted) {\n            this.levelCompleted = true;\n            console.log(`Battle completed!`);\n            this.notifyStateChange();\n        }\n    }\n\n    /**\n     * Advance to the next level\n     * @param playerShip The player ship to reset\n     * @param enemyShip The enemy ship to reset\n     * @param enemyAI The enemy AI to update\n     * @param canvasWidth Canvas width for ship positioning\n     * @param canvasHeight Canvas height for ship positioning\n     */\n    public advanceToNextLevel(\n        playerShip: Ship,\n        enemyShip: Ship,\n        enemyAI: EnemyAI,\n        canvasWidth: number,\n        canvasHeight: number\n    ): void {\n        this.level++;\n        this.levelCompleted = false;\n\n        // Reset player to full health and energy\n        playerShip.reset({\n            x: canvasWidth / 2,\n            y: canvasHeight - 120,\n            health: 100,\n            energy: 100,\n            direction: 1\n        });\n\n        // Level up and reset enemy ship\n        enemyShip.levelUp(this.level);\n        enemyShip.reset({\n            x: canvasWidth / 2,\n            y: 90,\n            health: enemyShip.maxHealth, // Use the new maxHealth from levelUp\n            direction: -1\n        });\n\n        // Update enemy AI for new level\n        enemyAI.setLevel(this.level);\n\n        console.log(`Advanced to Level ${this.level}! Enemy Health: ${enemyShip.maxHealth}`);\n        this.notifyStateChange();\n    }\n\n    /**\n     * Restart the game to initial state\n     */\n    public restartGame(): void {\n        // Reset game state\n        this.currentCredits = 4000;\n        this.gameOver = false;\n        this.gameOverMessage = '';\n        this.level = 1;\n        this.levelCompleted = false;\n        this.gameStarted = false;\n        this.gamePaused = false;\n\n        // Reset purchased weapons and ships\n        if (this.settingsManager) {\n            this.settingsManager.resetAllData();\n        }\n\n        // Update UI with reset credits\n        this.creditUpdateCallback?.(this.currentCredits);\n\n        console.log('Game restarted!');\n        this.notifyStateChange();\n    }\n\n    /**\n     * Check victory condition\n     * @param enemyShip The enemy ship to check\n     * @returns true if battle should be completed\n     */\n    public checkVictoryCondition(enemyShip: Ship): boolean {\n        if (!this.levelCompleted && enemyShip.isDestroyed()) {\n            this.completeLevel();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Check defeat condition\n     * @param playerShip The player ship to check\n     * @returns true if game should end\n     */\n    public checkDefeatCondition(playerShip: Ship): boolean {\n        if (playerShip.isDestroyed() && !this.gameOver) {\n            this.endGame('MISSION FAILED');\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Get current game state\n     */\n    public getCurrentState(): GameStateInfo {\n        return {\n            level: this.level,\n            gameOver: this.gameOver,\n            gameOverMessage: this.gameOverMessage,\n            levelCompleted: this.levelCompleted,\n            gameStarted: this.gameStarted,\n            gamePaused: this.gamePaused,\n            canUpdate: this.gameStarted && !this.gamePaused && !this.gameOver,\n            canUpdateProjectiles: this.gameStarted && !this.gamePaused && !this.gameOver\n        };\n    }\n\n    /**\n     * Get current level\n     */\n    public getLevel(): number {\n        return this.level;\n    }\n\n    /**\n     * Check if game is active (can receive input)\n     */\n    public isGameActive(): boolean {\n        return this.gameStarted && !this.gameOver && !this.gamePaused;\n    }\n\n    /**\n     * Check if level is completed\n     */\n    public isLevelCompleted(): boolean {\n        return this.levelCompleted;\n    }\n\n    /**\n     * Check if game is over\n     */\n    public isGameOver(): boolean {\n        return this.gameOver;\n    }\n\n    /**\n     * Check if game is started\n     */\n    public isGameStarted(): boolean {\n        return this.gameStarted;\n    }\n\n    /**\n     * Check if game is paused\n     */\n    public isGamePaused(): boolean {\n        return this.gamePaused;\n    }\n\n    /**\n     * Set callback for credit updates\n     */\n    public setCreditUpdateCallback(callback: (credits: number) => void): void {\n        this.creditUpdateCallback = callback;\n    }\n\n    /**\n     * Credit management methods\n     */\n    public updateCredits(amount: number): void {\n        this.currentCredits = Math.max(0, amount);\n        this.creditUpdateCallback?.(this.currentCredits);\n    }\n\n    public addCredits(amount: number): void {\n        this.currentCredits += amount;\n        this.creditUpdateCallback?.(this.currentCredits);\n    }\n\n    public spendCredits(amount: number): boolean {\n        if (this.currentCredits >= amount) {\n            this.currentCredits -= amount;\n            this.creditUpdateCallback?.(this.currentCredits);\n            return true;\n        }\n        return false;\n    }\n\n    public getCredits(): number {\n        return this.currentCredits;\n    }\n}\n","/**\n * GameRenderer - Handles all drawing and rendering operations\n */\nimport type { GameState, Star, Projectile, TorpedoProjectile, PhaserBeam, ExplosionParticle, MissMessage, ShipExplosion } from './types.js';\nimport { Ship } from './Ship.js';\nimport { AssetManager } from './AssetManager.js';\n\nexport class GameRenderer {\n    public canvas: HTMLCanvasElement;\n    public ctx: CanvasRenderingContext2D;\n    public width: number;\n    public height: number;\n    public assetManager: AssetManager;\n    public stars: Star[];\n    private processedImageCache?: Map<string, HTMLCanvasElement>;\n\n    constructor(canvas: HTMLCanvasElement, assetManager: AssetManager) {\n        this.canvas = canvas;\n        const context = canvas.getContext('2d');\n        if (!context) {\n            throw new Error('Could not get 2D context from canvas');\n        }\n        this.ctx = context;\n        this.width = canvas.width;\n        this.height = canvas.height;\n        this.assetManager = assetManager;\n\n        // Initialize starfield\n        this.stars = [];\n        this.initializeStars();\n    }\n\n    private initializeStars(): void {\n        for (let i = 0; i < 200; i++) {\n            this.stars.push({\n                x: Math.random() * this.width,\n                y: Math.random() * this.height,\n                size: Math.random() * 2 + 0.5,\n                speed: Math.random() * 0.5 + 0.1,\n                brightness: Math.random() * 0.8 + 0.2\n            });\n        }\n    }\n\n    private updateStars(): void {\n        this.stars.forEach(star => {\n            star.y += star.speed;\n            if (star.y > this.height) {\n                star.y = 0;\n                star.x = Math.random() * this.width;\n            }\n        });\n    }\n\n    public render(gameState: GameState): void {\n        // Clear canvas\n        this.ctx.fillStyle = '#000';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n\n        // Draw stars\n        this.drawStars();\n\n        // Show loading message if assets aren't ready\n        if (!this.assetManager.isLoaded()) {\n            this.drawLoadingScreen();\n            return;\n        }\n\n        // Draw ships\n        this.drawShips(gameState.playerShip, gameState.enemyShip);\n\n        // Draw projectiles\n        this.drawProjectiles(gameState.weaponSystem.getProjectiles());\n\n        // Draw miss messages\n        this.drawMissMessages(gameState.weaponSystem.getMissMessages());\n\n        // Draw ship explosions\n        this.drawShipExplosions(gameState.weaponSystem.getShipExplosions());\n\n        // Draw game over screen if needed\n        if (gameState.gameOver) {\n            this.drawGameOverScreen(gameState);\n        }\n    }\n\n    public renderBackground(): void {\n        // Clear canvas\n        this.ctx.fillStyle = '#000';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n\n        // Draw stars\n        this.drawStars();\n\n        // Show loading message if assets aren't ready\n        if (!this.assetManager.isLoaded()) {\n            this.drawLoadingScreen();\n        }\n    }\n\n    private drawLoadingScreen(): void {\n        this.ctx.fillStyle = '#00ff00';\n        this.ctx.font = '24px Courier New';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('Loading Assets...', this.width / 2, this.height / 2);\n        this.ctx.textAlign = 'left';\n    }\n\n    private drawStars(): void {\n        this.ctx.fillStyle = '#ffffff';\n        this.stars.forEach(star => {\n            this.ctx.globalAlpha = star.brightness;\n            this.ctx.fillRect(star.x, star.y, star.size, star.size);\n        });\n        this.ctx.globalAlpha = 1;\n    }\n\n    private drawShips(playerShip: Ship, enemyShip: Ship): void {\n        // Draw player ship (only if alive)\n        if (playerShip.isAlive()) {\n            const playerImage = this.assetManager.getImage(playerShip.image);\n\n            if (playerImage && playerImage.complete) {\n                this.drawShipWithTransparency(\n                    playerImage,\n                    playerShip.x - playerShip.width / 2,\n                    playerShip.y - playerShip.height / 2,\n                    playerShip.width,\n                    playerShip.height,\n                    '#00ffff'\n                );\n            } else {\n                // Fallback rectangle\n                this.ctx.fillStyle = '#00ff00';\n                this.ctx.fillRect(\n                    playerShip.x - playerShip.width / 2,\n                    playerShip.y - playerShip.height / 2,\n                    playerShip.width,\n                    playerShip.height\n                );\n            }\n        }\n\n        // Draw enemy ship (only if alive)\n        if (enemyShip.isAlive()) {\n            const enemyImage = this.assetManager.getImage(enemyShip.image);\n\n            if (enemyImage && enemyImage.complete) {\n                this.drawShipWithTransparency(\n                    enemyImage,\n                    enemyShip.x - enemyShip.width / 2,\n                    enemyShip.y - enemyShip.height / 2,\n                    enemyShip.width,\n                    enemyShip.height,\n                    '#ff6600'\n                );\n            } else {\n                // Fallback rectangle\n                this.ctx.fillStyle = '#ff0000';\n                this.ctx.fillRect(\n                    enemyShip.x - enemyShip.width / 2,\n                    enemyShip.y - enemyShip.height / 2,\n                    enemyShip.width,\n                    enemyShip.height\n                );\n            }\n        }\n    }\n\n    private drawShipWithTransparency(image: HTMLImageElement, x: number, y: number, width: number, height: number, glowColor: string): void {\n        // Use a cached processed image to avoid reprocessing every frame\n        const cacheKey = `${image.src}_${width}_${height}`;\n\n        if (!this.processedImageCache) {\n            this.processedImageCache = new Map();\n        }\n\n        let processedCanvas = this.processedImageCache.get(cacheKey);\n\n        if (!processedCanvas) {\n            // Create and cache the processed image\n            processedCanvas = document.createElement('canvas');\n            const tempCtx = processedCanvas.getContext('2d')!;\n            processedCanvas.width = width;\n            processedCanvas.height = height;\n\n            // Draw the image to temp canvas\n            tempCtx.drawImage(image, 0, 0, width, height);\n\n            // Get image data to process transparency\n            const imageData = tempCtx.getImageData(0, 0, width, height);\n            const data = imageData.data;\n\n            // Remove background (make white/light colors transparent)\n            for (let i = 0; i < data.length; i += 4) {\n                const r = data[i]!;\n                const g = data[i + 1]!;\n                const b = data[i + 2]!;\n\n                // Check if pixel is close to white/background color\n                const brightness = (r + g + b) / 3;\n                const isBackground = brightness > 200 &&\n                    Math.abs(r - g) < 30 &&\n                    Math.abs(g - b) < 30 &&\n                    Math.abs(r - b) < 30;\n\n                if (isBackground) {\n                    data[i + 3] = 0; // Make transparent\n                }\n            }\n\n            // Put the processed data back\n            tempCtx.putImageData(imageData, 0, 0);\n\n            // Cache the processed canvas\n            this.processedImageCache.set(cacheKey, processedCanvas);\n        }\n\n        // Draw the cached processed image to main canvas\n        this.ctx.drawImage(processedCanvas, x, y);\n    }\n\n    private drawProjectiles(projectiles: Projectile[]): void {\n        projectiles.forEach(projectile => {\n            if (projectile.type === 'phaser' || projectile.type === 'enemy_phaser') {\n                this.drawPhaserBeam(projectile as PhaserBeam);\n            } else if (projectile.type === 'explosion') {\n                this.drawExplosionParticle(projectile as ExplosionParticle);\n            } else {\n                this.drawTorpedo(projectile as TorpedoProjectile);\n            }\n        });\n    }\n\n    private drawPhaserBeam(beam: PhaserBeam): void {\n        const elapsed = Date.now() - beam.startTime;\n        const alpha = 1 - (elapsed / beam.duration);\n\n        // Calculate current positions from ship references\n        const isEnemy = beam.shooterShip.isEnemy;\n        const startX = beam.shooterShip.x;\n        const startY = isEnemy ?\n            beam.shooterShip.y + beam.shooterShip.height / 2 :\n            beam.shooterShip.y - beam.shooterShip.height / 2;\n        const endX = beam.targetShip.x;\n        const endY = beam.targetShip.y;\n\n        // Use weapon's configured color instead of hardcoded colors\n        const color = beam.color || '#ff0000';\n\n        this.ctx.globalAlpha = alpha;\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 4;\n        this.ctx.shadowColor = color;\n        this.ctx.shadowBlur = 10;\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(startX, startY);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.stroke();\n\n        this.ctx.shadowBlur = 0;\n        this.ctx.globalAlpha = 1;\n    }\n\n    private drawExplosionParticle(particle: ExplosionParticle): void {\n        const alpha = particle.life / particle.maxLife;\n        this.ctx.globalAlpha = alpha;\n        this.ctx.fillStyle = `hsl(${30 + Math.random() * 30}, 100%, 50%)`;\n        this.ctx.fillRect(particle.x, particle.y, particle.size, particle.size);\n        this.ctx.globalAlpha = 1;\n    }\n\n    private drawTorpedo(projectile: TorpedoProjectile): void {\n        // Draw trail as small circles\n        if (projectile.trail) {\n            projectile.trail.forEach((point, index) => {\n                const alpha = index / projectile.trail.length * 0.5;\n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = projectile.color;\n\n                this.ctx.beginPath();\n                this.ctx.arc(point.x, point.y, 1.5, 0, Math.PI * 2);\n                this.ctx.fill();\n            });\n            this.ctx.globalAlpha = 1;\n        }\n\n        // Draw particles for quantum torpedoes\n        if (projectile.particles) {\n            projectile.particles.forEach(particle => {\n                const alpha = particle.life / particle.maxLife;\n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = projectile.color;\n\n                this.ctx.beginPath();\n                this.ctx.arc(particle.x, particle.y, 1, 0, Math.PI * 2);\n                this.ctx.fill();\n            });\n            this.ctx.globalAlpha = 1;\n        }\n\n        // Draw main projectile as a circle\n        this.ctx.fillStyle = projectile.color;\n        this.ctx.shadowColor = projectile.color;\n        this.ctx.shadowBlur = 10;\n\n        const radius = Math.max(projectile.width, projectile.height) / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(projectile.x, projectile.y, radius, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        // Add bright center glow\n        this.ctx.shadowBlur = 5;\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        this.ctx.beginPath();\n        this.ctx.arc(projectile.x, projectile.y, radius * 0.4, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        this.ctx.shadowBlur = 0;\n    }\n\n    private drawMissMessages(missMessages: MissMessage[]): void {\n        missMessages.forEach(message => {\n            const alpha = message.life / message.maxLife;\n\n            this.ctx.globalAlpha = alpha;\n            this.ctx.fillStyle = message.color;\n            this.ctx.font = `bold ${message.fontSize}px Courier New`;\n            this.ctx.textAlign = 'left';\n            this.ctx.shadowColor = message.color;\n            this.ctx.shadowBlur = 8;\n\n            this.ctx.fillText(message.text, message.x, message.y);\n\n            this.ctx.globalAlpha = 1;\n            this.ctx.shadowBlur = 0;\n            this.ctx.textAlign = 'left';\n        });\n    }\n\n    private drawShipExplosions(shipExplosions: ShipExplosion[]): void {\n        shipExplosions.forEach(explosion => {\n            explosion.particles.forEach(particle => {\n                const alpha = particle.life / particle.maxLife;\n\n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = particle.color || '#000000';\n                this.ctx.shadowColor = particle.color || '#000000';\n                this.ctx.shadowBlur = 8;\n\n                this.ctx.beginPath();\n                this.ctx.arc(particle.x, particle.y, particle.size || 0, 0, Math.PI * 2);\n                this.ctx.fill();\n\n                // Add bright center for dramatic effect\n                if (alpha > 0.5) {\n                    this.ctx.fillStyle = '#ffffff';\n                    this.ctx.globalAlpha = alpha * 0.8;\n                    this.ctx.beginPath();\n                    this.ctx.arc(particle.x, particle.y, particle.size || 0 * 0.4, 0, Math.PI * 2);\n                    this.ctx.fill();\n                }\n            });\n        });\n\n        this.ctx.globalAlpha = 1;\n        this.ctx.shadowBlur = 0;\n    }\n\n    private drawGameOverScreen(gameState: GameState): void {\n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n\n        // Game Over title\n        this.ctx.fillStyle = '#ff0000';\n        this.ctx.font = 'bold 48px Courier New';\n        this.ctx.textAlign = 'center';\n        this.ctx.shadowColor = '#ff0000';\n        this.ctx.shadowBlur = 15;\n        this.ctx.fillText(gameState.gameOverMessage, this.width / 2, this.height / 2 - 40);\n\n        // Subtitle\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.font = '24px Courier New';\n        this.ctx.shadowColor = '#ffffff';\n        this.ctx.shadowBlur = 8;\n        this.ctx.fillText(`Hull Integrity: ${gameState.playerShip.health}%`, this.width / 2, this.height / 2 + 20);\n        this.ctx.fillText(`Final Level Reached: ${gameState.level}`, this.width / 2, this.height / 2 + 60);\n\n        // Restart instruction\n        this.ctx.fillStyle = '#00ff00';\n        this.ctx.font = '20px Courier New';\n        this.ctx.shadowColor = '#00ff00';\n        this.ctx.shadowBlur = 10;\n        this.ctx.fillText('Click RESTART to begin new mission', this.width / 2, this.height / 2 + 120);\n\n        // Reset text styling\n        this.ctx.textAlign = 'left';\n        this.ctx.shadowBlur = 0;\n    }\n\n    // Update animations (call this every frame)\n    public update(): void {\n        this.updateStars();\n    }\n}\n","/**\n * GameUI - Handles UI updates and management\n */\nimport type { WeaponCallbacks, RepairCallbacks, GameCallbacks, GameState, ShipWeapon } from './types.js';\nimport { Ship } from './Ship.js';\nimport { WeaponSystem } from './WeaponSystem.js';\nimport { AssetManager } from './AssetManager.js';\n\nexport class GameUI {\n    public weaponCallbacks: WeaponCallbacks = {};\n    public repairCallbacks: RepairCallbacks = {};\n    public gameCallbacks: GameCallbacks = {};\n    private weaponListenersAdded: boolean = false;\n    private repairListenersAdded: boolean = false;\n    private gameListenersAdded: boolean = false;\n    private pauseListenerAdded: boolean = false;\n    private assetManager: AssetManager;\n    private playerShip: Ship | null = null;\n    private weaponSystem: WeaponSystem;\n\n    constructor(assetManager: AssetManager, weaponSystem: WeaponSystem) {\n        this.assetManager = assetManager;\n\n        this.initializeEventListeners();\n        this.weaponSystem = weaponSystem;\n    }\n\n    private initializeEventListeners(): void {\n        // These will be set by the main game class\n        this.weaponCallbacks = {};\n        this.repairCallbacks = {};\n        this.gameCallbacks = {};\n    }\n\n\n    // Update weapon configurations and UI based on player ship\n    public updateWeaponConfigs(playerShip: Ship): void {\n        // Store player ship reference\n        this.playerShip = playerShip;\n\n        // Update weapon UI to show ship's weapons\n        this.updateWeaponUI(playerShip.getWeapons());\n        // console.log('Updated weapon UI with ship weapons:', playerShip.getWeapons().map(w => w.name));\n    }\n\n    private updateWeaponUI(selectedWeapons: ShipWeapon[]): void {\n        const weaponsPanel = document.querySelector('.weapons-panel .weapon-section');\n        if (!weaponsPanel) return;\n\n        // Clear existing weapon buttons\n        weaponsPanel.innerHTML = '';\n\n        // Create weapon buttons for selected weapons\n        selectedWeapons.forEach(weapon => {\n            const weaponBtn = document.createElement('button');\n            weaponBtn.id = weapon.id + 'Btn';\n            weaponBtn.className = 'weapon-btn';\n\n            weaponBtn.innerHTML = `\n                <span class=\"weapon-name\">${weapon.name}</span>\n                <span class=\"weapon-status\">Ready</span>\n            `;\n\n            // Add click event listener\n            weaponBtn.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.weaponCallbacks.fire?.(weapon.templateId);\n            });\n\n            weaponsPanel.appendChild(weaponBtn);\n        });\n    }\n\n\n    public updateCreditDisplay(credits: number): void {\n        // Update all credit displays (now unified with same ID)\n        const creditAmountElements = document.querySelectorAll('#creditAmount');\n        creditAmountElements.forEach(element => {\n            element.textContent = credits.toString();\n        });\n    }\n\n    public hideMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.add('hidden');\n        }\n        document.body.classList.add('credit-display-hidden');\n    }\n\n    public showMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.remove('hidden');\n        }\n        document.body.classList.remove('credit-display-hidden');\n    }\n\n    // Set callback functions for weapon firing\n    public setWeaponCallbacks(callbacks: WeaponCallbacks): void {\n        this.weaponCallbacks = callbacks;\n\n        // Only add event listeners once\n        if (!this.weaponListenersAdded) {\n            const photonBtn = document.getElementById('photonBtn');\n            const phaserBtn = document.getElementById('phaserBtn');\n            const quantumBtn = document.getElementById('quantumBtn');\n\n            photonBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.fireWeapon('photon');\n            });\n            phaserBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.fireWeapon('phaser');\n            });\n            quantumBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.fireWeapon('quantum');\n            });\n\n            this.weaponListenersAdded = true;\n        }\n    }\n\n    // Set callback functions for repair actions\n    public setRepairCallbacks(callbacks: RepairCallbacks): void {\n        this.repairCallbacks = callbacks;\n\n        // Only add event listeners once\n        if (!this.repairListenersAdded) {\n            const repairHullBtn = document.getElementById('repairHullBtn');\n            const repairEnergyBtn = document.getElementById('repairEnergyBtn');\n\n            repairHullBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.showMathChallenge('hull');\n            });\n            repairEnergyBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.showMathChallenge('energy');\n            });\n\n            this.repairListenersAdded = true;\n        }\n    }\n\n    // Set callback functions for game actions\n    public setGameCallbacks(callbacks: GameCallbacks): void {\n        this.gameCallbacks = callbacks;\n\n        // Only add event listeners once\n        if (!this.gameListenersAdded) {\n            const restartBtn = document.getElementById('restartBtn');\n            const continueBtn = document.getElementById('continueBtn');\n            // Note: startGameBtn is handled by the main game.ts file, not here\n\n            restartBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.gameCallbacks.restart?.();\n                this.hideRestartButton();\n            });\n\n            continueBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.gameCallbacks.continue?.();\n                this.hideContinueButton();\n            });\n\n            this.gameListenersAdded = true;\n        }\n\n        // Add pause button listener\n        if (!this.pauseListenerAdded) {\n            const pauseBtn = document.getElementById('pauseBtn');\n            pauseBtn?.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                this.gameCallbacks.pause?.();\n            });\n            this.pauseListenerAdded = true;\n        }\n    }\n\n    private fireWeapon(weaponType: string): void {\n        this.weaponCallbacks.fire?.(weaponType);\n\n        // Add visual feedback\n        const button = document.getElementById(weaponType + 'Btn');\n        button?.classList.add('firing');\n        setTimeout(() => button?.classList.remove('firing'), 500);\n    }\n\n    private showMathChallenge(repairType: string): void {\n        this.repairCallbacks.show?.(repairType as 'hull' | 'energy');\n    }\n\n    // Update all UI elements\n    public updateUI(gameState: GameState): void {\n        this.updateHealthBars(gameState);\n        this.updateWeaponStatus(gameState.playerShip);\n        this.updateLevelDisplay(gameState.level);\n        this.updateEnemyLabel(gameState.level);\n    }\n\n    private updateHealthBars(gameState: GameState): void {\n        // Update player health bar\n        const hullBar = document.querySelector('.hull-integrity') as HTMLElement;\n        if (hullBar) {\n            hullBar.style.width = gameState.playerShip.health + '%';\n        }\n\n        // Update player energy bar\n        const energyBar = document.querySelector('.energy-reserves') as HTMLElement;\n        if (energyBar) {\n            const energyPercent = gameState.playerShip.getEnergyPercent();\n            energyBar.style.width = energyPercent + '%';\n        }\n\n        // Update enemy health bar\n        const enemyHealthBar = document.querySelector('.enemy-health') as HTMLElement;\n        if (enemyHealthBar) {\n            const enemyHealthPercent = gameState.enemyShip.getHealthPercent();\n            enemyHealthBar.style.width = enemyHealthPercent + '%';\n        }\n    }\n\n    private updateWeaponStatus(playerShip: Ship): void {\n        if (!this.playerShip) return;\n\n        this.playerShip.getWeapons().forEach(weapon => {\n            const button = document.getElementById(weapon.id + 'Btn');\n            const statusElement = button?.querySelector('.weapon-status') as HTMLElement;\n            const loadingBar = button?.querySelector('.weapon-loading-bar') as HTMLElement;\n\n            const isReady = this.weaponSystem!.haveEnoughEnergyFor(playerShip, weapon.id);\n            const loadingProgress = this.weaponSystem!.getWeaponLoadingProgress(playerShip, weapon.id);\n\n            if (isReady && statusElement && button) {\n                statusElement.textContent = 'Ready';\n                statusElement.style.color = '#00FF00';\n                statusElement.style.borderColor = '#00FF00';\n                statusElement.style.backgroundColor = 'rgba(0, 255, 0, 0.1)';\n                button.style.opacity = '1';\n                button.style.cursor = 'pointer';\n            } else if (statusElement && button) {\n                const loadingPercent = Math.round(loadingProgress * 100);\n                statusElement.textContent = `Loading ${loadingPercent}%`;\n                statusElement.style.color = '#FFAA00';\n                statusElement.style.borderColor = '#FFAA00';\n                statusElement.style.backgroundColor = 'rgba(255, 170, 0, 0.1)';\n                button.style.opacity = '0.8';\n                button.style.cursor = 'not-allowed';\n            }\n\n            // Update loading bar if it exists\n            if (loadingBar) {\n                loadingBar.style.width = `${loadingProgress * 100}%`;\n                if (isReady) {\n                    loadingBar.style.backgroundColor = '#00FF00';\n                } else {\n                    loadingBar.style.backgroundColor = '#FFAA00';\n                }\n            }\n\n            // Commented out energy-based logic - keeping for reference\n            // if (playerShip.hasEnergy(weapon.energyCost) && statusElement && button) {\n            //     statusElement.textContent = 'Ready';\n            //     statusElement.style.color = '#00FF00';\n            //     statusElement.style.borderColor = '#00FF00';\n            //     statusElement.style.backgroundColor = 'rgba(0, 255, 0, 0.1)';\n            //     button.style.opacity = '1';\n            //     button.style.cursor = 'pointer';\n            // } else if (statusElement && button) {\n            //     statusElement.textContent = 'No Energy';\n            //     statusElement.style.color = '#FF4444';\n            //     statusElement.style.borderColor = '#FF4444';\n            //     statusElement.style.backgroundColor = 'rgba(255, 68, 68, 0.1)';\n            //     button.style.opacity = '0.6';\n            //     button.style.cursor = 'not-allowed';\n            // }\n        });\n    }\n\n    private updateLevelDisplay(_level: number): void {\n        const levelNumber = document.querySelector('.level-number');\n        if (levelNumber) {\n            levelNumber.textContent = '1'; // Always show 1 since we removed levels\n        }\n    }\n\n    private updateEnemyLabel(_level: number): void {\n        const enemyLabel = document.querySelector('.enemy-label');\n        if (enemyLabel) {\n            enemyLabel.textContent = 'Enemy:';\n        }\n    }\n\n    // Screen management\n    public showStartupScreen(): void {\n        const startupScreen = document.getElementById('startupScreen') as HTMLElement;\n        const gameContainer = document.getElementById('gameContainer') as HTMLElement;\n\n        if (startupScreen) startupScreen.style.display = 'flex';\n        if (gameContainer) gameContainer.style.display = 'none';\n\n        // Hide main credit display on startup screen\n        this.hideMainCreditDisplay();\n    }\n\n    public showGameScreen(): void {\n        const startupScreen = document.getElementById('startupScreen') as HTMLElement;\n        const gameContainer = document.getElementById('gameContainer') as HTMLElement;\n\n        if (startupScreen) startupScreen.style.display = 'none';\n        if (gameContainer) gameContainer.style.display = 'flex';\n\n        // Hide main credit display on battle screen\n        this.hideMainCreditDisplay();\n    }\n\n    // Button visibility management\n    public showRestartButton(): void {\n        const restartContainer = document.getElementById('restartContainer');\n        if (restartContainer) {\n            restartContainer.style.display = 'block';\n        }\n    }\n\n    public hideRestartButton(): void {\n        const restartContainer = document.getElementById('restartContainer');\n        if (restartContainer) {\n            restartContainer.style.display = 'none';\n        }\n    }\n\n    public showContinueButton(): void {\n        const continueContainer = document.getElementById('continueContainer');\n        if (continueContainer) {\n            continueContainer.style.display = 'block';\n        }\n    }\n\n    public hideContinueButton(): void {\n        const continueContainer = document.getElementById('continueContainer');\n        if (continueContainer) {\n            continueContainer.style.display = 'none';\n        }\n    }\n\n    public updatePauseButton(isPaused: boolean): void {\n        const pauseBtn = document.getElementById('pauseBtn');\n        const pauseText = pauseBtn?.querySelector('.pause-text') as HTMLElement;\n\n        if (pauseBtn && pauseText) {\n            if (isPaused) {\n                pauseBtn.classList.add('paused');\n                pauseText.textContent = 'RESUME';\n            } else {\n                pauseBtn.classList.remove('paused');\n                pauseText.textContent = 'PAUSE';\n            }\n        }\n    }\n\n    // Panel management\n    private showWeaponsPanel(): void {\n        const weaponsPanel = document.querySelector('.weapons-panel') as HTMLElement;\n        if (weaponsPanel) {\n            weaponsPanel.style.display = 'block';\n        }\n    }\n\n    private showGameControlsPanel(): void {\n        const gameControlsPanel = document.querySelector('.game-controls-panel') as HTMLElement;\n        if (gameControlsPanel) {\n            gameControlsPanel.style.display = 'block';\n        }\n    }\n\n    // Reset UI to initial state\n    public reset(): void {\n        this.hideRestartButton();\n        this.hideContinueButton();\n        this.showWeaponsPanel();\n        this.showGameControlsPanel();\n        this.updateLevelDisplay(1);\n        this.updateEnemyLabel(1);\n\n        // Reset health bars to full\n        const hullBar = document.querySelector('.hull-integrity') as HTMLElement;\n        const energyBar = document.querySelector('.energy-reserves') as HTMLElement;\n        const enemyHealthBar = document.querySelector('.enemy-health') as HTMLElement;\n\n        if (hullBar) hullBar.style.width = '100%';\n        if (energyBar) energyBar.style.width = '100%';\n        if (enemyHealthBar) enemyHealthBar.style.width = '100%';\n    }\n}\n","/**\n * Router - Handles navigation between different game pages\n */\nexport type Route = 'startup' | 'game' | 'settings' | 'about' | 'map' | 'ship-selection' | 'weapon-selection';\n\nexport interface RouteHandler {\n    onEnter?: () => void;\n    onExit?: () => void;\n    onUpdate?: () => void;\n}\n\nexport class GameRouter {\n    private currentRoute: Route = 'startup';\n    private routes: Map<Route, RouteHandler> = new Map();\n    private routeHistory: Route[] = ['startup'];\n\n    constructor() {\n        this.initializeRoutes();\n    }\n\n    private initializeRoutes(): void {\n        // Initialize all routes with default handlers\n        this.routes.set('startup', {});\n        this.routes.set('game', {});\n        this.routes.set('settings', {});\n        this.routes.set('about', {});\n        this.routes.set('map', {});\n        this.routes.set('ship-selection', {});\n        this.routes.set('weapon-selection', {});\n    }\n\n    /**\n     * Register a route handler\n     */\n    public registerRoute(route: Route, handler: RouteHandler): void {\n        this.routes.set(route, handler);\n    }\n\n    /**\n     * Navigate to a specific route\n     */\n    public navigate(route: Route): void {\n        if (route === this.currentRoute) return;\n\n        // Exit current route\n        const currentHandler = this.routes.get(this.currentRoute);\n        currentHandler?.onExit?.();\n\n        // Update route history\n        this.routeHistory.push(route);\n        if (this.routeHistory.length > 10) {\n            this.routeHistory.shift(); // Keep history manageable\n        }\n\n        // Set new route\n        this.currentRoute = route;\n\n        // Enter new route\n        const newHandler = this.routes.get(route);\n        newHandler?.onEnter?.();\n\n        // Update URL hash\n        window.location.hash = route;\n\n        console.log(`Navigated to: ${route}`);\n    }\n\n    /**\n     * Navigate back to previous route\n     */\n    public goBack(): void {\n        if (this.routeHistory.length > 1) {\n            this.routeHistory.pop(); // Remove current route\n            const previousRoute = this.routeHistory[this.routeHistory.length - 1];\n            if (previousRoute) {\n                this.navigate(previousRoute);\n            }\n        }\n    }\n\n    /**\n     * Get current route\n     */\n    public getCurrentRoute(): Route {\n        return this.currentRoute;\n    }\n\n    /**\n     * Check if currently on a specific route\n     */\n    public isOnRoute(route: Route): boolean {\n        return this.currentRoute === route;\n    }\n\n    /**\n     * Update current route (call this in game loop if needed)\n     */\n    public update(): void {\n        const currentHandler = this.routes.get(this.currentRoute);\n        currentHandler?.onUpdate?.();\n    }\n\n    /**\n     * Initialize router with URL hash\n     */\n    public initializeFromHash(): void {\n        const hash = window.location.hash.slice(1) as Route;\n\n        // If page was refreshed and we're not on startup, redirect to startup\n        // This prevents issues with incomplete game state on refresh\n        if (hash && hash !== 'startup' && this.routes.has(hash)) {\n            console.log(`Page refreshed on ${hash} route, redirecting to startup`);\n            this.navigate('startup');\n        } else if (hash && this.routes.has(hash)) {\n            this.navigate(hash);\n        } else {\n            this.navigate('startup');\n        }\n    }\n\n    /**\n     * Get route history\n     */\n    public getHistory(): Route[] {\n        return [...this.routeHistory];\n    }\n}\n","/**\n * GameSettings - Manages game configuration and user preferences\n */\n\nimport { Faction } from './types';\n\nexport interface GameSettings {\n    // Audio settings\n    masterVolume: number;\n    musicVolume: number;\n    sfxVolume: number;\n\n    // Graphics settings\n    particleEffects: boolean;\n    screenShake: boolean;\n    fullscreen: boolean;\n\n    // Gameplay settings\n    difficulty: 'easy' | 'normal' | 'hard';\n    autoSave: boolean;\n    showFPS: boolean;\n\n    // Control settings\n    keyBindings: Record<string, string>;\n\n    // UI settings\n    uiScale: number;\n    theme: 'classic' | 'modern' | 'dark';\n\n    // Faction settings\n    selectedFaction: Faction;\n}\n\nexport interface ShipType {\n    id: string;\n    name: string;\n    description: string;\n    maxHealth: number;\n    maxEnergy: number;\n    speed: number;\n    image: string;\n    unlocked: boolean;\n    cost?: number;\n    weaponSlots: number;\n    faction: Faction;\n}\n\nexport interface WeaponType {\n    id: string;\n    name: string;\n    description: string;\n    damage: number;\n    energyCost: number;\n    faction: Faction;\n    cost?: number;\n    unlocked: boolean;\n    // Asset properties\n    soundFile: string;\n    projectileImage?: string;\n    projectileColor: string;\n    projectileSize: { width: number; height: number };\n    // Weapon behavior properties\n    projectileSpeed: number;\n    projectileLifetime: number;\n    isInstantHit: boolean;\n    hasParticles: boolean;\n    useCircularArc: boolean;\n    // Loading properties\n    maxEnergy: number;\n    currentEnergy: number;\n    loadingTime: number;\n}\n\nexport interface SpaceLocation {\n    id: string;\n    name: string;\n    description: string;\n    x: number;\n    y: number;\n    unlocked: boolean;\n    hasEncounter: boolean;\n    encounterType?: 'battle' | 'trade' | 'exploration';\n}\n\nexport interface ExplosionSound {\n    id: string;\n    soundFile: string;\n    volume: number;\n}\n\nexport class GameSettingsManager {\n    private settings: GameSettings;\n    private selectedShip: ShipType | null = null;\n    private selectedWeapons: WeaponType[] = [];\n    private currentLocation: SpaceLocation | null = null;\n    private unlockedShips: Set<string> = new Set(['federation-cruiser']);\n    private unlockedWeapons: Set<string> = new Set(['phaser', 'photon', 'quantum']);\n    private unlockedLocations: Set<string> = new Set(['earth-orbit']);\n\n    constructor() {\n        this.settings = this.getDefaultSettings();\n        this.loadSettings();\n        this.initializeDefaultSelections();\n    }\n\n    private getDefaultSettings(): GameSettings {\n        return {\n            masterVolume: 0.8,\n            musicVolume: 0.7,\n            sfxVolume: 0.9,\n            particleEffects: true,\n            screenShake: true,\n            fullscreen: false,\n            difficulty: 'normal',\n            autoSave: true,\n            showFPS: false,\n            keyBindings: {\n                'move-left': 'ArrowLeft',\n                'move-right': 'ArrowRight',\n                'fire-phaser': 'Space',\n                'fire-photon': 'KeyP',\n                'fire-quantum': 'KeyQ',\n                'repair-hull': 'KeyH',\n                'repair-energy': 'KeyE'\n            },\n            uiScale: 1.0,\n            theme: 'classic',\n            selectedFaction: 'federation'\n        };\n    }\n\n    private initializeDefaultSelections(): void {\n        // Set default ship if none selected\n        if (!this.selectedShip) {\n            const availableShips = this.getAvailableShips();\n            this.selectedShip = availableShips.length > 0 ? availableShips[0]! : null;\n        }\n\n        // Set default weapons if none selected\n        if (this.selectedWeapons.length === 0) {\n            const maxWeapons = this.selectedShip?.weaponSlots || 3;\n            this.selectedWeapons = this.getAvailableWeapons().slice(0, maxWeapons);\n        }\n\n        // Set default location if none selected\n        if (!this.currentLocation) {\n            const availableLocations = this.getAvailableLocations();\n            this.currentLocation = availableLocations.length > 0 ? availableLocations[0]! : null;\n        }\n    }\n\n    // Settings management\n    public getSettings(): GameSettings {\n        return { ...this.settings };\n    }\n\n    public updateSettings(newSettings: Partial<GameSettings>): void {\n        this.settings = { ...this.settings, ...newSettings };\n        this.saveSettings();\n    }\n\n    public resetSettings(): void {\n        this.settings = this.getDefaultSettings();\n        this.saveSettings();\n    }\n\n    public resetAllData(): void {\n        // Reset to default unlocked items only\n        this.unlockedShips = new Set(['federation-cruiser']);\n        this.unlockedWeapons = new Set(['phaser', 'photon', 'quantum']);\n        this.unlockedLocations = new Set(['earth-orbit']);\n        this.selectedShip = null;\n        this.selectedWeapons = [];\n        this.currentLocation = null;\n        this.settings = this.getDefaultSettings();\n        this.saveSettings();\n        console.log('Reset all data to defaults');\n\n        // Re-initialize default selections after reset\n        this.initializeDefaultSelections();\n    }\n\n    // Faction management\n    public getSelectedFaction(): Faction {\n        return this.settings.selectedFaction;\n    }\n\n    public setSelectedFaction(faction: Faction): void {\n        this.settings.selectedFaction = faction;\n        this.saveSettings();\n    }\n\n    public getEnemyShipType(): ShipType | null {\n        // Return the first Romulan ship as the default enemy ship\n        const romulanShips = this.getAllShips().filter(ship => ship.faction === 'romulan');\n        return romulanShips.length > 0 ? romulanShips[0]! : null;\n    }\n\n    // Ship management\n    public getAvailableShips(): ShipType[] {\n        return this.getAllShips().filter(ship => ship.unlocked && ship.faction === this.getSelectedFaction());\n    }\n\n    public getAllShips(): ShipType[] {\n        const ships = [\n            {\n                id: 'federation-cruiser',\n                name: 'Federation Cruiser',\n                description: 'Standard Starfleet vessel with balanced stats',\n                maxHealth: 100,\n                maxEnergy: 100,\n                speed: 1.0,\n                image: 'player-ship.png',\n                unlocked: true,\n                weaponSlots: 3,\n                faction: 'federation' as const\n            },\n            {\n                id: 'defiant-class',\n                name: 'Defiant Class',\n                description: 'Heavily armed warship with high damage output',\n                maxHealth: 80,\n                maxEnergy: 120,\n                speed: 1.2,\n                image: 'defiant-ship.png',\n                unlocked: false,\n                cost: 1000,\n                weaponSlots: 4,\n                faction: 'federation' as const\n            },\n            {\n                id: 'sovereign-class',\n                name: 'Sovereign Class',\n                description: 'Large exploration vessel with high health',\n                maxHealth: 150,\n                maxEnergy: 90,\n                speed: 0.8,\n                image: 'sovereign-ship.png',\n                unlocked: false,\n                cost: 1500,\n                weaponSlots: 5,\n                faction: 'federation' as const\n            },\n            {\n                id: 'romulan-warbird',\n                name: 'Romulan Warbird',\n                description: 'Stealthy Romulan vessel with advanced technology',\n                maxHealth: 90,\n                maxEnergy: 110,\n                speed: 1.1,\n                image: 'romulan-warbird.png',\n                unlocked: false,\n                cost: 1200,\n                weaponSlots: 4,\n                faction: 'romulan' as const\n            },\n            {\n                id: 'klingon-bird-of-prey',\n                name: 'Klingon Bird of Prey',\n                description: 'Fast and agile Klingon vessel with high damage output',\n                maxHealth: 100,\n                maxEnergy: 120,\n                speed: 1.3,\n                image: 'klingon-bird-of-prey.png',\n                unlocked: false,\n                cost: 1200,\n                weaponSlots: 4,\n                faction: 'klingon' as const\n            }\n        ];\n\n        // Update unlocked status based on unlockedShips set\n        const result = ships.map(ship => ({\n            ...ship,\n            unlocked: this.unlockedShips.has(ship.id)\n        }));\n\n        // console.log('getAllShips - unlockedShips Set:', Array.from(this.unlockedShips));\n        // console.log('getAllShips - result:', result.map(s => ({ id: s.id, unlocked: s.unlocked })));\n\n        return result;\n    }\n\n    public getShipById(shipId: string): ShipType | null {\n        return this.getAllShips().find(s => s.id === shipId) || null;\n    }\n\n    public getEnemyShips(): ShipType[] {\n        return this.getAllShips().filter(s => s.faction !== this.getSelectedFaction());\n    }\n\n    public getEnemyWeapons(faction: Faction): WeaponType[] {\n        // Get weapons appropriate for the enemy faction (including locked ones for enemies)\n        const allWeapons = this.getAllWeapons();\n        const factionWeapons = allWeapons.filter(weapon => weapon.faction === faction);\n\n        // Return up to 2 faction-appropriate weapons\n        return factionWeapons.slice(0, 2);\n    }\n\n    public selectShip(shipId: string): boolean {\n        const ship = this.getAllShips().find(s => s.id === shipId);\n        if (ship && this.unlockedShips.has(shipId)) {\n            this.selectedShip = ship;\n            this.saveSettings();\n            return true;\n        }\n        return false;\n    }\n\n    public getSelectedShip(): ShipType | null {\n        return this.selectedShip;\n    }\n\n    public unlockShip(shipId: string): void {\n        this.unlockedShips.add(shipId);\n        console.log('Unlocked ship:', shipId);\n        console.log('Current unlocked ships:', Array.from(this.unlockedShips));\n        // Don't save settings - ship unlocks reset on refresh\n    }\n\n    public clearSelectedShip(): void {\n        this.selectedShip = null;\n        this.saveSettings();\n    }\n\n    // Weapon management\n    public getAvailableWeapons(): WeaponType[] {\n        return this.getAllWeapons().filter(weapon => this.unlockedWeapons.has(weapon.id) && weapon.faction === this.getSelectedFaction());\n    }\n\n    __cachedWeapons: WeaponType[] = [];\n    public getAllWeapons(): WeaponType[] {\n        if (this.__cachedWeapons.length > 0) {\n            return this.__cachedWeapons;\n        }\n        const weapons = [\n            // Federation Weapons\n            {\n                id: 'phaser',\n                name: 'Phaser Array',\n                description: 'Standard energy weapon with moderate damage',\n                damage: 15,\n                energyCost: 10,\n                unlocked: true,\n                soundFile: 'phasers.mp3',\n                projectileColor: '#ff0000',\n                projectileSize: { width: 4, height: 15 },\n                projectileSpeed: 8,\n                projectileLifetime: 200,\n                isInstantHit: true,\n                hasParticles: false,\n                useCircularArc: false,\n                faction: 'federation' as const,\n                maxEnergy: 20,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            {\n                id: 'photon',\n                name: 'Photon Torpedo',\n                description: 'High damage projectile weapon',\n                damage: 25,\n                energyCost: 25,\n                unlocked: true,\n                soundFile: 'photon_torpedo.mp3',\n                projectileColor: '#ff0000',\n                projectileSize: { width: 4, height: 15 },\n                projectileSpeed: 6,\n                projectileLifetime: 1000,\n                isInstantHit: false,\n                hasParticles: false,\n                useCircularArc: true,\n                faction: 'federation' as const,\n                maxEnergy: 25,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            {\n                id: 'quantum',\n                name: 'Quantum Torpedo',\n                description: 'Advanced torpedo with highest damage',\n                damage: 35,\n                energyCost: 50,\n                unlocked: true,\n                soundFile: 'quantum_torpedo.mp3',\n                projectileColor: '#ffffff',\n                projectileSize: { width: 6, height: 20 },\n                projectileSpeed: 5,\n                projectileLifetime: 1200,\n                isInstantHit: false,\n                hasParticles: true,\n                useCircularArc: true,\n                faction: 'federation' as const,\n                maxEnergy: 50,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            {\n                id: 'pulse-phaser',\n                name: 'Pulse Phaser',\n                description: 'Rapid-fire phaser with lower damage',\n                damage: 8,\n                energyCost: 5,\n                unlocked: false,\n                cost: 500,\n                soundFile: 'phasers.mp3',\n                projectileColor: '#ff8800',\n                projectileSize: { width: 3, height: 12 },\n                projectileSpeed: 10,\n                projectileLifetime: 150,\n                isInstantHit: false,\n                hasParticles: false,\n                useCircularArc: false,\n                faction: 'federation' as const,\n                maxEnergy: 5,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            {\n                id: 'plasma-torpedo',\n                name: 'Plasma Torpedo',\n                description: 'Alien technology with unique properties',\n                damage: 30,\n                energyCost: 40,\n                unlocked: false,\n                cost: 800,\n                soundFile: 'romulan_torpedo.mp3',\n                projectileColor: '#ff00ff',\n                projectileSize: { width: 5, height: 18 },\n                projectileSpeed: 4,\n                projectileLifetime: 1500,\n                isInstantHit: false,\n                hasParticles: true,\n                useCircularArc: true,\n                faction: 'federation' as const,\n                maxEnergy: 40,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            // Romulan Weapons\n            {\n                id: 'romulan-disruptor',\n                name: 'Romulan Disruptor',\n                description: 'Romulan energy weapon with green energy bolts',\n                damage: 18,\n                energyCost: 12,\n                unlocked: false,\n                cost: 600,\n                soundFile: 'romulan_disruptor.mp3',\n                projectileColor: '#00ff00',\n                projectileSize: { width: 4, height: 15 },\n                projectileSpeed: 7,\n                projectileLifetime: 180,\n                isInstantHit: true,\n                hasParticles: false,\n                useCircularArc: false,\n                faction: 'romulan' as const,\n                maxEnergy: 12,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            {\n                id: 'romulan-torpedo',\n                name: 'Romulan Torpedo',\n                description: 'Romulan projectile weapon with high damage',\n                damage: 28,\n                energyCost: 30,\n                unlocked: false,\n                cost: 700,\n                soundFile: 'romulan_torpedo.mp3',\n                projectileColor: '#00ff00',\n                projectileSize: { width: 5, height: 18 },\n                projectileSpeed: 5,\n                projectileLifetime: 1100,\n                isInstantHit: false,\n                hasParticles: true,\n                useCircularArc: true,\n                faction: 'romulan' as const,\n                maxEnergy: 30,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            // Klingon Weapons\n            {\n                id: 'klingon-disruptor',\n                name: 'Klingon Disruptor',\n                description: 'Klingon energy weapon with green energy bolts',\n                damage: 18,\n                energyCost: 12,\n                unlocked: false,\n                cost: 600,\n                soundFile: 'klingon_disruptor4.mp3',\n                projectileColor: '#ffee00',\n                projectileSize: { width: 4, height: 15 },\n                projectileSpeed: 7,\n                projectileLifetime: 180,\n                isInstantHit: true,\n                hasParticles: false,\n                useCircularArc: false,\n                faction: 'klingon' as const,\n                maxEnergy: 12,\n                currentEnergy: 0,\n                loadingTime: 2000\n            },\n            {\n                id: 'klingon-torpedo',\n                name: 'Klingon Torpedo',\n                description: 'Klingon projectile weapon with high damage',\n                damage: 28,\n                energyCost: 30,\n                unlocked: false,\n                cost: 700,\n                soundFile: 'klingon_torpedo.mp3',\n                projectileColor: '#ff4000',\n                projectileSize: { width: 5, height: 18 },\n                projectileSpeed: 5,\n                projectileLifetime: 1100,\n                isInstantHit: false,\n                hasParticles: true,\n                useCircularArc: true,\n                faction: 'klingon' as const,\n                maxEnergy: 30,\n                currentEnergy: 0,\n                loadingTime: 2000\n            }\n        ];\n\n        // Update unlocked status based on unlockedWeapons set\n        weapons.forEach(weapon => {\n            weapon.unlocked = this.unlockedWeapons.has(weapon.id);\n        });\n\n        this.__cachedWeapons = weapons;\n\n        return weapons;\n    }\n\n    // Get weapon templates by IDs (for creating weapon instances)\n    public getWeaponTemplatesByIds(weaponIds: string[]): WeaponType[] {\n        const availableWeapons = this.getAvailableWeapons();\n        return weaponIds\n            .map(id => availableWeapons.find(w => w.id === id))\n            .filter((weapon): weapon is WeaponType => weapon !== undefined);\n    }\n\n    public selectWeapons(weaponIds: string[]): boolean {\n        const availableWeapons = this.getAvailableWeapons();\n        const selectedWeapons = weaponIds\n            .map(id => availableWeapons.find(w => w.id === id))\n            .filter((weapon): weapon is WeaponType => weapon !== undefined);\n\n        const maxWeapons = this.selectedShip?.weaponSlots || 3;\n        if (selectedWeapons.length === weaponIds.length && selectedWeapons.length <= maxWeapons) {\n            this.selectedWeapons = selectedWeapons;\n            this.saveSettings();\n            return true;\n        }\n        return false;\n    }\n\n    public getSelectedWeapons(): WeaponType[] {\n        return this.selectedWeapons;\n    }\n\n    public unlockWeapon(weaponId: string): void {\n        this.unlockedWeapons.add(weaponId);\n        // Clear cached weapons to force refresh\n        this.__cachedWeapons = [];\n        console.log('Unlocked weapon:', weaponId);\n        console.log('Current unlocked weapons:', Array.from(this.unlockedWeapons));\n        // Don't save settings - weapon unlocks reset on refresh\n    }\n\n    public clearSelectedWeapons(): void {\n        this.selectedWeapons = [];\n        this.saveSettings();\n    }\n\n    // Location management\n    public getAvailableLocations(): SpaceLocation[] {\n        return this.getAllLocations().filter(location => this.unlockedLocations.has(location.id));\n    }\n\n    public getAllLocations(): SpaceLocation[] {\n        return [\n            {\n                id: 'earth-orbit',\n                name: 'Earth Orbit',\n                description: 'Home base of Starfleet operations',\n                x: 400,\n                y: 300,\n                unlocked: true,\n                hasEncounter: false\n            },\n            {\n                id: 'klingon-border',\n                name: 'Klingon Border',\n                description: 'Dangerous territory with hostile encounters',\n                x: 200,\n                y: 150,\n                unlocked: false,\n                hasEncounter: true,\n                encounterType: 'battle'\n            },\n            {\n                id: 'romulan-neutral-zone',\n                name: 'Romulan Neutral Zone',\n                description: 'Forbidden space with mysterious encounters',\n                x: 600,\n                y: 200,\n                unlocked: false,\n                hasEncounter: true,\n                encounterType: 'battle'\n            },\n            {\n                id: 'ferengi-trading-post',\n                name: 'Ferengi Trading Post',\n                description: 'Commercial hub for ship upgrades',\n                x: 300,\n                y: 450,\n                unlocked: false,\n                hasEncounter: true,\n                encounterType: 'trade'\n            },\n            {\n                id: 'unknown-sector',\n                name: 'Unknown Sector',\n                description: 'Unexplored space with potential discoveries',\n                x: 500,\n                y: 100,\n                unlocked: false,\n                hasEncounter: true,\n                encounterType: 'exploration'\n            }\n        ];\n    }\n\n    public selectLocation(locationId: string): boolean {\n        const location = this.getAllLocations().find(l => l.id === locationId);\n        if (location && this.unlockedLocations.has(locationId)) {\n            this.currentLocation = location;\n            this.saveSettings();\n            return true;\n        }\n        return false;\n    }\n\n    public getCurrentLocation(): SpaceLocation | null {\n        return this.currentLocation;\n    }\n\n    public unlockLocation(locationId: string): void {\n        this.unlockedLocations.add(locationId);\n        this.saveSettings();\n    }\n\n    // Asset management methods\n    public getExplosionSounds(): ExplosionSound[] {\n        return [\n            {\n                id: 'explosion1',\n                soundFile: 'smallexplosion1.mp3',\n                volume: 0.3\n            },\n            {\n                id: 'explosion2',\n                soundFile: 'smallexplosion2.mp3',\n                volume: 0.3\n            }\n        ];\n    }\n\n    public getWeaponSoundFile(weaponId: string): string | null {\n        const weapon = this.getAllWeapons().find(w => w.id === weaponId);\n        if (!weapon) return null;\n\n        return weapon.soundFile;\n    }\n\n    public getWeaponProperties(weaponId: string): Partial<WeaponType> | null {\n        const weapon = this.getAllWeapons().find(w => w.id === weaponId);\n        if (!weapon) return null;\n\n        return {\n            projectileColor: weapon.projectileColor,\n            projectileSize: weapon.projectileSize,\n            projectileSpeed: weapon.projectileSpeed,\n            projectileLifetime: weapon.projectileLifetime,\n            isInstantHit: weapon.isInstantHit,\n            hasParticles: weapon.hasParticles,\n            useCircularArc: weapon.useCircularArc\n        };\n    }\n\n    // Get weapon template by ID (for creating weapon instances)\n    public getWeaponTemplateById(weaponId: string): WeaponType | null {\n        return this.getAllWeapons().find(w => w.id === weaponId) || null;\n    }\n\n    // Persistence\n    private saveSettings(): void {\n        const data = {\n            settings: this.settings,\n            selectedShip: this.selectedShip?.id,\n            selectedWeapons: this.selectedWeapons.map(w => w.id),\n            currentLocation: this.currentLocation?.id,\n            // Don't persist unlocked ships/weapons - they reset on refresh\n            // unlockedShips: Array.from(this.unlockedShips),\n            // unlockedWeapons: Array.from(this.unlockedWeapons),\n            unlockedLocations: Array.from(this.unlockedLocations)\n        };\n\n        try {\n            localStorage.setItem('starTrekGameSettings', JSON.stringify(data));\n        } catch (error) {\n            console.warn('Failed to save settings:', error);\n        }\n    }\n\n    private loadSettings(): void {\n        try {\n            const data = localStorage.getItem('starTrekGameSettings');\n            if (data) {\n                const parsed = JSON.parse(data);\n\n                if (parsed.settings) {\n                    this.settings = { ...this.getDefaultSettings(), ...parsed.settings };\n                }\n\n                // Load selected ship\n                if (parsed.selectedShip) {\n                    const ship = this.getShipById(parsed.selectedShip);\n                    if (ship && ship.unlocked && ship.faction === this.settings.selectedFaction) {\n                        this.selectedShip = ship;\n                    }\n                }\n\n                // Load selected weapons\n                if (parsed.selectedWeapons && Array.isArray(parsed.selectedWeapons)) {\n                    const weapons = parsed.selectedWeapons\n                        .map((id: string) => this.getAllWeapons().find(w => w.id === id))\n                        .filter((weapon: WeaponType | undefined): weapon is WeaponType =>\n                            weapon !== undefined &&\n                            weapon.unlocked &&\n                            weapon.faction === this.settings.selectedFaction\n                        );\n                    this.selectedWeapons = weapons;\n                }\n\n                // Load current location\n                if (parsed.currentLocation) {\n                    const location = this.getAllLocations().find(l => l.id === parsed.currentLocation);\n                    if (location && this.unlockedLocations.has(location.id)) {\n                        this.currentLocation = location;\n                    }\n                }\n\n                // Don't load unlocked ships/weapons - they reset on refresh\n                // if (parsed.unlockedShips) {\n                //     this.unlockedShips = new Set(parsed.unlockedShips);\n                // }\n\n                // if (parsed.unlockedWeapons) {\n                //     this.unlockedWeapons = new Set(parsed.unlockedWeapons);\n                // }\n\n                if (parsed.unlockedLocations) {\n                    this.unlockedLocations = new Set(parsed.unlockedLocations);\n                }\n            }\n        } catch (error) {\n            console.warn('Failed to load settings:', error);\n        }\n    }\n}\n","/**\n * Modal Service for Star Trek Game\n * Provides modal dialogs to replace browser alerts and confirms\n */\n\nimport { AssetManager } from './AssetManager.js';\n\nexport class ModalService {\n    private modalContainer: HTMLElement | null = null;\n    private currentModal: HTMLElement | null = null;\n    private assetManager: AssetManager;\n\n    constructor(assetManager: AssetManager) {\n        this.assetManager = assetManager;\n        this.initializeModalContainer();\n    }\n\n    private initializeModalContainer(): void {\n        // Create modal container if it doesn't exist\n        this.modalContainer = document.getElementById('modal-container');\n        if (!this.modalContainer) {\n            this.modalContainer = document.createElement('div');\n            this.modalContainer.id = 'modal-container';\n            this.modalContainer.className = 'modal-container';\n            document.body.appendChild(this.modalContainer);\n        }\n    }\n\n    /**\n     * Show a simple modal with an OK button\n     * @param message The message to display\n     * @returns Promise that resolves when the modal is closed\n     */\n    public async showModal(message: string): Promise<void> {\n        return new Promise((resolve) => {\n            this.createModal(message, [\n                {\n                    text: 'OK',\n                    action: () => {\n                        this.closeModal();\n                        resolve();\n                    },\n                    primary: true\n                }\n            ]);\n        });\n    }\n\n    /**\n     * Show a confirmation modal with Yes/No buttons\n     * @param message The message to display\n     * @returns Promise that resolves to true if Yes is clicked, false if No is clicked\n     */\n    public async showConfirmation(message: string): Promise<boolean> {\n        return new Promise((resolve) => {\n            this.createModal(message, [\n                {\n                    text: 'No',\n                    action: () => {\n                        this.closeModal();\n                        resolve(false);\n                    },\n                    primary: false\n                },\n                {\n                    text: 'Yes',\n                    action: () => {\n                        this.closeModal();\n                        resolve(true);\n                    },\n                    primary: true\n                }\n            ]);\n        });\n    }\n\n    private createModal(message: string, buttons: Array<{ text: string, action: () => void, primary: boolean }>): void {\n        // Close any existing modal\n        this.closeModal();\n\n        // Create modal overlay\n        const overlay = document.createElement('div');\n        overlay.className = 'modal-overlay';\n\n        // Create modal content\n        const modal = document.createElement('div');\n        modal.className = 'modal-dialog';\n\n        // Create message\n        const messageElement = document.createElement('div');\n        messageElement.className = 'modal-message';\n        messageElement.textContent = message;\n\n        // Create button container\n        const buttonContainer = document.createElement('div');\n        buttonContainer.className = 'modal-buttons';\n\n        // Create buttons\n        buttons.forEach(buttonConfig => {\n            const button = document.createElement('button');\n            button.className = `modal-button ${buttonConfig.primary ? 'primary' : 'secondary'}`;\n            button.textContent = buttonConfig.text;\n            button.addEventListener('click', () => {\n                this.assetManager.playUIClickSound();\n                buttonConfig.action();\n            });\n            buttonContainer.appendChild(button);\n        });\n\n        // Assemble modal\n        modal.appendChild(messageElement);\n        modal.appendChild(buttonContainer);\n        overlay.appendChild(modal);\n\n        // Add to container\n        this.modalContainer!.appendChild(overlay);\n        this.currentModal = overlay;\n\n        // Add escape key handler\n        const escapeHandler = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                // For confirmation modals, treat escape as \"No\"\n                if (buttons.length === 2) {\n                    buttons[0]?.action(); // First button is usually \"No\"\n                } else {\n                    buttons[0]?.action(); // For single button modals, just close\n                }\n                document.removeEventListener('keydown', escapeHandler);\n            }\n        };\n        document.addEventListener('keydown', escapeHandler);\n\n        // Focus the primary button\n        const primaryButton = modal.querySelector('.modal-button.primary') as HTMLButtonElement;\n        if (primaryButton) {\n            primaryButton.focus();\n        }\n    }\n\n    private closeModal(): void {\n        if (this.currentModal) {\n            this.currentModal.remove();\n            this.currentModal = null;\n        }\n    }\n}\n","/**\n * UIComponent - Base class for all UI components and pages\n */\nimport { AssetManager } from './AssetManager.js';\n\nexport abstract class UIComponent {\n    protected element: HTMLElement;\n    protected isVisible: boolean = false;\n    protected assetManager: AssetManager;\n\n    constructor(assetManager: AssetManager, elementId: string, autoInitialize: boolean = true) {\n        const element = document.getElementById(elementId);\n        if (!element) {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        this.element = element;\n        this.assetManager = assetManager;\n        if (autoInitialize) {\n            this.initialize();\n        }\n    }\n\n    protected abstract initialize(): void;\n\n    public show(): void {\n        this.element.style.display = 'block';\n        this.isVisible = true;\n        this.onShow();\n    }\n\n    public hide(): void {\n        this.element.style.display = 'none';\n        this.isVisible = false;\n        this.onHide();\n    }\n\n    public toggle(): void {\n        if (this.isVisible) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    public isComponentVisible(): boolean {\n        return this.isVisible;\n    }\n\n    protected onShow(): void {\n        // Override in subclasses\n    }\n\n    protected onHide(): void {\n        // Override in subclasses\n    }\n\n    protected createElement(tag: string, className?: string, textContent?: string): HTMLElement {\n        const element = document.createElement(tag);\n        if (className) element.className = className;\n        if (textContent) element.textContent = textContent;\n        return element;\n    }\n\n    protected addClickHandler(selector: string, handler: () => void): void {\n        const element = this.element.querySelector(selector);\n        if (element) {\n            element.addEventListener('click', () => {\n                // Play click sound\n                this.assetManager.playUIClickSound();\n                handler();\n            });\n        }\n    }\n\n    protected updateElement(selector: string, content: string): void {\n        const element = this.element.querySelector(selector);\n        if (element) {\n            element.textContent = content;\n        }\n    }\n\n    protected updateElementHTML(selector: string, html: string): void {\n        const element = this.element.querySelector(selector);\n        if (element) {\n            element.innerHTML = html;\n        }\n    }\n}\n","/**\n * SettingsPage - Game settings and configuration page\n */\nimport { UIComponent } from '../UIComponent.js';\nimport { GameSettingsManager } from '../GameSettings.js';\nimport { ModalService } from '../ModalService.js';\nimport { AssetManager } from '../AssetManager.js';\n\nexport class SettingsPage extends UIComponent {\n    private settingsManager: GameSettingsManager;\n    private onBackCallback?: () => void;\n\n    constructor(settingsManager: GameSettingsManager, assetManager: AssetManager, private modalService: ModalService) {\n        super(assetManager, 'settingsPage', false); // Disable auto-initialization\n        this.settingsManager = settingsManager;\n        this.initialize(); // Manually initialize after settingsManager is set\n    }\n\n    protected initialize(): void {\n        this.setupEventListeners();\n        this.renderSettings();\n    }\n\n    private setupEventListeners(): void {\n        // Back button\n        this.addClickHandler('#settingsBackBtn', () => {\n            this.onBackCallback?.();\n        });\n\n        // Audio settings\n        this.addClickHandler('#masterVolumeSlider', () => this.updateMasterVolume());\n        this.addClickHandler('#musicVolumeSlider', () => this.updateMusicVolume());\n        this.addClickHandler('#sfxVolumeSlider', () => this.updateSFXVolume());\n\n        // Graphics settings\n        this.addClickHandler('#particleEffectsToggle', () => this.toggleParticleEffects());\n        this.addClickHandler('#screenShakeToggle', () => this.toggleScreenShake());\n        this.addClickHandler('#fullscreenToggle', () => this.toggleFullscreen());\n\n        // Gameplay settings\n        this.addClickHandler('#difficultySelect', () => this.updateDifficulty());\n        this.addClickHandler('#autoSaveToggle', () => this.toggleAutoSave());\n        this.addClickHandler('#showFPSToggle', () => this.toggleShowFPS());\n\n        // UI settings\n        this.addClickHandler('#uiScaleSlider', () => this.updateUIScale());\n        this.addClickHandler('#themeSelect', () => this.updateTheme());\n\n        // Reset button\n        this.addClickHandler('#resetSettingsBtn', async () => await this.resetSettings());\n    }\n\n    private renderSettings(): void {\n        const settings = this.settingsManager.getSettings();\n\n        // Update audio sliders\n        this.updateSliderValue('#masterVolumeSlider', settings.masterVolume);\n        this.updateSliderValue('#musicVolumeSlider', settings.musicVolume);\n        this.updateSliderValue('#sfxVolumeSlider', settings.sfxVolume);\n\n        // Update toggles\n        this.updateToggleState('#particleEffectsToggle', settings.particleEffects);\n        this.updateToggleState('#screenShakeToggle', settings.screenShake);\n        this.updateToggleState('#fullscreenToggle', settings.fullscreen);\n        this.updateToggleState('#autoSaveToggle', settings.autoSave);\n        this.updateToggleState('#showFPSToggle', settings.showFPS);\n\n        // Update selects\n        this.updateSelectValue('#difficultySelect', settings.difficulty);\n        this.updateSelectValue('#themeSelect', settings.theme);\n\n        // Update UI scale\n        this.updateSliderValue('#uiScaleSlider', settings.uiScale);\n    }\n\n    private updateSliderValue(selector: string, value: number): void {\n        const slider = this.element.querySelector(selector) as HTMLInputElement;\n        if (slider) {\n            slider.value = value.toString();\n            const display = this.element.querySelector(selector + 'Display');\n            if (display) {\n                display.textContent = Math.round(value * 100) + '%';\n            }\n        }\n    }\n\n    private updateToggleState(selector: string, enabled: boolean): void {\n        const toggle = this.element.querySelector(selector) as HTMLInputElement;\n        if (toggle) {\n            toggle.checked = enabled;\n        }\n    }\n\n    private updateSelectValue(selector: string, value: string): void {\n        const select = this.element.querySelector(selector) as HTMLSelectElement;\n        if (select) {\n            select.value = value;\n        }\n    }\n\n    // Audio settings\n    private updateMasterVolume(): void {\n        const slider = this.element.querySelector('#masterVolumeSlider') as HTMLInputElement;\n        if (slider) {\n            const value = parseFloat(slider.value);\n            this.settingsManager.updateSettings({ masterVolume: value });\n            this.updateSliderValue('#masterVolumeSlider', value);\n        }\n    }\n\n    private updateMusicVolume(): void {\n        const slider = this.element.querySelector('#musicVolumeSlider') as HTMLInputElement;\n        if (slider) {\n            const value = parseFloat(slider.value);\n            this.settingsManager.updateSettings({ musicVolume: value });\n            this.updateSliderValue('#musicVolumeSlider', value);\n        }\n    }\n\n    private updateSFXVolume(): void {\n        const slider = this.element.querySelector('#sfxVolumeSlider') as HTMLInputElement;\n        if (slider) {\n            const value = parseFloat(slider.value);\n            this.settingsManager.updateSettings({ sfxVolume: value });\n            this.updateSliderValue('#sfxVolumeSlider', value);\n        }\n    }\n\n    // Graphics settings\n    private toggleParticleEffects(): void {\n        const toggle = this.element.querySelector('#particleEffectsToggle') as HTMLInputElement;\n        if (toggle) {\n            this.settingsManager.updateSettings({ particleEffects: toggle.checked });\n        }\n    }\n\n    private toggleScreenShake(): void {\n        const toggle = this.element.querySelector('#screenShakeToggle') as HTMLInputElement;\n        if (toggle) {\n            this.settingsManager.updateSettings({ screenShake: toggle.checked });\n        }\n    }\n\n    private toggleFullscreen(): void {\n        const toggle = this.element.querySelector('#fullscreenToggle') as HTMLInputElement;\n        if (toggle) {\n            this.settingsManager.updateSettings({ fullscreen: toggle.checked });\n            // Apply fullscreen change immediately\n            if (toggle.checked) {\n                document.documentElement.requestFullscreen?.();\n            } else {\n                document.exitFullscreen?.();\n            }\n        }\n    }\n\n    // Gameplay settings\n    private updateDifficulty(): void {\n        const select = this.element.querySelector('#difficultySelect') as HTMLSelectElement;\n        if (select) {\n            this.settingsManager.updateSettings({\n                difficulty: select.value as 'easy' | 'normal' | 'hard'\n            });\n        }\n    }\n\n    private toggleAutoSave(): void {\n        const toggle = this.element.querySelector('#autoSaveToggle') as HTMLInputElement;\n        if (toggle) {\n            this.settingsManager.updateSettings({ autoSave: toggle.checked });\n        }\n    }\n\n    private toggleShowFPS(): void {\n        const toggle = this.element.querySelector('#showFPSToggle') as HTMLInputElement;\n        if (toggle) {\n            this.settingsManager.updateSettings({ showFPS: toggle.checked });\n        }\n    }\n\n    // UI settings\n    private updateUIScale(): void {\n        const slider = this.element.querySelector('#uiScaleSlider') as HTMLInputElement;\n        if (slider) {\n            const value = parseFloat(slider.value);\n            this.settingsManager.updateSettings({ uiScale: value });\n            this.updateSliderValue('#uiScaleSlider', value);\n            // Apply UI scale immediately\n            document.documentElement.style.setProperty('--ui-scale', value.toString());\n        }\n    }\n\n    private updateTheme(): void {\n        const select = this.element.querySelector('#themeSelect') as HTMLSelectElement;\n        if (select) {\n            this.settingsManager.updateSettings({\n                theme: select.value as 'classic' | 'modern' | 'dark'\n            });\n            // Apply theme immediately\n            document.body.className = `theme-${select.value}`;\n        }\n    }\n\n    private async resetSettings(): Promise<void> {\n        const confirmed = await this.modalService.showConfirmation('Are you sure you want to reset all settings to default?');\n        if (confirmed) {\n            this.settingsManager.resetSettings();\n            this.renderSettings();\n        }\n    }\n\n    public setOnBackCallback(callback: () => void): void {\n        this.onBackCallback = callback;\n    }\n\n    protected override onShow(): void {\n        this.renderSettings();\n    }\n}\n","/**\n * AboutPage - Game information and credits page\n */\nimport { UIComponent } from '../UIComponent.js';\nimport { AssetManager } from '../AssetManager.js';\n\nexport class AboutPage extends UIComponent {\n  private onBackCallback?: () => void;\n\n  constructor(assetManager: AssetManager) {\n    super(assetManager, 'aboutPage', true);\n  }\n\n  protected initialize(): void {\n    this.setupEventListeners();\n    this.renderContent();\n  }\n\n  private setupEventListeners(): void {\n    // Back button\n    this.addClickHandler('#aboutBackBtn', () => {\n      this.onBackCallback?.();\n    });\n\n    // Version info button\n    this.addClickHandler('#versionInfoBtn', () => {\n      this.showVersionInfo();\n    });\n\n    // Credits button\n    this.addClickHandler('#creditsBtn', () => {\n      this.showCredits();\n    });\n  }\n\n  private renderContent(): void {\n    // Game description\n    this.updateElementHTML('#gameDescription', `\n      <h3>Star Trek Battle Simulator</h3>\n      <p>Experience the thrill of space combat in this Star Trek-themed battle game. \n      Command your starship through challenging encounters with enemy vessels, \n      manage your ship's systems, and prove your tactical skills.</p>\n      \n      <h4>Features:</h4>\n      <ul>\n        <li>Real-time space combat with multiple weapon systems</li>\n        <li>Ship customization and upgrades</li>\n        <li>Multiple ship classes and weapon types</li>\n        <li>Strategic repair system with math challenges</li>\n        <li>Progressive difficulty levels</li>\n        <li>Immersive Star Trek universe</li>\n      </ul>\n    `);\n\n    // Controls\n    this.updateElementHTML('#gameControls', `\n      <h4>Controls:</h4>\n      <div class=\"controls-grid\">\n        <div class=\"control-item\">\n          <span class=\"key\">← →</span>\n          <span class=\"action\">Move Ship</span>\n        </div>\n        <div class=\"control-item\">\n          <span class=\"key\">SPACE</span>\n          <span class=\"action\">Fire Phasers</span>\n        </div>\n        <div class=\"control-item\">\n          <span class=\"key\">P</span>\n          <span class=\"action\">Fire Photon Torpedoes</span>\n        </div>\n        <div class=\"control-item\">\n          <span class=\"key\">Q</span>\n          <span class=\"action\">Fire Quantum Torpedoes</span>\n        </div>\n        <div class=\"control-item\">\n          <span class=\"key\">H</span>\n          <span class=\"action\">Repair Hull</span>\n        </div>\n        <div class=\"control-item\">\n          <span class=\"key\">E</span>\n          <span class=\"action\">Recharge Energy</span>\n        </div>\n      </div>\n    `);\n\n    // Version info\n    this.updateElement('#versionNumber', '1.0.0');\n    this.updateElement('#buildDate', new Date().toLocaleDateString());\n  }\n\n  private showVersionInfo(): void {\n    const versionInfo = `\n      <div class=\"version-details\">\n        <h4>Version Information</h4>\n        <p><strong>Version:</strong> 1.0.0</p>\n        <p><strong>Build Date:</strong> ${new Date().toLocaleDateString()}</p>\n        <p><strong>Engine:</strong> HTML5 Canvas + TypeScript</p>\n        <p><strong>Framework:</strong> Vanilla JavaScript</p>\n        <p><strong>Build Tool:</strong> Vite</p>\n        <p><strong>License:</strong> MIT</p>\n      </div>\n    `;\n\n    this.updateElementHTML('#versionDetails', versionInfo);\n    this.showSection('#versionDetails');\n  }\n\n  private showCredits(): void {\n    const credits = `\n      <div class=\"credits-details\">\n        <h4>Credits</h4>\n        <div class=\"credits-section\">\n          <h5>Development</h5>\n          <p>Game developed with passion for the Star Trek universe</p>\n        </div>\n        \n        <div class=\"credits-section\">\n          <h5>Inspiration</h5>\n          <p>Based on the Star Trek universe created by Gene Roddenberry</p>\n        </div>\n        \n        <div class=\"credits-section\">\n          <h5>Assets</h5>\n          <p>Game assets created specifically for this project</p>\n        </div>\n        \n        <div class=\"credits-section\">\n          <h5>Technology</h5>\n          <p>Built with modern web technologies: TypeScript, HTML5 Canvas, CSS3</p>\n        </div>\n        \n        <div class=\"credits-section\">\n          <h5>Special Thanks</h5>\n          <p>To the Star Trek community for inspiration and feedback</p>\n        </div>\n      </div>\n    `;\n\n    this.updateElementHTML('#creditsDetails', credits);\n    this.showSection('#creditsDetails');\n  }\n\n  private showSection(selector: string): void {\n    // Hide all detail sections first\n    const allSections = this.element.querySelectorAll('.detail-section');\n    allSections.forEach(section => {\n      (section as HTMLElement).style.display = 'none';\n    });\n\n    // Show selected section\n    const section = this.element.querySelector(selector);\n    if (section) {\n      (section as HTMLElement).style.display = 'block';\n    }\n  }\n\n  public setOnBackCallback(callback: () => void): void {\n    this.onBackCallback = callback;\n  }\n\n  protected override onShow(): void {\n    this.renderContent();\n    // Hide all detail sections when showing the page\n    const allSections = this.element.querySelectorAll('.detail-section');\n    allSections.forEach(section => {\n      (section as HTMLElement).style.display = 'none';\n    });\n  }\n}\n","/**\n * HexagonalMap - Hexagonal grid map system for Star Trek game\n */\nimport type { GameSettingsManager } from './GameSettings.js';\n\nexport interface HexCoordinate {\n    q: number; // Column (axial coordinates)\n    r: number; // Row (axial coordinates)\n}\n\nexport interface HexCell {\n    coordinate: HexCoordinate;\n    hasShip: boolean;\n    hasEnemy: boolean;\n    isAccessible: boolean;\n    isStarbase: boolean;\n    encounterType?: 'battle' | 'trade' | 'exploration';\n    name?: string;\n    description?: string;\n    image?: string;\n    ship?: string;\n}\n\nexport class HexagonalMap {\n    private cells: Map<string, HexCell> = new Map();\n    private playerPosition: HexCoordinate = { q: 0, r: 0 };\n    private mapSize: number = 10; // 10 hexagons per row (smaller for better visibility)\n    private hexSize: number = 40; // Size of each hexagon in pixels (larger for better interaction)\n    private canvasWidth: number = 800;\n    private canvasHeight: number = 600;\n    private settingsManager: GameSettingsManager;\n\n    constructor(settingsManager: GameSettingsManager) {\n        this.settingsManager = settingsManager;\n        this.generateMap();\n        this.placeStarbases();\n        this.placeEnemies();\n    }\n\n    private generateMap(): void {\n        // Generate hexagonal grid\n        for (let q = -this.mapSize; q <= this.mapSize; q++) {\n            const r1 = Math.max(-this.mapSize, -q - this.mapSize);\n            const r2 = Math.min(this.mapSize, -q + this.mapSize);\n\n            for (let r = r1; r <= r2; r++) {\n                const coordinate: HexCoordinate = { q, r };\n                const cell: HexCell = {\n                    coordinate,\n                    hasShip: false,\n                    hasEnemy: false,\n                    isAccessible: true,\n                    isStarbase: false,\n                    name: `Sector ${q},${r}`,\n                    description: 'Uncharted space'\n                };\n\n                // Mark some cells as inaccessible (borders, obstacles)\n                if (this.isBorderCell(q, r)) {\n                    cell.isAccessible = false;\n                    cell.name = 'Void';\n                    cell.description = 'Impassable space';\n                }\n\n                this.cells.set(this.coordinateToKey(coordinate), cell);\n            }\n        }\n\n        // Set player starting position\n        this.setPlayerPosition({ q: 0, r: 0 });\n    }\n\n    private placeStarbases(): void {\n        // Place 3 starbases strategically around the map\n        // One at the starting position (0,0) and two others\n        const starbasePositions = [\n            { q: 0, r: 0 },      // Starting starbase\n            { q: -3, r: 2 },     // Northwest starbase\n            { q: 3, r: -2 }      // Southeast starbase\n        ];\n\n        starbasePositions.forEach((pos, index) => {\n            const cell = this.getCell(pos);\n            if (cell && cell.isAccessible) {\n                cell.isStarbase = true;\n                cell.name = `Starbase ${String.fromCharCode(65 + index)}`; // A, B, C\n                cell.description = 'Federation starbase - ship services available';\n                cell.encounterType = 'trade';\n                cell.ship = 'starbase';\n            }\n        });\n    }\n\n    private isBorderCell(q: number, r: number): boolean {\n        // Create some border cells and obstacles\n        const distance = Math.abs(q) + Math.abs(r) + Math.abs(q + r);\n        return distance >= this.mapSize ||\n            (q === 0 && Math.abs(r) > this.mapSize - 3) ||\n            (r === 0 && Math.abs(q) > this.mapSize - 3);\n    }\n\n    private placeEnemies(): void {\n        // Place enemies randomly on accessible cells\n        const accessibleCells = Array.from(this.cells.values())\n            .filter(cell => cell.isAccessible && !cell.hasShip && !cell.isStarbase);\n\n        const enemyCount = Math.min(8, Math.floor(accessibleCells.length * 0.15));\n\n        // Get enemy ships from settings manager\n        const enemyShips = this.settingsManager.getEnemyShips();\n\n        for (let i = 0; i < enemyCount; i++) {\n            const randomIndex = Math.floor(Math.random() * accessibleCells.length);\n            const cell = accessibleCells[randomIndex];\n            if (cell && enemyShips.length > 0) {\n                // Randomly select enemy type from available enemy ships\n                const enemyTypeIndex = Math.floor(Math.random() * enemyShips.length);\n                const selectedEnemyShip = enemyShips[enemyTypeIndex];\n\n                if (selectedEnemyShip) {\n                    cell.hasEnemy = true;\n                    cell.encounterType = 'battle';\n                    cell.name = selectedEnemyShip.name + ' ' + (i + 1);\n                    cell.description = selectedEnemyShip.description;\n                    cell.ship = selectedEnemyShip.id;\n\n                    // Remove from accessible cells to avoid duplicates\n                    accessibleCells.splice(randomIndex, 1);\n                }\n            }\n        }\n    }\n\n    public getCell(coordinate: HexCoordinate): HexCell | undefined {\n        return this.cells.get(this.coordinateToKey(coordinate));\n    }\n\n    public getPlayerPosition(): HexCoordinate {\n        return { ...this.playerPosition };\n    }\n\n    public getPlayerShip(): string | undefined {\n        const playerCell = this.getCell(this.playerPosition);\n        return playerCell?.ship;\n    }\n\n    public setPlayerPosition(coordinate: HexCoordinate, playerShip?: string): boolean {\n        const cell = this.getCell(coordinate);\n        if (cell && cell.isAccessible) {\n            // Clear previous position\n            const oldCell = this.getCell(this.playerPosition);\n            if (oldCell) {\n                oldCell.hasShip = false;\n                // Only clear ship property if it was the player's ship\n                if (oldCell.ship === playerShip) {\n                    delete oldCell.ship;\n                }\n            }\n\n            // Set new position\n            this.playerPosition = { ...coordinate };\n            cell.hasShip = true;\n            if (playerShip) {\n                cell.ship = playerShip;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public getAdjacentCells(coordinate: HexCoordinate): HexCoordinate[] {\n        const directions = [\n            { q: 1, r: 0 },   // East\n            { q: 1, r: -1 },  // Northeast\n            { q: 0, r: -1 },  // Northwest\n            { q: -1, r: 0 },  // West\n            { q: -1, r: 1 },  // Southwest\n            { q: 0, r: 1 }    // Southeast\n        ];\n\n        return directions.map(dir => ({\n            q: coordinate.q + dir.q,\n            r: coordinate.r + dir.r\n        }));\n    }\n\n    public getAccessibleAdjacentCells(coordinate: HexCoordinate): HexCoordinate[] {\n        return this.getAdjacentCells(coordinate).filter(adjCoord => {\n            const cell = this.getCell(adjCoord);\n            return cell && cell.isAccessible;\n        });\n    }\n\n    public canMoveTo(coordinate: HexCoordinate): boolean {\n        const cell = this.getCell(coordinate);\n        if (!cell || !cell.isAccessible) return false;\n\n        // Check if it's adjacent to current position\n        const adjacentCells = this.getAccessibleAdjacentCells(this.playerPosition);\n        return adjacentCells.some(adj =>\n            adj.q === coordinate.q && adj.r === coordinate.r\n        );\n    }\n\n    public moveTo(coordinate: HexCoordinate): boolean {\n        if (this.canMoveTo(coordinate)) {\n            return this.setPlayerPosition(coordinate);\n        }\n        return false;\n    }\n\n    public getCellAtPixel(x: number, y: number): HexCoordinate | null {\n        // Convert pixel coordinates to hex coordinates\n        // First, adjust for canvas center offset\n        const centerX = this.canvasWidth / 2;\n        const centerY = this.canvasHeight / 2;\n\n        const adjustedX = x - centerX;\n        const adjustedY = y - centerY;\n\n        // Convert to hex coordinates using proper axial coordinate system\n        const q = Math.round((Math.sqrt(3) / 3 * adjustedX - 1 / 3 * adjustedY) / this.hexSize);\n        const r = Math.round((2 / 3 * adjustedY) / this.hexSize);\n\n        const coordinate = { q, r };\n        return this.getCell(coordinate) ? coordinate : null;\n    }\n\n    public getPixelFromCoordinate(coordinate: HexCoordinate): { x: number; y: number } {\n        // Convert hex coordinates to pixel coordinates\n        // Using proper axial coordinate system conversion\n        const x = this.hexSize * (Math.sqrt(3) * coordinate.q + Math.sqrt(3) / 2 * coordinate.r) + this.canvasWidth / 2;\n        const y = this.hexSize * (3 / 2 * coordinate.r) + this.canvasHeight / 2;\n        return { x, y };\n    }\n\n    public getAllCells(): HexCell[] {\n        return Array.from(this.cells.values());\n    }\n\n    public getCellsInRange(center: HexCoordinate, range: number): HexCell[] {\n        const cells: HexCell[] = [];\n\n        for (let q = -range; q <= range; q++) {\n            const r1 = Math.max(-range, -q - range);\n            const r2 = Math.min(range, -q + range);\n\n            for (let r = r1; r <= r2; r++) {\n                const coordinate = { q: center.q + q, r: center.r + r };\n                const cell = this.getCell(coordinate);\n                if (cell) {\n                    cells.push(cell);\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    private coordinateToKey(coordinate: HexCoordinate): string {\n        return `${coordinate.q},${coordinate.r}`;\n    }\n\n    public getMapSize(): number {\n        return this.mapSize;\n    }\n\n    public getHexSize(): number {\n        return this.hexSize;\n    }\n\n    /**\n     * Clear enemy from a specific cell (used after winning a battle)\n     * @param coordinate The coordinate of the cell to clear\n     */\n    public clearEnemyFromCell(coordinate: HexCoordinate): void {\n        const cell = this.getCell(coordinate);\n        if (cell) {\n            cell.hasEnemy = false;\n            delete cell.encounterType;\n            delete cell.ship;\n            cell.name = `Sector ${coordinate.q},${coordinate.r}`;\n            cell.description = 'Uncharted space';\n        }\n    }\n\n    /**\n     * Reset player position to starting location (0,0)\n     */\n    public resetPlayerPosition(): void {\n        // Clear current player position\n        const currentCell = this.getCell(this.playerPosition);\n        if (currentCell) {\n            currentCell.hasShip = false;\n            delete currentCell.ship;\n        }\n\n        // Reset to starting position\n        this.playerPosition = { q: 0, r: 0 };\n        const startCell = this.getCell(this.playerPosition);\n        if (startCell) {\n            startCell.hasShip = true;\n        }\n    }\n\n    /**\n     * Regenerate the entire map with new random enemy placements\n     * Preserves player position and starbase locations\n     */\n    public regenerateMap(): void {\n        // Clear all enemies from the map\n        this.cells.forEach(cell => {\n            if (cell.hasEnemy) {\n                cell.hasEnemy = false;\n                delete cell.encounterType;\n                delete cell.ship;\n                cell.name = `Sector ${cell.coordinate.q},${cell.coordinate.r}`;\n                cell.description = 'Uncharted space';\n            }\n        });\n\n        // Place new enemies randomly\n        this.placeEnemies();\n    }\n}\n","/**\n * MapPage - Hexagonal space map with clickable hexagons and movement mechanics\n */\nimport { UIComponent } from '../UIComponent.js';\nimport { GameSettingsManager, type SpaceLocation } from '../GameSettings.js';\nimport { HexagonalMap, type HexCoordinate, type HexCell } from '../HexagonalMap.js';\nimport { AssetManager } from '../AssetManager.js';\nimport { ModalService } from '../ModalService.js';\n\nexport class MapPage extends UIComponent {\n    private onBackCallback?: () => void;\n    private onJumpCallback?: (location: SpaceLocation) => void;\n    private onShipServicesCallback?: () => void;\n    private onWeaponServicesCallback?: () => void;\n    private mapCanvas!: HTMLCanvasElement;\n    private mapCtx!: CanvasRenderingContext2D;\n    private hexagonalMap: HexagonalMap;\n    private hoveredCell: HexCoordinate | null = null;\n    private selectedCell: HexCoordinate | null = null;\n    private getCreditsCallback?: () => number;\n    private hasMovedToStarbase: boolean = false;\n    private settingsManager: GameSettingsManager;\n\n    constructor(settingsManager: GameSettingsManager, assetManager: AssetManager, private modalService: ModalService) {\n        super(assetManager, 'mapPage', false); // Disable auto-initialization\n        this.hexagonalMap = new HexagonalMap(settingsManager);\n        this.settingsManager = settingsManager;\n        this.initialize(); // Manually initialize after settingsManager is set\n    }\n\n    protected initialize(): void {\n        this.setupMapCanvas();\n        this.setupEventListeners();\n\n        // Check if player starts on a starbase and set the flag accordingly\n        const playerPos = this.hexagonalMap.getPlayerPosition();\n        const startingCell = this.hexagonalMap.getCell(playerPos);\n        if (startingCell && startingCell.isStarbase) {\n            this.hasMovedToStarbase = true;\n        }\n\n        this.renderMap();\n    }\n\n    private setupMapCanvas(): void {\n        this.mapCanvas = this.element.querySelector('#mapCanvas') as HTMLCanvasElement;\n        if (!this.mapCanvas) {\n            throw new Error('Map canvas not found');\n        }\n\n        this.mapCtx = this.mapCanvas.getContext('2d')!;\n        this.mapCanvas.width = 800;\n        this.mapCanvas.height = 600;\n    }\n\n    private setupEventListeners(): void {\n        // Back button\n        this.addClickHandler('#mapBackBtn', async () => {\n            const confirmed = await this.modalService.showConfirmation(\n                'Are you sure you want to go back? Any progress on the map will be lost.'\n            );\n            if (confirmed) {\n                this.onBackCallback?.();\n            }\n        });\n\n        // Map canvas interactions\n        this.mapCanvas.addEventListener('click', (e) => this.handleMapClick(e));\n        this.mapCanvas.addEventListener('mousemove', (e) => this.handleMapHover(e));\n        this.mapCanvas.addEventListener('mouseleave', () => this.handleMapLeave());\n\n        // Jump button (now for moving to selected hex)\n        this.addClickHandler('#jumpBtn', () => {\n            if (this.selectedCell) {\n                this.moveToCell(this.selectedCell);\n            }\n        });\n\n        // Ship Selection button\n        this.addClickHandler('#shipSelectionBtn', () => {\n            this.onShipServicesCallback?.();\n        });\n\n        // Ship Services button (for weapon selection)\n        this.addClickHandler('#shipServicesBtn', () => {\n            this.onWeaponServicesCallback?.();\n        });\n    }\n\n    private renderMap(): void {\n        // Clear canvas\n        this.mapCtx.clearRect(0, 0, this.mapCanvas.width, this.mapCanvas.height);\n\n        // Draw starfield background\n        this.drawStarfield();\n\n        // Draw hexagonal grid\n        this.drawHexagonalGrid();\n\n        // Draw hovered cell info\n        if (this.hoveredCell) {\n            this.drawCellInfo(this.hoveredCell);\n        }\n    }\n\n    private drawStarfield(): void {\n        this.mapCtx.fillStyle = '#000011';\n        this.mapCtx.fillRect(0, 0, this.mapCanvas.width, this.mapCanvas.height);\n\n        // Draw stars\n        this.mapCtx.fillStyle = '#FFFFFF';\n        for (let i = 0; i < 200; i++) {\n            const x = Math.random() * this.mapCanvas.width;\n            const y = Math.random() * this.mapCanvas.height;\n            const size = Math.random() * 2;\n\n            this.mapCtx.beginPath();\n            this.mapCtx.arc(x, y, size, 0, Math.PI * 2);\n            this.mapCtx.fill();\n        }\n    }\n\n    private drawHexagonalGrid(): void {\n        const cells = this.hexagonalMap.getAllCells();\n        const playerPos = this.hexagonalMap.getPlayerPosition();\n\n        cells.forEach(cell => {\n            const pixelPos = this.hexagonalMap.getPixelFromCoordinate(cell.coordinate);\n            this.drawHexagon(pixelPos.x, pixelPos.y, cell, playerPos);\n        });\n    }\n\n    private drawHexagon(x: number, y: number, cell: HexCell, playerPos: HexCoordinate): void {\n        const hexSize = this.hexagonalMap.getHexSize();\n        const isPlayerPos = cell.coordinate.q === playerPos.q && cell.coordinate.r === playerPos.r;\n        const isHovered = this.hoveredCell &&\n            cell.coordinate.q === this.hoveredCell.q &&\n            cell.coordinate.r === this.hoveredCell.r;\n        const isSelected = this.selectedCell &&\n            cell.coordinate.q === this.selectedCell.q &&\n            cell.coordinate.r === this.selectedCell.r;\n\n        // Set colors based on cell state\n        let fillColor = '#001122';\n        let strokeColor = '#333366';\n        let strokeWidth = 1;\n\n        if (!cell.isAccessible) {\n            fillColor = '#000000';\n            strokeColor = '#111111';\n        } else if (isPlayerPos) {\n            fillColor = '#00FF00';\n            strokeColor = '#00FF00';\n        } else if (isSelected) {\n            fillColor = '#FF9900';\n            strokeColor = '#FF9900';\n        } else if (isHovered) {\n            fillColor = '#0066CC';\n            strokeColor = '#0066CC';\n        } else if (cell.isStarbase) {\n            fillColor = '#001166';\n            strokeColor = '#00FFFF';\n        } else if (cell.hasEnemy) {\n            fillColor = '#CC0000';\n            strokeColor = '#FF0000';\n        }\n\n        // Draw hexagon with proper orientation (flat-top)\n        this.mapCtx.beginPath();\n        for (let i = 0; i < 6; i++) {\n            const angle = (Math.PI / 3) * i - Math.PI / 6; // Offset by 30 degrees for flat-top\n            const hexX = x + hexSize * Math.cos(angle);\n            const hexY = y + hexSize * Math.sin(angle);\n\n            if (i === 0) {\n                this.mapCtx.moveTo(hexX, hexY);\n            } else {\n                this.mapCtx.lineTo(hexX, hexY);\n            }\n        }\n        this.mapCtx.closePath();\n\n        // Fill and stroke\n        this.mapCtx.fillStyle = fillColor;\n        this.mapCtx.fill();\n        this.mapCtx.strokeStyle = strokeColor;\n        this.mapCtx.lineWidth = strokeWidth;\n        this.mapCtx.stroke();\n\n        // Draw cell content indicators\n        if (cell.isStarbase && cell.isAccessible) {\n            this.mapCtx.fillStyle = '#00FFFF';\n            this.mapCtx.font = 'bold 16px Arial';\n            this.mapCtx.textAlign = 'center';\n            this.mapCtx.fillText('B', x, y + 5);\n        } else if (cell.hasEnemy && cell.isAccessible) {\n            this.mapCtx.fillStyle = '#FFFFFF';\n            this.mapCtx.font = 'bold 12px Arial';\n            this.mapCtx.textAlign = 'center';\n            this.mapCtx.fillText('⚔', x, y + 4);\n        }\n\n        // Draw coordinate labels for debugging (only for visible cells) - disabled for cleaner look\n        // if (Math.abs(cell.coordinate.q) <= 3 && Math.abs(cell.coordinate.r) <= 3) {\n        //     this.mapCtx.fillStyle = '#FFFFFF';\n        //     this.mapCtx.font = '8px Arial';\n        //     this.mapCtx.textAlign = 'center';\n        //     this.mapCtx.fillText(`${cell.coordinate.q},${cell.coordinate.r}`, x, y - hexSize - 5);\n        // }\n    }\n\n    private drawCellInfo(coordinate: HexCoordinate): void {\n        const cell = this.hexagonalMap.getCell(coordinate);\n        if (!cell || !cell.isAccessible) return;\n\n        const pixelPos = this.hexagonalMap.getPixelFromCoordinate(coordinate);\n\n        // Info box\n        const boxX = Math.min(pixelPos.x + 40, this.mapCanvas.width - 200);\n        const boxY = Math.max(pixelPos.y - 80, 20);\n\n        this.mapCtx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        this.mapCtx.fillRect(boxX, boxY, 180, 100);\n\n        this.mapCtx.strokeStyle = '#FF9900';\n        this.mapCtx.lineWidth = 2;\n        this.mapCtx.strokeRect(boxX, boxY, 180, 100);\n\n        // Text\n        this.mapCtx.fillStyle = '#FFFFFF';\n        this.mapCtx.font = 'bold 14px Courier New';\n        this.mapCtx.textAlign = 'left';\n        this.mapCtx.fillText(cell.name || `Sector ${coordinate.q},${coordinate.r}`, boxX + 10, boxY + 20);\n\n        this.mapCtx.font = '12px Courier New';\n        this.mapCtx.fillStyle = '#CCCCCC';\n        this.mapCtx.fillText(cell.description || 'Uncharted space', boxX + 10, boxY + 40);\n\n        if (cell.isStarbase) {\n            this.mapCtx.fillStyle = '#00FFFF';\n            this.mapCtx.fillText('Starbase - Ship Services Available', boxX + 10, boxY + 60);\n        } else if (cell.hasEnemy) {\n            this.mapCtx.fillStyle = '#FF4444';\n            this.mapCtx.fillText('Enemy Territory', boxX + 10, boxY + 60);\n        }\n\n        // Movement info\n        const playerPos = this.hexagonalMap.getPlayerPosition();\n        const canMove = this.hexagonalMap.canMoveTo(coordinate);\n        const isAtCurrentPosition = coordinate.q === playerPos.q && coordinate.r === playerPos.r;\n        const isAdjacent = this.hexagonalMap.getAccessibleAdjacentCells(playerPos)\n            .some(adj => adj.q === coordinate.q && adj.r === coordinate.r);\n\n        if (cell.isStarbase && (canMove || isAtCurrentPosition)) {\n            this.mapCtx.fillStyle = '#00FFFF';\n            this.mapCtx.fillText('Click for ship services', boxX + 10, boxY + 80);\n        } else if (canMove) {\n            this.mapCtx.fillStyle = '#00FF00';\n            this.mapCtx.fillText('Click to move here', boxX + 10, boxY + 80);\n        } else if (isAdjacent) {\n            this.mapCtx.fillStyle = '#FFAA00';\n            this.mapCtx.fillText('Adjacent - can move', boxX + 10, boxY + 80);\n        } else {\n            this.mapCtx.fillStyle = '#FF6666';\n            this.mapCtx.fillText('Too far to move', boxX + 10, boxY + 80);\n        }\n    }\n\n    private handleMapClick(e: MouseEvent): void {\n        const rect = this.mapCanvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        // Get hex coordinate from pixel position\n        const coordinate = this.hexagonalMap.getCellAtPixel(x, y);\n\n        if (coordinate) {\n            const cell = this.hexagonalMap.getCell(coordinate);\n            if (cell && cell.isAccessible) {\n                this.selectedCell = coordinate;\n                this.updateCellInfo(coordinate);\n                this.renderMap();\n            }\n\n            this.assetManager.playUIClickSound();\n        }\n    }\n\n    private handleMapHover(e: MouseEvent): void {\n        const rect = this.mapCanvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        // Get hex coordinate from pixel position\n        const coordinate = this.hexagonalMap.getCellAtPixel(x, y);\n        if (coordinate !== this.hoveredCell) {\n            this.hoveredCell = coordinate;\n            this.renderMap();\n            if (coordinate) {\n                // console.log(`Hovering over hex: (${coordinate.q}, ${coordinate.r})`);\n            }\n        }\n    }\n\n    private handleMapLeave(): void {\n        this.hoveredCell = null;\n        this.renderMap();\n    }\n\n    private updateCellInfo(coordinate: HexCoordinate): void {\n        const cell = this.hexagonalMap.getCell(coordinate);\n        if (!cell) return;\n\n        this.updateElement('#selectedLocationName', cell.name || `Sector ${coordinate.q},${coordinate.r}`);\n        this.updateElement('#selectedLocationDescription', cell.description || 'Uncharted space');\n\n        const encounterInfo = cell.hasEnemy\n            ? `Encounter Type: ${cell.encounterType || 'battle'}`\n            : 'No encounters';\n        this.updateElement('#selectedLocationEncounter', encounterInfo);\n\n        // Update cell image based on cell content\n        this.updateCellImageDisplay(cell.ship);\n\n        // Enable/disable buttons\n        const jumpBtn = this.element.querySelector('#jumpBtn') as HTMLButtonElement;\n        const shipSelectionBtn = this.element.querySelector('#shipSelectionBtn') as HTMLButtonElement;\n        const shipServicesBtn = this.element.querySelector('#shipServicesBtn') as HTMLButtonElement;\n\n        if (jumpBtn && shipSelectionBtn && shipServicesBtn) {\n            const canMove = this.hexagonalMap.canMoveTo(coordinate);\n            const playerPos = this.hexagonalMap.getPlayerPosition();\n            const isAtCurrentPosition = coordinate.q === playerPos.q && coordinate.r === playerPos.r;\n\n            // Check if player is at starbase and has moved there\n            const isAtStarbaseWithAccess = cell.isStarbase && isAtCurrentPosition && this.hasMovedToStarbase;\n\n            if (isAtStarbaseWithAccess) {\n                // Show only service buttons when at starbase with access\n                jumpBtn.style.display = 'none';\n\n                shipSelectionBtn.disabled = false;\n                shipSelectionBtn.style.display = 'block';\n\n                shipServicesBtn.disabled = false;\n                shipServicesBtn.style.display = 'block';\n            } else if (cell.isStarbase && isAtCurrentPosition) {\n                // Player is at starbase but hasn't activated services yet - show \"Move Here\" to activate services\n                jumpBtn.disabled = false;\n                jumpBtn.textContent = 'Move Here';\n                jumpBtn.style.display = 'block';\n\n                shipSelectionBtn.style.display = 'none';\n                shipServicesBtn.style.display = 'none';\n            } else if (cell.isStarbase && canMove) {\n                // If it's a starbase and player can move there, show \"Move Here\" first\n                jumpBtn.disabled = false;\n                jumpBtn.textContent = 'Move Here';\n                jumpBtn.style.display = 'block';\n\n                shipSelectionBtn.style.display = 'none';\n                shipServicesBtn.style.display = 'none';\n            } else {\n                // Normal movement - show only Move Here button\n                jumpBtn.disabled = !canMove;\n                jumpBtn.textContent = canMove ? 'Move Here' : 'Cannot Move Here';\n                jumpBtn.style.display = 'block';\n\n                shipSelectionBtn.style.display = 'none';\n                shipServicesBtn.style.display = 'none';\n            }\n        }\n    }\n\n    private updateCellImageDisplay(shipName?: string): void {\n        const cellImageContainer = this.element.querySelector('#cellImageContainer') as HTMLElement;\n        const cellImage = this.element.querySelector('#cellImage') as HTMLImageElement;\n\n        if (cellImageContainer && cellImage) {\n            if (shipName) {\n                const imagePath = this.getShipImagePath(shipName);\n                cellImage.src = imagePath;\n                cellImageContainer.style.display = 'block';\n            } else {\n                cellImageContainer.style.display = 'none';\n            }\n        }\n    }\n\n    private getShipImagePath(shipName: string): string {\n        // First check if it's a starbase (special case)\n        if (shipName === 'starbase') {\n            return 'assets/images/starbase.png';\n        }\n\n        // Try to find the ship in the settings manager\n        const ship = this.settingsManager.getShipById(shipName);\n        if (ship) {\n            return `assets/images/${ship.image}`;\n        }\n\n        throw new Error(`Ship image not found for ship: ${shipName}`);\n    }\n\n    private moveToCell(coordinate: HexCoordinate): void {\n        const cell = this.hexagonalMap.getCell(coordinate);\n        if (!cell) return;\n\n        const playerPos = this.hexagonalMap.getPlayerPosition();\n        const isAtCurrentPosition = coordinate.q === playerPos.q && coordinate.r === playerPos.r;\n\n        // Check if this is a starbase interaction\n        if (cell.isStarbase) {\n            if (isAtCurrentPosition && !this.hasMovedToStarbase) {\n                // Player is at starbase but hasn't activated services yet - activate them\n                this.hasMovedToStarbase = true;\n                this.updateCellInfo(coordinate);\n                return;\n            } else if (this.hexagonalMap.canMoveTo(coordinate)) {\n                // Player can move to starbase - move there first\n                const moved = this.hexagonalMap.moveTo(coordinate);\n                if (moved) {\n                    this.hasMovedToStarbase = true;\n                    this.selectedCell = null;\n                    this.renderMap();\n                    // Update the cell info to show all buttons\n                    this.updateCellInfo(coordinate);\n                }\n                return;\n            }\n        }\n\n        // For non-starbase cells, check if we can move there\n        if (!this.hexagonalMap.canMoveTo(coordinate)) return;\n\n        // Move the player\n        const moved = this.hexagonalMap.moveTo(coordinate);\n        if (moved) {\n            this.selectedCell = null;\n            this.renderMap();\n\n            // Check if there's an encounter\n            if (cell.hasEnemy && cell.encounterType === 'battle') {\n                // Trigger battle\n                this.onJumpCallback?.({\n                    id: `battle-${coordinate.q}-${coordinate.r}`,\n                    name: cell.name || 'Battle',\n                    description: cell.description || 'Enemy encounter',\n                    x: 0, y: 0, // Not used in new system\n                    unlocked: true,\n                    hasEncounter: true,\n                    encounterType: 'battle'\n                });\n            }\n        }\n    }\n\n    public setOnBackCallback(callback: () => void): void {\n        this.onBackCallback = callback;\n    }\n\n    public setOnJumpCallback(callback: (location: SpaceLocation) => void): void {\n        this.onJumpCallback = callback;\n    }\n\n    public setCreditCallbacks(getCredits: () => number, _spendCredits: (amount: number) => boolean): void {\n        this.getCreditsCallback = getCredits;\n    }\n\n    public setOnShipServicesCallback(callback: () => void): void {\n        this.onShipServicesCallback = callback;\n    }\n\n    public setOnWeaponServicesCallback(callback: () => void): void {\n        this.onWeaponServicesCallback = callback;\n    }\n\n\n    private updateCreditDisplay(): void {\n        const currentCredits = this.getCreditsCallback?.() || 0;\n        const creditElement = document.getElementById('creditAmount');\n        if (creditElement) {\n            creditElement.textContent = currentCredits.toString();\n        }\n    }\n\n    private hideMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.add('hidden');\n        }\n        document.body.classList.add('credit-display-hidden');\n    }\n\n    private showMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.remove('hidden');\n        }\n        document.body.classList.remove('credit-display-hidden');\n    }\n\n    protected override onShow(): void {\n        this.renderMap();\n        this.hoveredCell = null;\n\n        // Automatically select the player's current location\n        const playerPos = this.hexagonalMap.getPlayerPosition();\n        this.selectedCell = playerPos;\n        this.updateCellInfo(playerPos);\n\n        this.updateCreditDisplay();\n        this.hideMainCreditDisplay();\n\n        // Map loaded successfully\n    }\n\n    protected override onHide(): void {\n        this.showMainCreditDisplay();\n    }\n\n    /**\n     * Clear enemy from a specific cell (called after winning a battle)\n     * @param coordinate The coordinate of the cell to clear\n     */\n    public clearEnemyFromCell(coordinate: { q: number; r: number }): void {\n        this.hexagonalMap.clearEnemyFromCell(coordinate);\n        // Re-render the map to show the updated cell\n        this.renderMap();\n    }\n\n    /**\n     * Get hex cell information for a specific coordinate\n     * @param cell The coordinate of the cell to retrieve\n     * @returns The hex cell or undefined if not found\n     */\n    public getHexCell(cell: { q: number; r: number }): HexCell | undefined {\n        const coordinate: HexCoordinate = { q: cell.q, r: cell.r };\n        return this.hexagonalMap.getCell(coordinate);\n    }\n\n    /**\n     * Regenerate the map with new enemy placements\n     */\n    public restartMap(): void {\n        // Reset player position to starting location\n        this.hexagonalMap.resetPlayerPosition();\n\n        // Regenerate the hexagonal map\n        this.hexagonalMap.regenerateMap();\n\n        // Clear current selection and hover states\n        this.selectedCell = null;\n        this.hoveredCell = null;\n\n        // Re-render the map\n        this.renderMap();\n\n        // Reset to player's starting position (0,0)\n        const playerPos = this.hexagonalMap.getPlayerPosition();\n        this.selectedCell = playerPos;\n        this.updateCellInfo(playerPos);\n\n        // Play UI sound\n        this.assetManager.playUIClickSound();\n    }\n}\n","/**\n * ShipSelectionPage - Ship selection and customization page\n */\nimport { UIComponent } from '../UIComponent.js';\nimport { GameSettingsManager, type ShipType } from '../GameSettings.js';\nimport { ModalService } from '../ModalService.js';\nimport { AssetManager } from '../AssetManager.js';\n\nexport class ShipSelectionPage extends UIComponent {\n    private settingsManager: GameSettingsManager;\n    private onBackCallback?: () => void;\n    private onSelectCallback?: (ship: ShipType) => void;\n    private availableShips: ShipType[] = [];\n    private selectedShip: ShipType | null = null;\n    private getCreditsCallback?: () => number;\n    private spendCreditsCallback?: (amount: number) => boolean;\n\n    constructor(settingsManager: GameSettingsManager, assetManager: AssetManager, private modalService: ModalService) {\n        super(assetManager, 'shipSelectionPage', false); // Disable auto-initialization\n        this.settingsManager = settingsManager;\n        this.initialize(); // Manually initialize after settingsManager is set\n    }\n\n    protected initialize(): void {\n        this.setupEventListeners();\n        this.loadShips();\n        this.renderShips();\n    }\n\n    private setupEventListeners(): void {\n        // Back button\n        this.addClickHandler('#shipSelectionBackBtn', () => {\n            this.onBackCallback?.();\n        });\n    }\n\n    private loadShips(): void {\n        const allShips = this.settingsManager.getAllShips();\n        // Filter ships to show only ships from the selected faction\n        const selectedFaction = this.settingsManager.getSelectedFaction();\n        this.availableShips = allShips.filter(ship => ship.faction === selectedFaction);\n        this.selectedShip = this.settingsManager.getSelectedShip();\n    }\n\n    private renderShips(): void {\n        const shipsContainer = this.element.querySelector('#shipsContainer');\n        if (!shipsContainer) return;\n\n        // Reload ships to get updated unlocked status\n        this.loadShips();\n\n        shipsContainer.innerHTML = '';\n\n        this.availableShips.forEach(ship => {\n            const shipCard = this.createShipCard(ship);\n            shipsContainer.appendChild(shipCard);\n        });\n    }\n\n    private createShipCard(ship: ShipType): HTMLElement {\n        const card = this.createElement('div', 'ship-card');\n        if (ship.id === this.selectedShip?.id) {\n            card.classList.add('selected');\n        }\n        if (!ship.unlocked) {\n            card.classList.add('locked');\n        }\n\n        const buttonText = ship.unlocked ? 'Select Ship' :\n            `Purchase (${ship.cost || 0} Credits)`;\n\n        card.innerHTML = `\n      <div class=\"ship-image\">\n        <img src=\"./public/assets/images/${ship.image}\" alt=\"${ship.name}\" \n             onerror=\"this.src='./public/assets/images/player-ship.png'\">\n        ${!ship.unlocked ? '<div class=\"lock-overlay\">🔒</div>' : ''}\n      </div>\n      <div class=\"ship-info\">\n        <h3>${ship.name}</h3>\n        <p class=\"ship-description\">${ship.description}</p>\n        <div class=\"ship-stats\">\n          <div class=\"stat\">\n            <span class=\"stat-label\">Health:</span>\n            <span class=\"stat-value\">${ship.maxHealth}</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-label\">Energy:</span>\n            <span class=\"stat-value\">${ship.maxEnergy}</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-label\">Speed:</span>\n            <span class=\"stat-value\">${ship.speed}x</span>\n          </div>\n          <div class=\"stat\">\n            <span class=\"stat-label\">Faction:</span>\n            <span class=\"stat-value\">${ship.faction.charAt(0).toUpperCase() + ship.faction.slice(1)}</span>\n          </div>\n        </div>\n        <button class=\"ship-action-btn\" \n                data-ship-id=\"${ship.id}\">\n          ${buttonText}\n        </button>\n      </div>\n    `;\n\n        // Add button click handler\n        const button = card.querySelector('.ship-action-btn') as HTMLButtonElement;\n        if (button) {\n            button.addEventListener('click', async (e) => {\n                e.stopPropagation(); // Prevent card click\n                this.assetManager.playUIClickSound();\n                await this.handleShipAction(ship);\n            });\n        }\n\n        return card;\n    }\n\n\n    private async handleShipAction(ship: ShipType): Promise<void> {\n        if (!ship.unlocked) {\n            // Purchase the ship\n            await this.unlockShip(ship);\n        } else {\n            // Select the ship\n            this.selectShip(ship);\n        }\n    }\n\n    private selectShip(ship: ShipType): void {\n        this.settingsManager.selectShip(ship.id);\n        this.selectedShip = ship;\n        this.renderShips(); // Re-render to update selection\n        this.onSelectCallback?.(ship);\n    }\n\n\n    private async unlockShip(ship: ShipType): Promise<void> {\n        const cost = ship.cost || 0;\n        const currentCredits = this.getCreditsCallback?.() || 0;\n\n        if (currentCredits < cost) {\n            await this.modalService.showModal(`Insufficient credits! You need ${cost} credits but only have ${currentCredits}.`);\n            return;\n        }\n\n        const confirmed = await this.modalService.showConfirmation(`Purchase ${ship.name} for ${cost} credits?`);\n        if (confirmed) {\n            if (this.spendCreditsCallback?.(cost)) {\n                this.settingsManager.unlockShip(ship.id);\n                this.renderShips();\n                this.updateCreditDisplay();\n            } else {\n                await this.modalService.showModal('Failed to complete purchase. Please try again.');\n            }\n        }\n    }\n\n    public setOnBackCallback(callback: () => void): void {\n        this.onBackCallback = callback;\n    }\n\n    public setOnSelectCallback(callback: (ship: ShipType) => void): void {\n        this.onSelectCallback = callback;\n    }\n\n    public setCreditCallbacks(getCredits: () => number, spendCredits: (amount: number) => boolean): void {\n        this.getCreditsCallback = getCredits;\n        this.spendCreditsCallback = spendCredits;\n    }\n\n    protected override onShow(): void {\n        this.loadShips();\n        this.renderShips();\n        this.updateCreditDisplay();\n        this.hideMainCreditDisplay();\n    }\n\n    protected override onHide(): void {\n        this.showMainCreditDisplay();\n    }\n\n    private updateCreditDisplay(): void {\n        const currentCredits = this.getCreditsCallback?.() || 0;\n        const creditElement = document.getElementById('creditAmount');\n        if (creditElement) {\n            creditElement.textContent = currentCredits.toString();\n        }\n    }\n\n    private hideMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.add('hidden');\n        }\n        document.body.classList.add('credit-display-hidden');\n    }\n\n    private showMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.remove('hidden');\n        }\n        document.body.classList.remove('credit-display-hidden');\n    }\n}\n","/**\n * WeaponSelectionPage - Weapon selection and loadout customization page\n */\nimport { UIComponent } from '../UIComponent.js';\nimport { GameSettingsManager, type WeaponType } from '../GameSettings.js';\nimport { ModalService } from '../ModalService.js';\nimport { AssetManager } from '../AssetManager.js';\n\nexport class WeaponSelectionPage extends UIComponent {\n    private settingsManager: GameSettingsManager;\n    private onBackCallback?: () => void;\n    private onSelectCallback?: (weapons: WeaponType[]) => void;\n    private availableWeapons: WeaponType[] = [];\n    private selectedWeapons: WeaponType[] = [];\n    private getCreditsCallback?: () => number;\n    private spendCreditsCallback?: (amount: number) => boolean;\n\n    constructor(settingsManager: GameSettingsManager, assetManager: AssetManager, private modalService: ModalService) {\n        super(assetManager, 'weaponSelectionPage', false); // Disable auto-initialization\n        this.settingsManager = settingsManager;\n        this.initialize(); // Manually initialize after settingsManager is set\n    }\n\n    protected initialize(): void {\n        this.setupEventListeners();\n        this.loadWeapons();\n        this.renderWeapons();\n    }\n\n    private setupEventListeners(): void {\n        // Back button\n        this.addClickHandler('#weaponSelectionBackBtn', () => {\n            this.onBackCallback?.();\n        });\n\n        // Apply loadout button\n        this.addClickHandler('#applyLoadoutBtn', () => {\n            this.onSelectCallback?.(this.selectedWeapons);\n        });\n\n\n    }\n\n    private loadWeapons(): void {\n        this.availableWeapons = this.settingsManager.getAllWeapons().filter(weapon => weapon.faction === this.settingsManager.getSelectedFaction());\n        this.selectedWeapons = [...this.settingsManager.getSelectedWeapons()];\n    }\n\n    private getMaxWeapons(): number {\n        const selectedShip = this.settingsManager.getSelectedShip();\n        return selectedShip?.weaponSlots || 3; // Default to 3 if no ship selected\n    }\n\n    private renderWeapons(): void {\n        // Reload weapons to get updated unlocked status\n        this.loadWeapons();\n        this.renderAvailableWeapons();\n        this.renderSelectedLoadout();\n        this.updateLoadoutInfo();\n    }\n\n    private renderAvailableWeapons(): void {\n        const weaponsContainer = this.element.querySelector('#availableWeaponsContainer');\n        if (!weaponsContainer) return;\n\n        weaponsContainer.innerHTML = '';\n\n        this.availableWeapons.forEach(weapon => {\n            const weaponCard = this.createWeaponCard(weapon);\n            weaponsContainer.appendChild(weaponCard);\n        });\n    }\n\n    private createWeaponCard(weapon: WeaponType): HTMLElement {\n        const card = this.createElement('div', 'weapon-card');\n        if (!weapon.unlocked) {\n            card.classList.add('locked');\n        }\n\n        const isSelected = this.selectedWeapons.some(w => w.id === weapon.id);\n        if (isSelected) {\n            card.classList.add('selected');\n        }\n\n        card.innerHTML = `\n      <div class=\"weapon-header\">\n        <h3>${weapon.name}</h3>\n        ${!weapon.unlocked ? '<div class=\"lock-icon\">🔒</div>' : ''}\n      </div>\n      <div class=\"weapon-description\">\n        <p>${weapon.description}</p>\n      </div>\n      <div class=\"weapon-stats\">\n        <div class=\"stat\">\n          <span class=\"stat-label\">Damage:</span>\n          <span class=\"stat-value\">${weapon.damage}</span>\n        </div>\n        <div class=\"stat\">\n          <span class=\"stat-label\">Energy Cost:</span>\n          <span class=\"stat-value\">${weapon.energyCost}</span>\n        </div>\n        <div class=\"stat\">\n          <span class=\"stat-label\">Efficiency:</span>\n          <span class=\"stat-value\">${(weapon.damage / weapon.energyCost).toFixed(1)}</span>\n        </div>\n      </div>\n      ${!weapon.unlocked && weapon.cost ?\n                `<div class=\"weapon-cost\">Cost: ${weapon.cost} Credits</div>` :\n                ''\n            }\n      <div class=\"weapon-actions\">\n        ${weapon.unlocked ?\n                (isSelected ?\n                    '<button class=\"remove-weapon-btn\">Remove</button>' :\n                    (this.selectedWeapons.length < this.getMaxWeapons() ?\n                        '<button class=\"add-weapon-btn\">Add to Loadout</button>' :\n                        '<span class=\"loadout-full\">Loadout Full</span>'\n                    )\n                ) :\n                `<button class=\"unlock-weapon-btn\" data-weapon-id=\"${weapon.id}\">Unlock for ${weapon.cost || 0} Credits</button>`\n            }\n      </div>\n    `;\n\n        // Add click handlers\n        const addBtn = card.querySelector('.add-weapon-btn');\n        const removeBtn = card.querySelector('.remove-weapon-btn');\n        const unlockBtn = card.querySelector('.unlock-weapon-btn');\n\n        if (addBtn) {\n            addBtn.addEventListener('click', async (e) => {\n                e.stopPropagation();\n                this.assetManager.playUIClickSound();\n                await this.addWeaponToLoadout(weapon);\n            });\n        }\n\n        if (removeBtn) {\n            removeBtn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                this.assetManager.playUIClickSound();\n                this.removeWeaponFromLoadout(weapon);\n            });\n        }\n\n        if (unlockBtn) {\n            unlockBtn.addEventListener('click', async (e) => {\n                e.stopPropagation();\n                this.assetManager.playUIClickSound();\n                await this.unlockWeapon(weapon);\n            });\n        }\n\n        return card;\n    }\n\n    private renderSelectedLoadout(): void {\n        const loadoutContainer = this.element.querySelector('#selectedLoadoutContainer');\n        if (!loadoutContainer) return;\n\n        loadoutContainer.innerHTML = '';\n\n        for (let i = 0; i < this.getMaxWeapons(); i++) {\n            const slot = this.createElement('div', 'loadout-slot');\n\n            if (i < this.selectedWeapons.length) {\n                const weapon = this.selectedWeapons[i];\n                if (weapon) {\n                    slot.innerHTML = `\n          <div class=\"slot-content\">\n            <h4>${weapon.name}</h4>\n            <p>Damage: ${weapon.damage}</p>\n            <p>Energy: ${weapon.energyCost}</p>\n            <button class=\"remove-slot-btn\" data-weapon-id=\"${weapon.id}\">Remove</button>\n          </div>\n        `;\n\n                    const removeBtn = slot.querySelector('.remove-slot-btn');\n                    if (removeBtn) {\n                        removeBtn.addEventListener('click', () => {\n                            this.assetManager.playUIClickSound();\n                            this.removeWeaponFromLoadout(weapon);\n                        });\n                    }\n                }\n            } else {\n                slot.innerHTML = `\n          <div class=\"slot-content empty\">\n            <span>Empty Slot</span>\n          </div>\n        `;\n            }\n\n            loadoutContainer.appendChild(slot);\n        }\n    }\n\n    private async addWeaponToLoadout(weapon: WeaponType): Promise<void> {\n        if (this.selectedWeapons.length >= this.getMaxWeapons()) {\n            await this.modalService.showModal('Loadout is full! Remove a weapon first.');\n            return;\n        }\n\n        if (this.selectedWeapons.some(w => w.id === weapon.id)) {\n            await this.modalService.showModal('Weapon already in loadout!');\n            return;\n        }\n\n        this.selectedWeapons.push(weapon);\n        // Save the updated loadout to settings manager\n        this.settingsManager.selectWeapons(this.selectedWeapons.map(w => w.id));\n        this.renderWeapons();\n    }\n\n    private removeWeaponFromLoadout(weapon: WeaponType): void {\n        this.selectedWeapons = this.selectedWeapons.filter(w => w.id !== weapon.id);\n        // Save the updated loadout to settings manager\n        this.settingsManager.selectWeapons(this.selectedWeapons.map(w => w.id));\n        this.renderWeapons();\n    }\n\n\n\n    private async unlockWeapon(weapon: WeaponType): Promise<void> {\n        const cost = weapon.cost || 0;\n        const currentCredits = this.getCreditsCallback?.() || 0;\n\n        if (currentCredits < cost) {\n            await this.modalService.showModal(`Insufficient credits! You need ${cost} credits but only have ${currentCredits}.`);\n            return;\n        }\n\n        const confirmed = await this.modalService.showConfirmation(`Unlock ${weapon.name} for ${cost} credits?`);\n        if (confirmed) {\n            if (this.spendCreditsCallback?.(cost)) {\n                this.settingsManager.unlockWeapon(weapon.id);\n                this.renderWeapons();\n                this.updateCreditDisplay();\n            } else {\n                await this.modalService.showModal('Failed to complete purchase. Please try again.');\n            }\n        }\n    }\n\n    private updateLoadoutInfo(): void {\n        const totalDamage = this.selectedWeapons.reduce((sum, w) => sum + w.damage, 0);\n        const totalEnergyCost = this.selectedWeapons.reduce((sum, w) => sum + w.energyCost, 0);\n        const averageEfficiency = this.selectedWeapons.length > 0\n            ? (totalDamage / totalEnergyCost).toFixed(1)\n            : '0';\n\n        this.updateElement('#loadoutTotalDamage', totalDamage.toString());\n        this.updateElement('#loadoutTotalEnergy', totalEnergyCost.toString());\n        this.updateElement('#loadoutEfficiency', averageEfficiency);\n        this.updateElement('#loadoutWeaponCount', `${this.selectedWeapons.length}/${this.getMaxWeapons()}`);\n\n        // Update apply button\n        const applyBtn = this.element.querySelector('#applyLoadoutBtn') as HTMLButtonElement;\n        if (applyBtn) {\n            applyBtn.disabled = this.selectedWeapons.length === 0;\n        }\n    }\n\n    public setOnBackCallback(callback: () => void): void {\n        this.onBackCallback = callback;\n    }\n\n    public setOnSelectCallback(callback: (weapons: WeaponType[]) => void): void {\n        this.onSelectCallback = callback;\n    }\n\n    public setCreditCallbacks(getCredits: () => number, spendCredits: (amount: number) => boolean): void {\n        this.getCreditsCallback = getCredits;\n        this.spendCreditsCallback = spendCredits;\n    }\n\n    protected override onShow(): void {\n        this.loadWeapons();\n        this.renderWeapons();\n        this.updateCreditDisplay();\n        this.hideMainCreditDisplay();\n    }\n\n    protected override onHide(): void {\n        this.showMainCreditDisplay();\n    }\n\n    private updateCreditDisplay(): void {\n        const currentCredits = this.getCreditsCallback?.() || 0;\n        const creditElement = document.getElementById('creditAmount');\n        if (creditElement) {\n            creditElement.textContent = currentCredits.toString();\n        }\n    }\n\n    private hideMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.add('hidden');\n        }\n        document.body.classList.add('credit-display-hidden');\n    }\n\n    private showMainCreditDisplay(): void {\n        const mainCreditDisplay = document.getElementById('creditDisplay');\n        if (mainCreditDisplay) {\n            mainCreditDisplay.classList.remove('hidden');\n        }\n        document.body.classList.remove('credit-display-hidden');\n    }\n}\n","import { MathChallenge } from './MathChallenge.js';\nimport { AssetManager } from './AssetManager.js';\nimport { createPlayerShip, createEnemyShip } from './Ship.js';\nimport { WeaponSystem } from './WeaponSystem.js';\nimport { CollisionManager } from './CollisionManager.js';\nimport { ParticleSystem } from './ParticleSystem.js';\nimport { EnemyAI } from './EnemyAI.js';\nimport { GameStateManager } from './GameStateManager.js';\nimport { GameRenderer } from './GameRenderer.js';\nimport { GameUI } from './GameUI.js';\nimport { GameRouter } from './Router.js';\nimport { GameSettingsManager } from './GameSettings.js';\nimport { ModalService } from './ModalService.js';\nimport { SettingsPage } from './pages/SettingsPage.js';\nimport { AboutPage } from './pages/AboutPage.js';\nimport { MapPage } from './pages/MapPage.js';\nimport { ShipSelectionPage } from './pages/ShipSelectionPage.js';\nimport { WeaponSelectionPage } from './pages/WeaponSelectionPage.js';\nimport { Ship } from './Ship.js';\n\nclass StarTrekGame {\n    // Canvas properties\n    private canvas: HTMLCanvasElement;\n    private width: number;\n    private height: number;\n\n    // Game modules\n    private assetManager: AssetManager;\n    private collisionManager: CollisionManager;\n    private particleSystem: ParticleSystem;\n    private enemyAI: EnemyAI;\n    private gameStateManager: GameStateManager;\n    private mathChallenge: MathChallenge;\n    private weaponSystem: WeaponSystem;\n    private renderer: GameRenderer;\n    private ui: GameUI;\n\n    // New modules\n    private router: GameRouter;\n    private settingsManager: GameSettingsManager;\n    private modalService: ModalService;\n    private settingsPage: SettingsPage;\n    private aboutPage: AboutPage;\n    private mapPage: MapPage;\n    private shipSelectionPage: ShipSelectionPage;\n    private weaponSelectionPage: WeaponSelectionPage;\n\n    // Ships\n    private playerShip!: Ship;\n    private enemyShip!: Ship;\n\n    // Battle tracking\n    private currentBattleCell: { q: number; r: number } | null = null;\n\n    constructor() {\n        try {\n            const canvasElement = document.getElementById('gameCanvas') as HTMLCanvasElement;\n            if (!canvasElement) {\n                throw new Error('Game canvas element not found');\n            }\n            this.canvas = canvasElement;\n            this.width = this.canvas.width;\n            this.height = this.canvas.height;\n\n            // Initialize core modules\n            this.settingsManager = new GameSettingsManager();\n            this.assetManager = new AssetManager(this.settingsManager);\n            this.collisionManager = new CollisionManager();\n            this.particleSystem = new ParticleSystem(this.assetManager);\n            this.mathChallenge = new MathChallenge(this.assetManager);\n            this.weaponSystem = new WeaponSystem(this.assetManager, this.collisionManager, this.particleSystem);\n            this.enemyAI = new EnemyAI(this.weaponSystem);\n            this.gameStateManager = new GameStateManager(this.settingsManager);\n            this.renderer = new GameRenderer(this.canvas, this.assetManager);\n            this.ui = new GameUI(this.assetManager, this.weaponSystem);\n\n            // Initialize new modules\n            this.router = new GameRouter();\n            this.modalService = new ModalService(this.assetManager);\n\n            this.settingsPage = new SettingsPage(this.settingsManager, this.assetManager, this.modalService);\n            this.aboutPage = new AboutPage(this.assetManager);\n            this.mapPage = new MapPage(this.settingsManager, this.assetManager, this.modalService);\n\n            this.shipSelectionPage = new ShipSelectionPage(this.settingsManager, this.assetManager, this.modalService);\n            this.weaponSelectionPage = new WeaponSelectionPage(this.settingsManager, this.assetManager, this.modalService);\n\n            // Initialize game\n            this.initializeControls();\n            this.initializeRouter();\n            this.initializeStartupMenu();\n\n            // Start render loop\n            this.renderLoop();\n        } catch (error) {\n            console.error('Error in StarTrekGame constructor:', error);\n            throw error;\n        }\n    }\n\n    private initializeShips(battleCell: { q: number; r: number }): void {\n        // Get selected ship type from settings\n        const selectedShipType = this.settingsManager.getSelectedShip();\n        if (!selectedShipType) {\n            throw new Error('No ship selected. Please select a ship before starting battle.');\n        }\n\n        // Get the hex cell to determine enemy ship type\n        const hexCell = this.mapPage.getHexCell(battleCell);\n        if (!hexCell || !hexCell.hasEnemy) {\n            throw new Error('Invalid battle cell or no enemy present.');\n        }\n\n        // Get selected weapons from settings\n        const selectedWeapons = this.settingsManager.getSelectedWeapons();\n\n        // Create player ship with selected ship type and weapons\n        this.playerShip = createPlayerShip(selectedShipType, this.width, this.height, selectedWeapons);\n\n        // Create enemy ship based on hex cell ship type\n        const enemyShipType = hexCell.ship;\n\n        if (!enemyShipType) {\n            throw new Error('No enemy ship type found.');\n        }\n\n        console.log('Enemy ship type:', enemyShipType);\n        const enemyShip = this.settingsManager.getShipById(enemyShipType);\n        console.log('Enemy ship:', enemyShip);\n        if (!enemyShip) {\n            throw new Error('No enemy ship found.');\n        }\n\n        // Get appropriate weapons for the enemy faction\n        const enemyWeapons = this.settingsManager.getEnemyWeapons(enemyShip.faction);\n        console.log('Enemy weapons assigned:', enemyWeapons);\n\n        this.enemyShip = createEnemyShip(enemyShip, this.width, this.height, 1, enemyWeapons);\n        console.log('Enemy ship created with weapons:', this.enemyShip.getWeapons());\n    }\n\n    private initializeControls(): void {\n        // Set up UI callbacks\n        this.ui.setWeaponCallbacks({\n            fire: (weaponType) => this.fireWeapon(weaponType)\n        });\n\n        this.ui.setRepairCallbacks({\n            show: (repairType) => this.showMathChallenge(repairType)\n        });\n\n        this.ui.setGameCallbacks({\n            start: () => this.startGame(),\n            continue: () => this.goToMap(),\n            restart: () => this.restartGame(),\n            pause: () => this.togglePause()\n        });\n    }\n\n\n    private initializeRouter(): void {\n        // Register route handlers\n        this.router.registerRoute('startup', {\n            onEnter: () => this.showStartupScreen()\n        });\n\n        this.router.registerRoute('game', {\n            onEnter: () => this.showGameScreen()\n        });\n\n        this.router.registerRoute('settings', {\n            onEnter: () => this.showSettingsPage()\n        });\n\n        this.router.registerRoute('about', {\n            onEnter: () => this.showAboutPage()\n        });\n\n        this.router.registerRoute('map', {\n            onEnter: () => this.showMapPage()\n        });\n\n        this.router.registerRoute('ship-selection', {\n            onEnter: () => this.showShipSelectionPage()\n        });\n\n        this.router.registerRoute('weapon-selection', {\n            onEnter: () => this.showWeaponSelectionPage()\n        });\n\n        // Initialize from URL hash\n        this.router.initializeFromHash();\n    }\n\n    private initializeStartupMenu(): void {\n        // Set up startup menu callbacks\n        const startGameBtn = document.getElementById('startGameBtn');\n\n        startGameBtn?.addEventListener('click', () => {\n            this.assetManager.playUIClickSound();\n            this.startMissionFlow();\n        });\n\n        // Set up page callbacks for mission flow\n        this.shipSelectionPage.setOnBackCallback(() => this.router.navigate('map'));\n        this.weaponSelectionPage.setOnBackCallback(() => this.router.navigate('map'));\n        this.mapPage.setOnBackCallback(() => this.router.navigate('startup'));\n\n        // Set up page-specific callbacks\n        this.mapPage.setOnJumpCallback((location) => this.jumpToLocation(location));\n        this.mapPage.setOnShipServicesCallback(() => this.router.navigate('ship-selection'));\n        this.mapPage.setOnWeaponServicesCallback(() => this.router.navigate('weapon-selection'));\n        this.shipSelectionPage.setOnSelectCallback((ship) => this.selectShipAndContinue(ship));\n        this.weaponSelectionPage.setOnSelectCallback((weapons) => this.selectWeaponsAndContinue(weapons));\n\n        // Set up credit callbacks for purchasing\n        this.shipSelectionPage.setCreditCallbacks(\n            () => this.gameStateManager.getCredits(),\n            (amount) => this.gameStateManager.spendCredits(amount)\n        );\n        this.weaponSelectionPage.setCreditCallbacks(\n            () => this.gameStateManager.getCredits(),\n            (amount) => this.gameStateManager.spendCredits(amount)\n        );\n        this.mapPage.setCreditCallbacks(\n            () => this.gameStateManager.getCredits(),\n            (amount) => this.gameStateManager.spendCredits(amount)\n        );\n\n        // Set up credit update callback to update UI display\n        this.gameStateManager.setCreditUpdateCallback((credits) => {\n            this.ui.updateCreditDisplay(credits);\n        });\n\n        // Initialize credit display\n        this.ui.updateCreditDisplay(this.gameStateManager.getCredits());\n\n        // Expose reset method for debugging\n        (window as any).resetGameData = () => {\n            this.settingsManager.resetAllData();\n            console.log('Game data reset to defaults');\n        };\n    }\n\n    private startMissionFlow(): void {\n        // Start mission flow: Map first, then ship/weapon selection only at starbases\n        this.router.navigate('map');\n\n        this.restartGame();\n    }\n\n    private restartGame(): void {\n        // Reset the game state\n        this.gameStateManager.restartGame();\n\n        // Navigate back to the map to start fresh\n        this.router.navigate('map');\n\n        // Reset any battle-specific state\n        this.currentBattleCell = null;\n\n        this.mapPage.restartMap();\n\n        console.log('Game restarted from UI');\n    }\n\n    private startGame(): void {\n        // Initialize ships for battle (only when battle starts)\n        if (!this.currentBattleCell) {\n            throw new Error('No battle cell set. Cannot start game.');\n        }\n        this.initializeShips(this.currentBattleCell);\n\n        // Update weapon system and UI with player ship\n        this.weaponSystem.updateWeaponConfigs(this.playerShip);\n        this.ui.updateWeaponConfigs(this.playerShip);\n\n        // Show game screen\n        this.ui.showGameScreen();\n\n        // Start the game\n        this.gameStateManager.startGame();\n\n        // Initialize pause button state\n        this.ui.updatePauseButton(false);\n    }\n\n    // Page display methods\n    private showStartupScreen(): void {\n        this.hideAllPages();\n        this.ui.showStartupScreen();\n    }\n\n    private showGameScreen(): void {\n        this.hideAllPages();\n        const gameContainer = document.getElementById('gameContainer');\n        if (gameContainer) gameContainer.style.display = 'flex';\n    }\n\n    private showSettingsPage(): void {\n        this.hideAllPages();\n        this.settingsPage.show();\n    }\n\n    private showAboutPage(): void {\n        this.hideAllPages();\n        this.aboutPage.show();\n    }\n\n    private showMapPage(): void {\n        this.hideAllPages();\n        this.mapPage.show();\n    }\n\n    private showShipSelectionPage(): void {\n        this.hideAllPages();\n        this.shipSelectionPage.show();\n    }\n\n    private showWeaponSelectionPage(): void {\n        this.hideAllPages();\n        this.weaponSelectionPage.show();\n    }\n\n    private hideAllPages(): void {\n        const startupScreen = document.getElementById('startupScreen');\n        const gameContainer = document.getElementById('gameContainer');\n\n        if (startupScreen) startupScreen.style.display = 'none';\n        if (gameContainer) gameContainer.style.display = 'none';\n\n        this.settingsPage.hide();\n        this.aboutPage.hide();\n        this.mapPage.hide();\n        this.shipSelectionPage.hide();\n        this.weaponSelectionPage.hide();\n    }\n\n    // Page callback handlers\n    private jumpToLocation(location: any): void {\n        this.settingsManager.selectLocation(location.id);\n        // Check if location has encounter and start battle\n        if (location.hasEncounter && location.encounterType === 'battle') {\n            // Extract cell coordinates from location ID (format: battle-q-r)\n            const battleMatch = location.id.match(/battle-(-?\\d+)-(-?\\d+)/);\n            if (battleMatch) {\n                this.currentBattleCell = {\n                    q: parseInt(battleMatch[1]),\n                    r: parseInt(battleMatch[2])\n                };\n            }\n\n            this.router.navigate('game');\n            // Start the game when entering battle\n            this.startGame();\n        } else {\n            // Stay on map for non-battle encounters\n            this.mapPage.show();\n        }\n    }\n\n    private selectShipAndContinue(ship: any): void {\n        this.settingsManager.selectShip(ship.id);\n        // Return to map after ship selection\n        this.router.navigate('map');\n    }\n\n    private selectWeaponsAndContinue(weapons: any[]): void {\n        const weaponIds = weapons.map(w => w.id);\n        this.settingsManager.selectWeapons(weaponIds);\n        // Return to map after weapon selection\n        this.router.navigate('map');\n    }\n\n\n\n\n    private showMathChallenge(repairType: 'hull' | 'energy'): void {\n        // Don't show if game not active or panel already open\n        if (!this.gameStateManager.isGameActive() || this.mathChallenge.isPanelOpen()) {\n            return;\n        }\n\n        // Pause the game\n        this.gameStateManager.pauseGame();\n\n        // Show math challenge with callbacks\n        this.mathChallenge.showChallenge(\n            repairType,\n            (type) => this.applyRepair(type),      // onSuccess\n            (type) => this.applyPenalty(type),     // onFailure\n            () => this.closeMathPanel()            // onCancel\n        );\n    }\n\n\n\n    private applyRepair(repairType: 'hull' | 'energy'): void {\n        const repairCost = 50; // Cost for repairs\n\n        if (this.gameStateManager.spendCredits(repairCost)) {\n            if (repairType === 'hull') {\n                this.playerShip.repairHull();\n                console.log(`Hull repaired! Cost: ${repairCost} credits`);\n            } else if (repairType === 'energy') {\n                this.playerShip.rechargeEnergy();\n                console.log(`Energy recharged! Cost: ${repairCost} credits`);\n            }\n        } else {\n            console.log(`Insufficient credits for repair! Need: ${repairCost}, Have: ${this.gameStateManager.getCredits()}`);\n        }\n    }\n\n    private applyPenalty(repairType: 'hull' | 'energy'): void {\n        if (repairType === 'hull') {\n            const wasDestroyed = this.playerShip.takeDamage(1);\n\n            // Check if player is defeated due to penalty\n            if (wasDestroyed) {\n                this.gameStateManager.endGame('MISSION FAILED');\n                this.ui.showRestartButton();\n                this.mathChallenge.closePanel();\n                console.log('Game Over due to penalty!');\n            }\n        } else if (repairType === 'energy') {\n            this.playerShip.consumeEnergy(1);\n            console.log(`Penalty applied to energy! Energy: ${this.playerShip.energy}`);\n        }\n    }\n\n    private closeMathPanel(): void {\n        // Resume game\n        this.gameStateManager.resumeGame();\n\n        console.log('Math challenge closed, game resumed');\n    }\n\n    private togglePause(): void {\n        if (this.gameStateManager.isGamePaused()) {\n            this.gameStateManager.resumeGame();\n            this.ui.updatePauseButton(false);\n            console.log('Game resumed');\n        } else {\n            this.gameStateManager.pauseGame();\n            this.ui.updatePauseButton(true);\n            console.log('Game paused');\n        }\n    }\n\n    private fireWeapon(weaponType: string): void {\n        // Don't allow firing if game is not active or level is completed\n        if (!this.gameStateManager.isGameActive() || this.gameStateManager.isLevelCompleted()) {\n            return;\n        }\n\n        // Get the weapon instance from the player ship\n        const weapon = this.playerShip.getWeapons().find(w => w.templateId === weaponType);\n        if (!weapon) {\n            console.error(`Player doesn't have weapon type: ${weaponType}`);\n            return;\n        }\n\n        // Fire weapon using weapon system (which handles energy checking internally)\n        this.weaponSystem.fireWeapon(weapon, this.playerShip, this.enemyShip);\n        console.log(`Fired ${weapon.name}!`);\n    }\n\n    private updateShips(): void {\n        // Don't update ship positions if game is not active\n        if (!this.gameStateManager.isGameActive()) {\n            return;\n        }\n\n        // Update ship movements\n        this.playerShip.update();\n        this.enemyShip.update();\n    }\n\n    private updateProjectiles(): void {\n        // Don't update projectiles if game is not active\n        if (!this.gameStateManager.isGameActive()) {\n            return;\n        }\n\n        // Update enemy AI (only if level not completed)\n        const gameActive = !this.gameStateManager.isLevelCompleted();\n        this.enemyAI.update(this.enemyShip, this.playerShip, gameActive);\n\n        // Check if player was destroyed by enemy fire\n        if (this.gameStateManager.checkDefeatCondition(this.playerShip)) {\n            setTimeout(() => {\n                this.ui.showRestartButton();\n            }, 1000);\n        }\n\n        // Update weapon system\n        this.weaponSystem.update(this.playerShip, this.enemyShip);\n\n        // Check for victory condition after projectiles are updated\n        if (this.gameStateManager.checkVictoryCondition(this.enemyShip)) {\n            // Award credits for winning the battle\n            const battleReward = 100;\n            this.gameStateManager.addCredits(battleReward);\n            console.log(`Battle won! Awarded ${battleReward} credits`);\n\n            // Clear the enemy from the current battle cell\n            if (this.currentBattleCell) {\n                this.mapPage.clearEnemyFromCell(this.currentBattleCell);\n                console.log(`Cleared enemy from cell (${this.currentBattleCell.q}, ${this.currentBattleCell.r})`);\n                this.currentBattleCell = null; // Reset for next battle\n            }\n\n            // Show go to map button after a brief delay for explosion\n            setTimeout(() => {\n                this.showGoToMapButton();\n            }, 1000);\n        }\n    }\n\n\n\n    private render(): void {\n        const currentState = this.gameStateManager.getCurrentState();\n\n        // Create game state object for renderer\n        const gameState = {\n            level: currentState.level,\n            gameOver: currentState.gameOver,\n            gameOverMessage: currentState.gameOverMessage,\n            playerShip: this.playerShip,\n            enemyShip: this.enemyShip,\n            weaponSystem: this.weaponSystem\n        };\n\n        // Render using the GameRenderer (only if ships are initialized)\n        if (this.playerShip && this.enemyShip) {\n            this.renderer.render(gameState);\n        } else {\n            // Render just the background/stars when ships aren't initialized yet\n            this.renderer.renderBackground();\n        }\n\n        // Update UI (only if ships are initialized)\n        if (this.playerShip && this.enemyShip) {\n            this.ui.updateUI(gameState);\n        }\n    }\n\n\n\n    private goToMap(): void {\n        // Reset ships for next battle\n        this.playerShip.reset({\n            x: this.width / 2,\n            y: this.height - 120,\n            health: this.playerShip.maxHealth,\n            energy: this.playerShip.maxEnergy,\n            direction: 1\n        });\n\n        this.enemyShip.reset({\n            x: this.width / 2,\n            y: 90,\n            health: this.enemyShip.maxHealth,\n            direction: -1\n        });\n\n        // Clear weapon system\n        this.weaponSystem.clear();\n\n        // Navigate back to map\n        this.router.navigate('map');\n    }\n\n    private showGoToMapButton(): void {\n        // Hide continue button and show go to map button\n        this.ui.hideContinueButton();\n\n        // Create or show go to map button\n        const continueContainer = document.getElementById('continueContainer');\n        if (continueContainer) {\n            const continueBtn = continueContainer.querySelector('#continueBtn') as HTMLButtonElement;\n            if (continueBtn) {\n                continueBtn.textContent = 'Go to Map';\n                continueBtn.onclick = () => this.goToMap();\n                continueContainer.style.display = 'block';\n            }\n        }\n    }\n\n    private renderLoop(): void {\n        // Update router\n        this.router.update();\n\n        // Always update renderer animations\n        this.renderer.update();\n\n        // Only update game logic if game is active AND we're on the game route\n        if (this.gameStateManager.isGameActive() && this.router.getCurrentRoute() === 'game') {\n            this.updateShips();\n            this.updateProjectiles();\n        }\n\n        // Always render\n        this.render();\n\n        requestAnimationFrame(() => this.renderLoop());\n    }\n}\n\n// Initialize game when page loads\nwindow.addEventListener('load', () => {\n    try {\n        console.log('Window loaded, initializing game...');\n        new StarTrekGame();\n        console.log('Game initialized successfully');\n    } catch (error) {\n        console.error('Error initializing game:', error);\n    }\n});\n"],"names":["MathChallenge","constructor","assetManager","this","currentChallenge","panelOpen","initializeEventListeners","cancelBtn","document","getElementById","optionA","optionB","optionC","optionD","addEventListener","playUIClickSound","closePanel","selectOption","event","key","showChallenge","repairType","onSuccess","onFailure","onCancel","num1","Math","floor","random","num2","correctAnswer","options","generateOptions","correctOptionLetter","correctLetter","updatePanelContent","showPanel","console","log","A","B","C","D","wrongAnswers","length","wrongAnswer","includes","push","allOptions","i","j","find","letter","Error","questionElement","descriptionElement","feedbackElement","textContent","className","optionAElement","_a","querySelector","optionBElement","_b","optionCElement","_c","optionDElement","_d","String","forEach","id","btn","classList","remove","selectedLetter","selectedBtn","add","correctBtn","setTimeout","weaponsPanel","mathPanel","style","display","isPanelOpen","getCurrentChallenge","AssetManager","gameSettings","images","sounds","loadingComplete","loadPromises","initializeAssets","baseUrl","loadShipImages","loadWeaponSounds","loadExplosionSounds","loadUISounds","waitForAssets","then","catch","error","getAllShips","ship","image","loadImage","weapons","getAllWeapons","uniqueSounds","Set","weapon","soundFile","soundKey","replace","loadSound","getExplosionSounds","explosion","src","img","Image","loadPromise","Promise","resolve","reject","onload","onerror","e","audio","Audio","volume","load","checkAssetsLoaded","allImagesLoaded","Object","values","every","complete","all","getImage","name","getSound","playSound","sound","currentTime","play","playWeaponSound","weaponType","getWeaponSoundFile","playExplosionSound","explosionSounds","randomSound","isLoaded","getAssets","Ship","config","shipData","x","y","width","height","health","maxHealth","energy","maxEnergy","velocityX","direction","minX","maxX","isPlayer","isEnemy","update","takeDamage","damage","max","repairHull","amount","min","rechargeEnergy","consumeEnergy","getBounds","left","right","top","bottom","contains","bounds","reset","levelUp","level","getHealthPercent","getEnergyPercent","isDestroyed","isAlive","getWeapons","getWeapon","weaponId","addWeapon","weaponSlots","templateId","Date","now","lastModified","removeWeapon","index","findIndex","splice","upgradeWeapon","upgradeId","upgrades","upgrade","u","keys","effects","effect","filter","createShipData","shipType","customName","weaponInstances","map","weaponTemplate","description","energyCost","projectileSpeed","projectileLifetime","isInstantHit","hasParticles","useCircularArc","currentEnergy","loadingTime","projectileColor","projectileSize","faction","cost","createWeaponInstance","value","speed","experience","createdAt","WeaponSystem","collisionManager","particleSystem","lastUpdateTime","projectiles","missMessages","updateWeaponConfigs","playerShip","updateWeaponLoading","deltaTime","energyGain","fireWeapon","shooterShip","targetShip","haveEnoughEnergyFor","createPhaserBeam","createShipExplosion","projectile","createProjectile","startY","arcHeight","startX","targetX","targetY","progress","arcDirection","color","type","trail","isEnemyProjectile","particles","beam","duration","startTime","enemyShip","updateProjectiles","updateMissMessages","phaserBeam","explosionParticle","vx","vy","life","torpedoProjectile","updateProjectileArc","maxTrailLength","shift","updateQuantumParticles","checkCollisions","checkProjectileMiss","createMissMessage","prevX","prevY","t","cached","deltaX","deltaY","distance","sqrt","perpX","perpY","baseX","baseY","arcOffset","sin","PI","dx","dy","rotation","atan2","collisionResult","checkProjectileCollision","hit","impactPoint","createExplosion","wasDestroyed","messageX","messageY","text","maxLife","fontSize","message","clear","getProjectiles","getExplosionParticles","getMissMessages","getShipExplosions","getWeaponLoadingProgress","CollisionManager","checkShipCollision","ship1","ship2","bounds1","bounds2","checkPointInShip","ParticleSystem","explosionParticles","shipExplosions","newParticles","size","explosionData","particle","wave","updateExplosionParticles","updateShipExplosions","EnemyAI","weaponSystem","lastShotTime","baseShootInterval","shootInterval","gameActive","fireAtPlayer","availableWeapons","selectedWeapon","scaledWeapon","setLevel","getShootInterval","getLevel","forceShot","setDifficulty","difficulty","GameStateManager","settingsManager","gameOver","gameOverMessage","levelCompleted","gameStarted","gamePaused","currentCredits","callbacks","onStateChange","callback","notifyStateChange","state","getCurrentState","startGame","pauseGame","resumeGame","endGame","completeLevel","advanceToNextLevel","enemyAI","canvasWidth","canvasHeight","restartGame","resetAllData","creditUpdateCallback","checkVictoryCondition","checkDefeatCondition","canUpdate","canUpdateProjectiles","isGameActive","isLevelCompleted","isGameOver","isGameStarted","isGamePaused","setCreditUpdateCallback","updateCredits","addCredits","spendCredits","getCredits","GameRenderer","canvas","context","getContext","ctx","stars","initializeStars","brightness","updateStars","star","render","gameState","fillStyle","fillRect","drawStars","drawShips","drawProjectiles","drawMissMessages","drawShipExplosions","drawGameOverScreen","drawLoadingScreen","renderBackground","font","textAlign","fillText","globalAlpha","playerImage","drawShipWithTransparency","enemyImage","glowColor","cacheKey","processedImageCache","Map","processedCanvas","get","createElement","tempCtx","drawImage","imageData","getImageData","data","r","g","b","abs","putImageData","set","drawPhaserBeam","drawExplosionParticle","drawTorpedo","alpha","endX","endY","strokeStyle","lineWidth","shadowColor","shadowBlur","beginPath","moveTo","lineTo","stroke","point","arc","fill","radius","GameUI","weaponCallbacks","repairCallbacks","gameCallbacks","weaponListenersAdded","repairListenersAdded","gameListenersAdded","pauseListenerAdded","updateWeaponUI","selectedWeapons","innerHTML","weaponBtn","fire","call","appendChild","updateCreditDisplay","credits","querySelectorAll","element","toString","hideMainCreditDisplay","mainCreditDisplay","body","showMainCreditDisplay","setWeaponCallbacks","photonBtn","phaserBtn","quantumBtn","setRepairCallbacks","repairHullBtn","repairEnergyBtn","showMathChallenge","setGameCallbacks","restartBtn","continueBtn","restart","hideRestartButton","continue","hideContinueButton","pauseBtn","pause","button","show","updateUI","updateHealthBars","updateWeaponStatus","updateLevelDisplay","updateEnemyLabel","hullBar","energyBar","energyPercent","enemyHealthBar","enemyHealthPercent","statusElement","loadingBar","isReady","loadingProgress","borderColor","backgroundColor","opacity","cursor","loadingPercent","round","_level","levelNumber","enemyLabel","showStartupScreen","startupScreen","gameContainer","showGameScreen","showRestartButton","restartContainer","showContinueButton","continueContainer","updatePauseButton","isPaused","pauseText","showWeaponsPanel","showGameControlsPanel","gameControlsPanel","GameRouter","currentRoute","routes","routeHistory","initializeRoutes","registerRoute","route","handler","navigate","currentHandler","onExit","newHandler","onEnter","window","location","hash","goBack","pop","previousRoute","getCurrentRoute","isOnRoute","onUpdate","initializeFromHash","slice","has","getHistory","GameSettingsManager","selectedShip","currentLocation","unlockedShips","unlockedWeapons","unlockedLocations","__cachedWeapons","settings","getDefaultSettings","loadSettings","initializeDefaultSelections","masterVolume","musicVolume","sfxVolume","particleEffects","screenShake","fullscreen","autoSave","showFPS","keyBindings","uiScale","theme","selectedFaction","availableShips","getAvailableShips","maxWeapons","getAvailableWeapons","availableLocations","getAvailableLocations","getSettings","updateSettings","newSettings","saveSettings","resetSettings","getSelectedFaction","setSelectedFaction","getEnemyShipType","romulanShips","unlocked","getShipById","shipId","s","getEnemyShips","getEnemyWeapons","selectShip","getSelectedShip","unlockShip","Array","from","clearSelectedShip","getWeaponTemplatesByIds","weaponIds","w","selectWeapons","getSelectedWeapons","unlockWeapon","clearSelectedWeapons","getAllLocations","hasEncounter","encounterType","selectLocation","locationId","l","getCurrentLocation","unlockLocation","getWeaponProperties","getWeaponTemplateById","localStorage","setItem","JSON","stringify","warn","getItem","parsed","parse","isArray","ModalService","modalContainer","currentModal","initializeModalContainer","showModal","createModal","action","closeModal","primary","showConfirmation","buttons","overlay","modal","messageElement","buttonContainer","buttonConfig","escapeHandler","removeEventListener","primaryButton","focus","UIComponent","elementId","autoInitialize","isVisible","initialize","onShow","hide","onHide","toggle","isComponentVisible","tag","addClickHandler","selector","updateElement","content","updateElementHTML","html","SettingsPage","modalService","super","setupEventListeners","renderSettings","onBackCallback","updateMasterVolume","updateMusicVolume","updateSFXVolume","toggleParticleEffects","toggleScreenShake","toggleFullscreen","updateDifficulty","toggleAutoSave","toggleShowFPS","updateUIScale","updateTheme","async","updateSliderValue","updateToggleState","updateSelectValue","slider","enabled","checked","select","parseFloat","documentElement","requestFullscreen","exitFullscreen","setProperty","setOnBackCallback","AboutPage","renderContent","showVersionInfo","showCredits","toLocaleDateString","versionInfo","showSection","section","HexagonalMap","cells","playerPosition","q","mapSize","hexSize","generateMap","placeStarbases","placeEnemies","r1","r2","coordinate","cell","hasShip","hasEnemy","isAccessible","isStarbase","isBorderCell","coordinateToKey","setPlayerPosition","pos","getCell","fromCharCode","accessibleCells","enemyCount","enemyShips","randomIndex","selectedEnemyShip","getPlayerPosition","getPlayerShip","playerCell","oldCell","getAdjacentCells","dir","getAccessibleAdjacentCells","adjCoord","canMoveTo","some","adj","getCellAtPixel","adjustedX","adjustedY","getPixelFromCoordinate","getAllCells","getCellsInRange","center","range","getMapSize","getHexSize","clearEnemyFromCell","resetPlayerPosition","currentCell","startCell","regenerateMap","MapPage","hoveredCell","selectedCell","hasMovedToStarbase","hexagonalMap","setupMapCanvas","playerPos","startingCell","renderMap","mapCanvas","mapCtx","handleMapClick","handleMapHover","handleMapLeave","moveToCell","onShipServicesCallback","onWeaponServicesCallback","clearRect","drawStarfield","drawHexagonalGrid","drawCellInfo","pixelPos","drawHexagon","isPlayerPos","isHovered","isSelected","fillColor","strokeColor","angle","hexX","cos","hexY","closePath","boxX","boxY","strokeRect","canMove","isAtCurrentPosition","isAdjacent","rect","getBoundingClientRect","clientX","clientY","updateCellInfo","encounterInfo","updateCellImageDisplay","jumpBtn","shipSelectionBtn","shipServicesBtn","disabled","shipName","cellImageContainer","cellImage","imagePath","getShipImagePath","onJumpCallback","setOnJumpCallback","setCreditCallbacks","_spendCredits","getCreditsCallback","setOnShipServicesCallback","setOnWeaponServicesCallback","creditElement","getHexCell","restartMap","ShipSelectionPage","loadShips","renderShips","allShips","shipsContainer","shipCard","createShipCard","card","buttonText","charAt","toUpperCase","stopPropagation","handleShipAction","onSelectCallback","spendCreditsCallback","setOnSelectCallback","WeaponSelectionPage","loadWeapons","renderWeapons","getMaxWeapons","renderAvailableWeapons","renderSelectedLoadout","updateLoadoutInfo","weaponsContainer","weaponCard","createWeaponCard","toFixed","addBtn","removeBtn","unlockBtn","addWeaponToLoadout","removeWeaponFromLoadout","loadoutContainer","slot","totalDamage","reduce","sum","totalEnergyCost","averageEfficiency","applyBtn","StarTrekGame","currentBattleCell","canvasElement","mathChallenge","gameStateManager","renderer","ui","router","settingsPage","aboutPage","mapPage","shipSelectionPage","weaponSelectionPage","initializeControls","initializeRouter","initializeStartupMenu","renderLoop","initializeShips","battleCell","selectedShipType","hexCell","createPlayerShip","enemyShipType","enemyWeapons","_canvasHeight","createEnemyShip","start","goToMap","togglePause","showSettingsPage","showAboutPage","showMapPage","showShipSelectionPage","showWeaponSelectionPage","startGameBtn","startMissionFlow","jumpToLocation","selectShipAndContinue","selectWeaponsAndContinue","resetGameData","hideAllPages","battleMatch","match","parseInt","applyRepair","applyPenalty","closeMathPanel","updateShips","battleReward","showGoToMapButton","currentState","onclick","requestAnimationFrame"],"mappings":"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"}