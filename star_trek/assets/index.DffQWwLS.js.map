{"version":3,"file":"index.DffQWwLS.js","sources":["../../src/MathChallenge.js","../../src/AssetManager.js","../../src/Ship.js","../../src/WeaponSystem.js","../../src/GameRenderer.js","../../src/GameUI.js","../../src/game.js"],"sourcesContent":["/**\n * MathChallenge - Handles math problem generation and repair system\n */\nexport class MathChallenge {\n    constructor() {\n        this.currentChallenge = null;\n        this.panelOpen = false;\n        this.initializeEventListeners();\n    }\n\n    initializeEventListeners() {\n        const cancelBtn = document.getElementById('cancelMathBtn');\n        const optionA = document.getElementById('optionA');\n        const optionB = document.getElementById('optionB');\n        const optionC = document.getElementById('optionC');\n        const optionD = document.getElementById('optionD');\n        \n        cancelBtn.addEventListener('click', () => this.closePanel());\n        \n        // Add event listeners for multiple choice options\n        optionA.addEventListener('click', () => this.selectOption('A'));\n        optionB.addEventListener('click', () => this.selectOption('B'));\n        optionC.addEventListener('click', () => this.selectOption('C'));\n        optionD.addEventListener('click', () => this.selectOption('D'));\n        \n        // Allow Escape key to cancel\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && this.panelOpen) {\n                this.closePanel();\n            }\n        });\n    }\n\n    showChallenge(repairType, onSuccess, onFailure, onCancel) {\n        // Don't show if panel already open\n        if (this.panelOpen) {\n            return false;\n        }\n        \n        this.panelOpen = true;\n        \n        // Generate random multiplication question\n        const num1 = Math.floor(Math.random() * 9) + 2; // 2-10\n        const num2 = Math.floor(Math.random() * 9) + 2; // 2-10\n        const correctAnswer = num1 * num2;\n        \n        // Generate multiple choice options\n        const options = this.generateOptions(correctAnswer);\n        \n        this.currentChallenge = {\n            num1,\n            num2,\n            correctAnswer,\n            repairType,\n            options,\n            correctOptionLetter: options.correctLetter,\n            onSuccess,\n            onFailure,\n            onCancel\n        };\n        \n        this.updatePanelContent();\n        this.showPanel();\n        \n        console.log(`Math challenge: ${num1} × ${num2} = ${correctAnswer} (for ${repairType})`);\n        console.log(`Options: A=${options.A}, B=${options.B}, C=${options.C}, D=${options.D}, Correct=${options.correctLetter}`);\n        \n        return true;\n    }\n\n    generateOptions(correctAnswer) {\n        // Generate 3 wrong answers\n        const wrongAnswers = [];\n        \n        // Create wrong answers by adding/subtracting small amounts and multiplying by close factors\n        while (wrongAnswers.length < 3) {\n            let wrongAnswer;\n            const method = Math.floor(Math.random() * 4);\n            \n            switch (method) {\n                case 0: // Add a small amount\n                    wrongAnswer = correctAnswer + Math.floor(Math.random() * 10) + 1;\n                    break;\n                case 1: // Subtract a small amount\n                    wrongAnswer = correctAnswer - Math.floor(Math.random() * 10) - 1;\n                    break;\n                case 2: // Multiply by a close factor\n                    wrongAnswer = Math.floor(correctAnswer * (0.8 + Math.random() * 0.4));\n                    break;\n                case 3: // Use a common mistake (like one number * 10)\n                    wrongAnswer = Math.floor(correctAnswer / 10) * 10 + Math.floor(Math.random() * 10);\n                    break;\n            }\n            \n            // Make sure it's positive and different from correct answer and other wrong answers\n            if (wrongAnswer > 0 && wrongAnswer !== correctAnswer && !wrongAnswers.includes(wrongAnswer)) {\n                wrongAnswers.push(wrongAnswer);\n            }\n        }\n        \n        // Create array of all options\n        const allOptions = [correctAnswer, ...wrongAnswers];\n        \n        // Shuffle the options\n        for (let i = allOptions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [allOptions[i], allOptions[j]] = [allOptions[j], allOptions[i]];\n        }\n        \n        // Assign to letters\n        const options = {\n            A: allOptions[0],\n            B: allOptions[1],\n            C: allOptions[2],\n            D: allOptions[3]\n        };\n        \n        // Find which letter has the correct answer\n        const letters = ['A', 'B', 'C', 'D'];\n        options.correctLetter = letters.find(letter => options[letter] === correctAnswer);\n        \n        return options;\n    }\n\n    updatePanelContent() {\n        if (!this.currentChallenge) return;\n        \n        const { num1, num2, repairType, options } = this.currentChallenge;\n        \n        // Update panel content\n        const questionElement = document.getElementById('mathQuestion');\n        const descriptionElement = document.getElementById('mathDescription');\n        const feedbackElement = document.getElementById('mathFeedback');\n        \n        questionElement.textContent = `${num1} × ${num2} = ?`;\n        descriptionElement.textContent = `Complete this calculation to repair your ${repairType === 'hull' ? 'hull integrity' : 'energy reserves'}`;\n        feedbackElement.textContent = '';\n        feedbackElement.className = 'math-feedback';\n        \n        // Update option buttons\n        document.getElementById('optionA').querySelector('.option-value').textContent = options.A;\n        document.getElementById('optionB').querySelector('.option-value').textContent = options.B;\n        document.getElementById('optionC').querySelector('.option-value').textContent = options.C;\n        document.getElementById('optionD').querySelector('.option-value').textContent = options.D;\n        \n        // Reset option button styles\n        ['optionA', 'optionB', 'optionC', 'optionD'].forEach(id => {\n            const btn = document.getElementById(id);\n            btn.classList.remove('correct', 'incorrect');\n        });\n    }\n\n    selectOption(selectedLetter) {\n        if (!this.currentChallenge) return;\n        \n        const feedbackElement = document.getElementById('mathFeedback');\n        const selectedBtn = document.getElementById(`option${selectedLetter}`);\n        \n        // Reset all button styles first\n        ['optionA', 'optionB', 'optionC', 'optionD'].forEach(id => {\n            const btn = document.getElementById(id);\n            btn.classList.remove('correct', 'incorrect');\n        });\n        \n        if (selectedLetter === this.currentChallenge.correctOptionLetter) {\n            // Correct answer!\n            selectedBtn.classList.add('correct');\n            feedbackElement.textContent = 'CORRECT! Repair applied.';\n            feedbackElement.className = 'math-feedback success';\n            \n            // Call success callback and close immediately\n            if (this.currentChallenge.onSuccess) {\n                this.currentChallenge.onSuccess(this.currentChallenge.repairType);\n            }\n            this.closePanel();\n        } else {\n            // Wrong answer - apply penalty\n            selectedBtn.classList.add('incorrect');\n            feedbackElement.textContent = 'INCORRECT! Penalty applied. Try again.';\n            feedbackElement.className = 'math-feedback error';\n            \n            // Call failure callback\n            if (this.currentChallenge.onFailure) {\n                this.currentChallenge.onFailure(this.currentChallenge.repairType);\n            }\n            \n            // Show correct answer briefly\n            const correctBtn = document.getElementById(`option${this.currentChallenge.correctOptionLetter}`);\n            correctBtn.classList.add('correct');\n            \n            // Reset after 2 seconds\n            setTimeout(() => {\n                selectedBtn.classList.remove('incorrect');\n                correctBtn.classList.remove('correct');\n                feedbackElement.textContent = '';\n                feedbackElement.className = 'math-feedback';\n            }, 2000);\n        }\n    }\n\n    showPanel() {\n        // Hide weapons panel and show math challenge panel\n        const weaponsPanel = document.querySelector('.weapons-panel');\n        const mathPanel = document.getElementById('mathChallengePanel');\n        weaponsPanel.style.display = 'none';\n        mathPanel.style.display = 'block';\n    }\n\n    closePanel() {\n        // Hide math challenge panel and show weapons panel\n        const mathPanel = document.getElementById('mathChallengePanel');\n        const weaponsPanel = document.querySelector('.weapons-panel');\n        mathPanel.style.display = 'none';\n        weaponsPanel.style.display = 'block';\n        \n        // Call cancel callback if provided\n        if (this.currentChallenge && this.currentChallenge.onCancel) {\n            this.currentChallenge.onCancel();\n        }\n        \n        // Reset state\n        this.panelOpen = false;\n        this.currentChallenge = null;\n        \n        console.log('Math challenge closed');\n    }\n\n    isPanelOpen() {\n        return this.panelOpen;\n    }\n\n    getCurrentChallenge() {\n        return this.currentChallenge;\n    }\n}\n","/**\n * AssetManager - Handles loading and managing game assets (images and sounds)\n */\nexport class AssetManager {\n    constructor() {\n        this.images = {};\n        this.sounds = {};\n        this.loadingComplete = false;\n        this.loadPromises = [];\n        \n        this.initializeAssets();\n    }\n\n    initializeAssets() {\n        // Load images with promises\n        this.images = {\n            playerShip: this.loadImage('/assets/images/player-ship.png'),\n            enemyShip: this.loadImage('/assets/images/opponent-ship.png'),\n        };\n\n        // Load sounds with promises\n        this.sounds = {\n            photon: this.loadSound('/assets/sounds/photon_torpedo.mp3'),\n            phaser: this.loadSound('/assets/sounds/phasers.mp3'),\n            quantum: this.loadSound('/assets/sounds/quantum_torpedo.mp3'),\n            romulanDisruptor: this.loadSound('/assets/sounds/romulan_disruptor.mp3'),\n            romulanTorpedo: this.loadSound('/assets/sounds/romulan_torpedo.mp3'),\n            explosion1: this.loadSound('/assets/sounds/smallexplosion1.mp3'),\n            explosion2: this.loadSound('/assets/sounds/smallexplosion2.mp3'),\n        };\n\n        // Use promise-based loading instead of polling\n        this.waitForAssets().then(() => {\n            this.loadingComplete = true;\n            console.log('All assets loaded successfully!');\n        }).catch(error => {\n            console.error('Error loading assets:', error);\n        });\n    }\n\n    loadImage(src) {\n        const img = new Image();\n        \n        const loadPromise = new Promise((resolve, reject) => {\n            img.onload = () => {\n                console.log(`Image loaded: ${src}`);\n                resolve(img);\n            };\n            img.onerror = (e) => {\n                console.error(`Image load error for ${src}:`, e);\n                reject(e);\n            };\n        });\n        \n        this.loadPromises.push(loadPromise);\n        img.src = src;\n        return img;\n    }\n\n    loadSound(src) {\n        const audio = new Audio(src);\n        audio.volume = 0.3; // 30% volume to avoid being too loud\n        \n        const loadPromise = new Promise((resolve, reject) => {\n            audio.addEventListener('canplaythrough', () => {\n                console.log(`Sound loaded: ${src}`);\n                resolve(audio);\n            });\n            audio.addEventListener('error', (e) => {\n                console.error(`Sound load error for ${src}:`, e);\n                reject(e);\n            });\n        });\n        \n        this.loadPromises.push(loadPromise);\n        audio.load(); // Start loading\n        return audio;\n    }\n\n    checkAssetsLoaded() {\n        const allImagesLoaded = Object.values(this.images).every(img => img.complete);\n        \n        if (allImagesLoaded && !this.loadingComplete) {\n            this.loadingComplete = true;\n            console.log('All assets loaded successfully!');\n            return true;\n        } else if (!allImagesLoaded) {\n            // Check again in 100ms\n            setTimeout(() => this.checkAssetsLoaded(), 100);\n            return false;\n        }\n        \n        return this.loadingComplete;\n    }\n\n    // Promise-based asset loading\n    async waitForAssets() {\n        try {\n            await Promise.all(this.loadPromises);\n            this.loadingComplete = true;\n            console.log('All assets loaded via promises!');\n            return true;\n        } catch (error) {\n            console.error('Error loading assets:', error);\n            return false;\n        }\n    }\n\n    getImage(name) {\n        return this.images[name];\n    }\n\n    getSound(name) {\n        return this.sounds[name];\n    }\n\n    playSound(name) {\n        const sound = this.sounds[name];\n        if (sound) {\n            console.log(`Playing ${name} sound...`);\n            sound.currentTime = 0; // Reset to beginning\n            sound.play().catch(error => {\n                console.error(`Sound play failed for ${name}:`, error);\n            });\n        } else {\n            console.error(`Sound not found: ${name}`);\n        }\n    }\n\n    playWeaponSound(weaponType) {\n        console.log(`${weaponType.toUpperCase()} FIRED!`);\n        this.playSound(weaponType);\n    }\n\n    playEnemyWeaponSound(weaponType) {\n        console.log(`ENEMY ${weaponType.toUpperCase()} FIRED!`);\n        \n        // Map enemy weapon types to Romulan sounds\n        const soundMap = {\n            'phaser': 'romulanDisruptor',\n            'torpedo': 'romulanTorpedo'\n        };\n        \n        const soundKey = soundMap[weaponType];\n        if (soundKey) {\n            this.playSound(soundKey);\n        } else {\n            console.error(`Enemy sound not found for weapon type: ${weaponType}`);\n        }\n    }\n\n    playExplosionSound() {\n        // Randomly select between the two explosion sounds\n        const explosionSounds = ['explosion1', 'explosion2'];\n        const randomSound = explosionSounds[Math.floor(Math.random() * explosionSounds.length)];\n        this.playSound(randomSound);\n    }\n\n    isLoaded() {\n        return this.loadingComplete;\n    }\n\n    // Get all assets for backwards compatibility\n    getAssets() {\n        return {\n            images: this.images,\n            sounds: this.sounds\n        };\n    }\n}\n","/**\n * Ship - Represents player and enemy ships with their properties and behaviors\n */\nexport class Ship {\n    constructor(config) {\n        // Position and size\n        this.x = config.x;\n        this.y = config.y;\n        this.width = config.width;\n        this.height = config.height;\n        \n        // Health and energy\n        this.health = config.health || 100;\n        this.maxHealth = config.maxHealth || this.health;\n        this.energy = config.energy || 100;\n        this.maxEnergy = config.maxEnergy || this.energy;\n        \n        // Movement properties\n        this.velocityX = config.velocityX || 0.8;\n        this.direction = config.direction || 1; // 1 for right, -1 for left\n        this.minX = config.minX || 60;\n        this.maxX = config.maxX || 740;\n        \n        // Ship type\n        this.isPlayer = config.isPlayer || false;\n        this.isEnemy = config.isEnemy || false;\n    }\n\n    // Update ship position and handle boundary collisions\n    update() {\n        // Update position\n        this.x += this.velocityX * this.direction;\n        \n        // Bounce off boundaries\n        if (this.x <= this.minX) {\n            this.x = this.minX;\n            this.direction = 1; // Change direction to right\n        } else if (this.x >= this.maxX) {\n            this.x = this.maxX;\n            this.direction = -1; // Change direction to left\n        }\n    }\n\n    // Take damage\n    takeDamage(damage) {\n        this.health -= damage;\n        this.health = Math.max(0, this.health);\n        \n        console.log(`${this.isPlayer ? 'Player' : 'Enemy'} took ${damage} damage! Health: ${this.health}`);\n        \n        return this.health <= 0; // Return true if destroyed\n    }\n\n    // Repair hull (used by math challenge system)\n    repairHull(amount = 50) {\n        this.health = Math.min(this.maxHealth, this.health + amount);\n        console.log(`Hull repaired! Health: ${this.health}`);\n    }\n\n    // Recharge energy (used by math challenge system)\n    rechargeEnergy(amount = 50) {\n        if (this.isPlayer) {\n            this.energy = Math.min(this.maxEnergy, this.energy + amount);\n            console.log(`Energy recharged! Energy: ${this.energy}`);\n        }\n    }\n\n    // Consume energy (for weapons)\n    consumeEnergy(amount) {\n        if (this.isPlayer) {\n            this.energy -= amount;\n            this.energy = Math.max(0, this.energy);\n            return this.energy >= 0;\n        }\n        return true; // Enemy ships don't use energy system\n    }\n\n    // Check if ship has enough energy for an action\n    hasEnergy(amount) {\n        if (this.isPlayer) {\n            return this.energy >= amount;\n        }\n        return true; // Enemy ships don't use energy system\n    }\n\n    // Get collision bounds\n    getBounds() {\n        return {\n            left: this.x - this.width/2,\n            right: this.x + this.width/2,\n            top: this.y - this.height/2,\n            bottom: this.y + this.height/2\n        };\n    }\n\n    // Check if a point is inside the ship\n    contains(x, y) {\n        const bounds = this.getBounds();\n        return x >= bounds.left && x <= bounds.right &&\n               y >= bounds.top && y <= bounds.bottom;\n    }\n\n    // Reset ship to initial state\n    reset(config) {\n        this.x = config.x;\n        this.y = config.y;\n        this.health = config.health || this.maxHealth;\n        this.energy = config.energy || this.maxEnergy;\n        this.direction = config.direction || 1;\n    }\n\n    // Level up enemy ship (increase stats)\n    levelUp(level) {\n        if (this.isEnemy) {\n            this.maxHealth = 100 + (level - 1) * 25;\n            this.health = this.maxHealth;\n            console.log(`Enemy leveled up! Level ${level}, Health: ${this.maxHealth}`);\n        }\n    }\n\n    // Get health percentage\n    getHealthPercent() {\n        return (this.health / this.maxHealth) * 100;\n    }\n\n    // Get energy percentage  \n    getEnergyPercent() {\n        return (this.energy / this.maxEnergy) * 100;\n    }\n\n    // Check if ship is destroyed\n    isDestroyed() {\n        return this.health <= 0;\n    }\n\n    // Check if ship is alive\n    isAlive() {\n        return this.health > 0;\n    }\n}\n\n// Factory functions for creating specific ship types\nexport function createPlayerShip(canvasWidth, canvasHeight) {\n    return new Ship({\n        x: canvasWidth / 2,\n        y: canvasHeight - 120,\n        width: 120,\n        height: 90,\n        health: 100,\n        energy: 100,\n        maxEnergy: 100,\n        velocityX: 0.8,\n        direction: 1,\n        minX: 60,\n        maxX: canvasWidth - 60,\n        isPlayer: true\n    });\n}\n\nexport function createEnemyShip(canvasWidth, canvasHeight, level = 1) {\n    const maxHealth = 100 + (level - 1) * 25;\n    return new Ship({\n        x: canvasWidth / 2,\n        y: 90,\n        width: 120,\n        height: 90,\n        health: maxHealth,\n        maxHealth: maxHealth,\n        velocityX: 0.6,\n        direction: -1,\n        minX: 60,\n        maxX: canvasWidth - 60,\n        isEnemy: true\n    });\n}\n","/**\n * WeaponSystem - Handles weapons, projectiles, and combat mechanics\n */\nexport class WeaponSystem {\n    constructor(assetManager) {\n        this.assetManager = assetManager;\n        this.projectiles = [];\n        this.missMessages = [];\n        this.explosions = [];\n        this.shipExplosions = [];\n        \n        // Weapon configurations\n        this.weaponConfigs = {\n            photon: {\n                energyCost: 25,\n                damage: 15,\n                color: '#ff0000',\n                speed: 0.005,\n                arcHeight: { min: 80, max: 200 }\n            },\n            phaser: {\n                energyCost: 50,\n                damage: 10,\n                duration: 500,\n                instant: true\n            },\n            quantum: {\n                energyCost: 50,\n                damage: 20,\n                color: '#ffffff',\n                speed: 0.006,\n                arcHeight: { min: 100, max: 250 },\n                hasParticles: true\n            }\n        };\n    }\n\n    // Fire a weapon from a ship\n    fireWeapon(weaponType, shooterShip, targetShip) {\n        const config = this.weaponConfigs[weaponType];\n        if (!config) {\n            console.error(`Unknown weapon type: ${weaponType}`);\n            return false;\n        }\n\n        // Check energy cost for player ships\n        if (shooterShip.isPlayer && !shooterShip.hasEnergy(config.energyCost)) {\n            console.log(`Insufficient energy for ${weaponType}! Need ${config.energyCost}, have ${shooterShip.energy}`);\n            return false;\n        }\n\n        // Consume energy\n        if (shooterShip.isPlayer) {\n            shooterShip.consumeEnergy(config.energyCost);\n        }\n\n        // Handle phaser (instant hit)\n        if (config.instant) {\n            this.createPhaserBeam(shooterShip, targetShip, config);\n            this.assetManager.playWeaponSound(weaponType);\n            \n            // Apply damage immediately for phaser\n            const wasDestroyed = targetShip.takeDamage(config.damage);\n            if (wasDestroyed) {\n                this.createShipExplosion(targetShip);\n            }\n            return true;\n        }\n\n        // Create projectile for torpedoes\n        const projectile = this.createProjectile(weaponType, shooterShip, targetShip, config);\n        this.projectiles.push(projectile);\n        \n        // Play weapon sound\n        if (shooterShip.isPlayer) {\n            this.assetManager.playWeaponSound(weaponType);\n        } else {\n            this.assetManager.playEnemyWeaponSound('torpedo');\n        }\n\n        return true;\n    }\n\n    // Fire enemy weapons\n    fireEnemyWeapon(enemyShip, playerShip, level = 1) {\n        const weaponTypes = ['phaser', 'torpedo'];\n        const weaponType = weaponTypes[Math.floor(Math.random() * weaponTypes.length)];\n        \n        if (weaponType === 'phaser') {\n            // Enemy phaser beam\n            const beam = {\n                startX: enemyShip.x,\n                startY: enemyShip.y + enemyShip.height/2,\n                endX: playerShip.x,\n                endY: playerShip.y,\n                duration: 500,\n                startTime: Date.now(),\n                type: 'enemy_phaser',\n                damage: 15 + level * 2\n            };\n            \n            this.projectiles.push(beam);\n            this.assetManager.playEnemyWeaponSound('phaser');\n            \n            // Apply damage immediately for enemy phaser\n            const wasDestroyed = playerShip.takeDamage(beam.damage);\n            if (wasDestroyed) {\n                this.createShipExplosion(playerShip);\n            }\n        } else {\n            // Enemy torpedo\n            const projectile = {\n                x: enemyShip.x,\n                y: enemyShip.y + enemyShip.height/2 + 10,\n                startX: enemyShip.x,\n                startY: enemyShip.y + enemyShip.height/2 + 10,\n                targetX: playerShip.x,\n                targetY: playerShip.y,\n                progress: 0,\n                arcHeight: 60 + Math.random() * 80,\n                arcDirection: Math.random() < 0.5 ? -1 : 1,\n                speed: 0.008 + level * 0.001,\n                width: 4,\n                height: 12,\n                damage: 20 + level * 3,\n                color: '#00ff00',\n                type: 'enemy_torpedo',\n                trail: [],\n                useCircularArc: true,\n                isEnemyProjectile: true\n            };\n            \n            this.projectiles.push(projectile);\n            this.assetManager.playEnemyWeaponSound('torpedo');\n        }\n        \n        console.log(`Enemy fired ${weaponType}!`);\n    }\n\n    createProjectile(weaponType, shooterShip, targetShip, config) {\n        const isEnemy = shooterShip.isEnemy;\n        const startY = isEnemy ? \n            shooterShip.y + shooterShip.height/2 + 10 : \n            shooterShip.y - shooterShip.height/2 - 10;\n\n        const projectile = {\n            x: shooterShip.x,\n            y: startY,\n            startX: shooterShip.x,\n            startY: startY,\n            targetX: targetShip.x,\n            targetY: targetShip.y,\n            progress: 0,\n            arcHeight: config.arcHeight.min + Math.random() * (config.arcHeight.max - config.arcHeight.min),\n            arcDirection: Math.random() < 0.5 ? -1 : 1,\n            speed: config.speed,\n            width: weaponType === 'quantum' ? 6 : 4,\n            height: weaponType === 'quantum' ? 20 : 15,\n            damage: config.damage,\n            color: config.color,\n            type: weaponType,\n            trail: [],\n            useCircularArc: true,\n            isEnemyProjectile: isEnemy\n        };\n\n        // Add particles for quantum torpedoes\n        if (config.hasParticles) {\n            projectile.particles = [];\n        }\n\n        return projectile;\n    }\n\n    createPhaserBeam(shooterShip, targetShip, config) {\n        const isEnemy = shooterShip.isEnemy;\n        const beam = {\n            startX: shooterShip.x,\n            startY: isEnemy ? \n                shooterShip.y + shooterShip.height/2 : \n                shooterShip.y - shooterShip.height/2,\n            endX: targetShip.x,\n            endY: targetShip.y,\n            duration: config.duration,\n            startTime: Date.now(),\n            type: isEnemy ? 'enemy_phaser' : 'phaser'\n        };\n        \n        this.projectiles.push(beam);\n    }\n\n    // Update all projectiles\n    update(playerShip, enemyShip) {\n        this.updateProjectiles(playerShip, enemyShip);\n        this.updateMissMessages();\n        this.updateShipExplosions();\n    }\n\n    updateProjectiles(playerShip, enemyShip) {\n        this.projectiles = this.projectiles.filter(projectile => {\n            // Handle phaser beams\n            if (projectile.type === 'phaser' || projectile.type === 'enemy_phaser') {\n                return Date.now() - projectile.startTime < projectile.duration;\n            }\n            \n            // Handle explosion particles\n            if (projectile.type === 'explosion') {\n                projectile.x += projectile.vx;\n                projectile.y += projectile.vy;\n                projectile.life--;\n                return projectile.life > 0;\n            }\n            \n            // Handle torpedoes with arc movement\n            if (projectile.progress !== undefined) {\n                this.updateProjectileArc(projectile);\n                \n                // Add trail effect\n                if (projectile.trail) {\n                    projectile.trail.push({x: projectile.x, y: projectile.y});\n                    const maxTrailLength = projectile.useCircularArc ? 30 : 8;\n                    if (projectile.trail.length > maxTrailLength) {\n                        projectile.trail.shift();\n                    }\n                }\n                \n                // Add particles for quantum torpedoes\n                this.updateQuantumParticles(projectile);\n                \n                // Check collisions\n                const collision = this.checkCollisions(projectile, playerShip, enemyShip);\n                if (collision) {\n                    return false; // Remove projectile\n                }\n                \n                // Remove if arc completed without hit\n                if (projectile.progress >= 1.0) {\n                    this.createMissMessage(projectile, playerShip, enemyShip);\n                    return false;\n                }\n            }\n            \n            return true;\n        });\n    }\n\n    updateProjectileArc(projectile) {\n        projectile.progress += projectile.speed;\n        \n        // Store previous position for rotation\n        const prevX = projectile.x;\n        const prevY = projectile.y;\n        \n        const t = projectile.progress;\n        \n        if (projectile.useCircularArc) {\n            // Cache expensive calculations on first use\n            if (!projectile.cached) {\n                const deltaX = projectile.targetX - projectile.startX;\n                const deltaY = projectile.targetY - projectile.startY;\n                const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n                \n                projectile.cached = {\n                    deltaX: deltaX,\n                    deltaY: deltaY,\n                    perpX: -deltaY / distance,\n                    perpY: deltaX / distance\n                };\n            }\n            \n            // Create sideways rainbow arc using cached values\n            const baseX = projectile.startX + projectile.cached.deltaX * t;\n            const baseY = projectile.startY + projectile.cached.deltaY * t;\n            \n            // Arc displacement: sine wave for smooth curve\n            const arcOffset = Math.sin(Math.PI * t) * projectile.arcHeight * projectile.arcDirection;\n            \n            projectile.x = baseX + projectile.cached.perpX * arcOffset;\n            projectile.y = baseY + projectile.cached.perpY * arcOffset;\n        }\n        \n        // Calculate rotation angle\n        if (prevX !== undefined && prevY !== undefined) {\n            const dx = projectile.x - prevX;\n            const dy = projectile.y - prevY;\n            projectile.rotation = Math.atan2(dy, dx);\n        }\n        \n        // Ensure final position\n        if (projectile.progress >= 1.0) {\n            projectile.x = projectile.targetX;\n            projectile.y = projectile.targetY;\n        }\n    }\n\n    updateQuantumParticles(projectile) {\n        if (projectile.type === 'quantum' && projectile.particles) {\n            // Add new particles\n            for (let i = 0; i < 3; i++) {\n                projectile.particles.push({\n                    x: projectile.x + (Math.random() - 0.5) * 10,\n                    y: projectile.y + (Math.random() - 0.5) * 10,\n                    vx: (Math.random() - 0.5) * 2,\n                    vy: (Math.random() - 0.5) * 2,\n                    life: 30,\n                    maxLife: 30\n                });\n            }\n            \n            // Update existing particles\n            projectile.particles = projectile.particles.filter(particle => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                particle.life--;\n                return particle.life > 0;\n            });\n        }\n    }\n\n    checkCollisions(projectile, playerShip, enemyShip) {\n        const targetShip = projectile.isEnemyProjectile ? playerShip : enemyShip;\n        \n        if (targetShip.contains(projectile.x, projectile.y)) {\n            const wasDestroyed = targetShip.takeDamage(projectile.damage);\n            this.createExplosion(projectile.x, projectile.y);\n            \n            if (wasDestroyed) {\n                this.createShipExplosion(targetShip);\n            }\n            \n            return true; // Collision detected\n        }\n        \n        return false;\n    }\n\n    createExplosion(x, y) {\n        this.assetManager.playExplosionSound();\n        \n        // Add explosion particles\n        for (let i = 0; i < 20; i++) {\n            this.projectiles.push({\n                x: x + (Math.random() - 0.5) * 20,\n                y: y + (Math.random() - 0.5) * 20,\n                vx: (Math.random() - 0.5) * 4,\n                vy: (Math.random() - 0.5) * 4,\n                life: 30,\n                maxLife: 30,\n                size: Math.random() * 3 + 1,\n                type: 'explosion'\n            });\n        }\n    }\n\n    createShipExplosion(ship) {\n        this.assetManager.playExplosionSound();\n        \n        const explosionData = {\n            x: ship.x,\n            y: ship.y,\n            width: ship.width,\n            height: ship.height,\n            particles: [],\n            startTime: Date.now(),\n            duration: 3000,\n            isPlayer: ship.isPlayer\n        };\n        \n        // Create many explosion particles\n        for (let i = 0; i < 80; i++) {\n            explosionData.particles.push({\n                x: ship.x + (Math.random() - 0.5) * ship.width,\n                y: ship.y + (Math.random() - 0.5) * ship.height,\n                vx: (Math.random() - 0.5) * 8,\n                vy: (Math.random() - 0.5) * 8,\n                life: 60 + Math.random() * 120,\n                maxLife: 60 + Math.random() * 120,\n                size: Math.random() * 6 + 2,\n                color: Math.random() < 0.5 ? '#ff6600' : '#ffff00',\n                type: 'shipExplosion'\n            });\n        }\n        \n        // Add secondary explosion waves\n        for (let wave = 0; wave < 3; wave++) {\n            setTimeout(() => {\n                for (let i = 0; i < 30; i++) {\n                    explosionData.particles.push({\n                        x: ship.x + (Math.random() - 0.5) * ship.width * (1 + wave * 0.5),\n                        y: ship.y + (Math.random() - 0.5) * ship.height * (1 + wave * 0.5),\n                        vx: (Math.random() - 0.5) * (6 - wave),\n                        vy: (Math.random() - 0.5) * (6 - wave),\n                        life: 40 + Math.random() * 80,\n                        maxLife: 40 + Math.random() * 80,\n                        size: Math.random() * 4 + 1,\n                        color: wave === 0 ? '#ff0000' : (wave === 1 ? '#ff6600' : '#ffff00'),\n                        type: 'shipExplosion'\n                    });\n                }\n                if (wave < 2) {\n                    this.assetManager.playExplosionSound();\n                }\n            }, wave * 500);\n        }\n        \n        this.shipExplosions.push(explosionData);\n        console.log(`${ship.isPlayer ? 'Player' : 'Enemy'} ship explosion created!`);\n    }\n\n    createMissMessage(projectile, playerShip, enemyShip) {\n        const targetShip = projectile.isEnemyProjectile ? playerShip : enemyShip;\n        const messageX = targetShip.x + targetShip.width/2 + 20;\n        const messageY = targetShip.y;\n        \n        this.missMessages.push({\n            x: messageX,\n            y: messageY,\n            text: 'MISSED',\n            life: 120,\n            maxLife: 120,\n            color: '#ff0000',\n            fontSize: 16,\n            startTime: Date.now()\n        });\n        \n        console.log(`${projectile.isEnemyProjectile ? 'Enemy' : 'Player'} torpedo missed!`);\n    }\n\n    updateMissMessages() {\n        this.missMessages = this.missMessages.filter(message => {\n            message.life--;\n            return message.life > 0;\n        });\n    }\n\n    updateShipExplosions() {\n        this.shipExplosions.forEach(explosion => {\n            explosion.particles = explosion.particles.filter(particle => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                particle.life--;\n                \n                // Add gravity effect\n                particle.vy += 0.1;\n                particle.vx *= 0.99;\n                particle.vy *= 0.99;\n                \n                return particle.life > 0;\n            });\n        });\n        \n        // Remove finished explosions\n        this.shipExplosions = this.shipExplosions.filter(explosion => {\n            const elapsed = Date.now() - explosion.startTime;\n            return elapsed < explosion.duration && explosion.particles.length > 0;\n        });\n    }\n\n    // Clear all projectiles and effects\n    clear() {\n        this.projectiles = [];\n        this.missMessages = [];\n        this.explosions = [];\n        this.shipExplosions = [];\n    }\n\n    // Getters for rendering\n    getProjectiles() {\n        return this.projectiles;\n    }\n\n    getMissMessages() {\n        return this.missMessages;\n    }\n\n    getShipExplosions() {\n        return this.shipExplosions;\n    }\n}\n","/**\n * GameRenderer - Handles all drawing and rendering operations\n */\nexport class GameRenderer {\n    constructor(canvas, assetManager) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.width = canvas.width;\n        this.height = canvas.height;\n        this.assetManager = assetManager;\n        \n        // Initialize starfield\n        this.stars = [];\n        this.initializeStars();\n    }\n\n    initializeStars() {\n        for (let i = 0; i < 200; i++) {\n            this.stars.push({\n                x: Math.random() * this.width,\n                y: Math.random() * this.height,\n                size: Math.random() * 2 + 0.5,\n                speed: Math.random() * 0.5 + 0.1,\n                brightness: Math.random() * 0.8 + 0.2\n            });\n        }\n    }\n\n    updateStars() {\n        this.stars.forEach(star => {\n            star.y += star.speed;\n            if (star.y > this.height) {\n                star.y = 0;\n                star.x = Math.random() * this.width;\n            }\n        });\n    }\n\n    render(gameState) {\n        // Clear canvas\n        this.ctx.fillStyle = '#000';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        \n        // Draw stars\n        this.drawStars();\n        \n        // Show loading message if assets aren't ready\n        if (!this.assetManager.isLoaded()) {\n            this.drawLoadingScreen();\n            return;\n        }\n        \n        // Draw ships\n        this.drawShips(gameState.playerShip, gameState.enemyShip);\n        \n        // Draw projectiles\n        this.drawProjectiles(gameState.weaponSystem.getProjectiles());\n        \n        // Draw miss messages\n        this.drawMissMessages(gameState.weaponSystem.getMissMessages());\n        \n        // Draw ship explosions\n        this.drawShipExplosions(gameState.weaponSystem.getShipExplosions());\n        \n        // Draw game over screen if needed\n        if (gameState.gameOver) {\n            this.drawGameOverScreen(gameState);\n        }\n    }\n\n    drawLoadingScreen() {\n        this.ctx.fillStyle = '#00ff00';\n        this.ctx.font = '24px Courier New';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('Loading Assets...', this.width / 2, this.height / 2);\n        this.ctx.textAlign = 'left';\n    }\n\n    drawStars() {\n        this.ctx.fillStyle = '#ffffff';\n        this.stars.forEach(star => {\n            this.ctx.globalAlpha = star.brightness;\n            this.ctx.fillRect(star.x, star.y, star.size, star.size);\n        });\n        this.ctx.globalAlpha = 1;\n    }\n\n    drawShips(playerShip, enemyShip) {\n        // Draw player ship (only if alive)\n        if (playerShip.isAlive()) {\n            const playerImage = this.assetManager.getImage('playerShip');\n            if (playerImage && playerImage.complete) {\n                this.drawShipWithTransparency(\n                    playerImage,\n                    playerShip.x - playerShip.width/2,\n                    playerShip.y - playerShip.height/2,\n                    playerShip.width,\n                    playerShip.height,\n                    '#00ffff'\n                );\n            } else {\n                // Fallback rectangle\n                this.ctx.fillStyle = '#00ff00';\n                this.ctx.fillRect(\n                    playerShip.x - playerShip.width/2,\n                    playerShip.y - playerShip.height/2,\n                    playerShip.width,\n                    playerShip.height\n                );\n            }\n        }\n        \n        // Draw enemy ship (only if alive)\n        if (enemyShip.isAlive()) {\n            const enemyImage = this.assetManager.getImage('enemyShip');\n            if (enemyImage && enemyImage.complete) {\n                this.drawShipWithTransparency(\n                    enemyImage,\n                    enemyShip.x - enemyShip.width/2,\n                    enemyShip.y - enemyShip.height/2,\n                    enemyShip.width,\n                    enemyShip.height,\n                    '#ff6600'\n                );\n            } else {\n                // Fallback rectangle\n                this.ctx.fillStyle = '#ff0000';\n                this.ctx.fillRect(\n                    enemyShip.x - enemyShip.width/2,\n                    enemyShip.y - enemyShip.height/2,\n                    enemyShip.width,\n                    enemyShip.height\n                );\n            }\n        }\n    }\n\n    drawShipWithTransparency(image, x, y, width, height, glowColor) {\n        // Use a cached processed image to avoid reprocessing every frame\n        const cacheKey = `${image.src}_${width}_${height}`;\n        \n        if (!this.processedImageCache) {\n            this.processedImageCache = new Map();\n        }\n        \n        let processedCanvas = this.processedImageCache.get(cacheKey);\n        \n        if (!processedCanvas) {\n            // Create and cache the processed image\n            processedCanvas = document.createElement('canvas');\n            const tempCtx = processedCanvas.getContext('2d');\n            processedCanvas.width = width;\n            processedCanvas.height = height;\n            \n            // Draw the image to temp canvas\n            tempCtx.drawImage(image, 0, 0, width, height);\n            \n            // Get image data to process transparency\n            const imageData = tempCtx.getImageData(0, 0, width, height);\n            const data = imageData.data;\n            \n            // Remove background (make white/light colors transparent)\n            for (let i = 0; i < data.length; i += 4) {\n                const r = data[i];\n                const g = data[i + 1];\n                const b = data[i + 2];\n                \n                // Check if pixel is close to white/background color\n                const brightness = (r + g + b) / 3;\n                const isBackground = brightness > 200 && \n                                   Math.abs(r - g) < 30 && \n                                   Math.abs(g - b) < 30 && \n                                   Math.abs(r - b) < 30;\n                \n                if (isBackground) {\n                    data[i + 3] = 0; // Make transparent\n                }\n            }\n            \n            // Put the processed data back\n            tempCtx.putImageData(imageData, 0, 0);\n            \n            // Cache the processed canvas\n            this.processedImageCache.set(cacheKey, processedCanvas);\n        }\n        \n        // Draw the cached processed image to main canvas\n        this.ctx.drawImage(processedCanvas, x, y);\n    }\n\n    drawProjectiles(projectiles) {\n        projectiles.forEach(projectile => {\n            if (projectile.type === 'phaser' || projectile.type === 'enemy_phaser') {\n                this.drawPhaserBeam(projectile);\n            } else if (projectile.type === 'explosion') {\n                this.drawExplosionParticle(projectile);\n            } else {\n                this.drawTorpedo(projectile);\n            }\n        });\n    }\n\n    drawPhaserBeam(beam) {\n        const elapsed = Date.now() - beam.startTime;\n        const alpha = 1 - (elapsed / beam.duration);\n        \n        // Choose color based on beam type\n        const color = beam.type === 'enemy_phaser' ? '#00ff00' : '#ff0000';\n        \n        this.ctx.globalAlpha = alpha;\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 4;\n        this.ctx.shadowColor = color;\n        this.ctx.shadowBlur = 10;\n        \n        this.ctx.beginPath();\n        this.ctx.moveTo(beam.startX, beam.startY);\n        this.ctx.lineTo(beam.endX, beam.endY);\n        this.ctx.stroke();\n        \n        this.ctx.shadowBlur = 0;\n        this.ctx.globalAlpha = 1;\n    }\n\n    drawExplosionParticle(particle) {\n        const alpha = particle.life / particle.maxLife;\n        this.ctx.globalAlpha = alpha;\n        this.ctx.fillStyle = `hsl(${30 + Math.random() * 30}, 100%, 50%)`;\n        this.ctx.fillRect(particle.x, particle.y, particle.size, particle.size);\n        this.ctx.globalAlpha = 1;\n    }\n\n    drawTorpedo(projectile) {\n        // Draw trail as small circles\n        if (projectile.trail) {\n            projectile.trail.forEach((point, index) => {\n                const alpha = index / projectile.trail.length * 0.5;\n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = projectile.color;\n                \n                this.ctx.beginPath();\n                this.ctx.arc(point.x, point.y, 1.5, 0, Math.PI * 2);\n                this.ctx.fill();\n            });\n            this.ctx.globalAlpha = 1;\n        }\n        \n        // Draw particles for quantum torpedoes\n        if (projectile.particles) {\n            projectile.particles.forEach(particle => {\n                const alpha = particle.life / particle.maxLife;\n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = projectile.color;\n                \n                this.ctx.beginPath();\n                this.ctx.arc(particle.x, particle.y, 1, 0, Math.PI * 2);\n                this.ctx.fill();\n            });\n            this.ctx.globalAlpha = 1;\n        }\n        \n        // Draw main projectile as a circle\n        this.ctx.fillStyle = projectile.color;\n        this.ctx.shadowColor = projectile.color;\n        this.ctx.shadowBlur = 10;\n        \n        const radius = Math.max(projectile.width, projectile.height) / 2;\n        \n        this.ctx.beginPath();\n        this.ctx.arc(projectile.x, projectile.y, radius, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        // Add bright center glow\n        this.ctx.shadowBlur = 5;\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        this.ctx.beginPath();\n        this.ctx.arc(projectile.x, projectile.y, radius * 0.4, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        this.ctx.shadowBlur = 0;\n    }\n\n    drawMissMessages(missMessages) {\n        missMessages.forEach(message => {\n            const alpha = message.life / message.maxLife;\n            \n            this.ctx.globalAlpha = alpha;\n            this.ctx.fillStyle = message.color;\n            this.ctx.font = `bold ${message.fontSize}px Courier New`;\n            this.ctx.textAlign = 'left';\n            this.ctx.shadowColor = message.color;\n            this.ctx.shadowBlur = 8;\n            \n            this.ctx.fillText(message.text, message.x, message.y);\n            \n            this.ctx.globalAlpha = 1;\n            this.ctx.shadowBlur = 0;\n            this.ctx.textAlign = 'left';\n        });\n    }\n\n    drawShipExplosions(shipExplosions) {\n        shipExplosions.forEach(explosion => {\n            explosion.particles.forEach(particle => {\n                const alpha = particle.life / particle.maxLife;\n                \n                this.ctx.globalAlpha = alpha;\n                this.ctx.fillStyle = particle.color;\n                this.ctx.shadowColor = particle.color;\n                this.ctx.shadowBlur = 8;\n                \n                this.ctx.beginPath();\n                this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n                this.ctx.fill();\n                \n                // Add bright center for dramatic effect\n                if (alpha > 0.5) {\n                    this.ctx.fillStyle = '#ffffff';\n                    this.ctx.globalAlpha = alpha * 0.8;\n                    this.ctx.beginPath();\n                    this.ctx.arc(particle.x, particle.y, particle.size * 0.4, 0, Math.PI * 2);\n                    this.ctx.fill();\n                }\n            });\n        });\n        \n        this.ctx.globalAlpha = 1;\n        this.ctx.shadowBlur = 0;\n    }\n\n    drawGameOverScreen(gameState) {\n        // Semi-transparent overlay\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        \n        // Game Over title\n        this.ctx.fillStyle = '#ff0000';\n        this.ctx.font = 'bold 48px Courier New';\n        this.ctx.textAlign = 'center';\n        this.ctx.shadowColor = '#ff0000';\n        this.ctx.shadowBlur = 15;\n        this.ctx.fillText(gameState.gameOverMessage, this.width / 2, this.height / 2 - 40);\n        \n        // Subtitle\n        this.ctx.fillStyle = '#ffffff';\n        this.ctx.font = '24px Courier New';\n        this.ctx.shadowColor = '#ffffff';\n        this.ctx.shadowBlur = 8;\n        this.ctx.fillText(`Hull Integrity: ${gameState.playerShip.health}%`, this.width / 2, this.height / 2 + 20);\n        this.ctx.fillText(`Final Level Reached: ${gameState.level}`, this.width / 2, this.height / 2 + 60);\n        \n        // Restart instruction\n        this.ctx.fillStyle = '#00ff00';\n        this.ctx.font = '20px Courier New';\n        this.ctx.shadowColor = '#00ff00';\n        this.ctx.shadowBlur = 10;\n        this.ctx.fillText('Click RESTART to begin new mission', this.width / 2, this.height / 2 + 120);\n        \n        // Reset text styling\n        this.ctx.textAlign = 'left';\n        this.ctx.shadowBlur = 0;\n    }\n\n    // Update animations (call this every frame)\n    update() {\n        this.updateStars();\n    }\n}\n","/**\n * GameUI - Handles UI updates and management\n */\nexport class GameUI {\n    constructor() {\n        this.weaponConfigs = {\n            photon: 25,\n            phaser: 50,\n            quantum: 50\n        };\n        \n        this.initializeEventListeners();\n    }\n\n    initializeEventListeners() {\n        // These will be set by the main game class\n        this.weaponCallbacks = {};\n        this.repairCallbacks = {};\n        this.gameCallbacks = {};\n    }\n\n    // Set callback functions for weapon firing\n    setWeaponCallbacks(callbacks) {\n        this.weaponCallbacks = callbacks;\n        \n        const photonBtn = document.getElementById('photonBtn');\n        const phaserBtn = document.getElementById('phaserBtn');\n        const quantumBtn = document.getElementById('quantumBtn');\n        \n        photonBtn.addEventListener('click', () => this.fireWeapon('photon'));\n        phaserBtn.addEventListener('click', () => this.fireWeapon('phaser'));\n        quantumBtn.addEventListener('click', () => this.fireWeapon('quantum'));\n    }\n\n    // Set callback functions for repair actions\n    setRepairCallbacks(callbacks) {\n        this.repairCallbacks = callbacks;\n        \n        const repairHullBtn = document.getElementById('repairHullBtn');\n        const repairEnergyBtn = document.getElementById('repairEnergyBtn');\n        \n        repairHullBtn.addEventListener('click', () => this.showMathChallenge('hull'));\n        repairEnergyBtn.addEventListener('click', () => this.showMathChallenge('energy'));\n    }\n\n    // Set callback functions for game actions\n    setGameCallbacks(callbacks) {\n        this.gameCallbacks = callbacks;\n        \n        const restartBtn = document.getElementById('restartBtn');\n        const continueBtn = document.getElementById('continueBtn');\n        const startGameBtn = document.getElementById('startGameBtn');\n        \n        restartBtn.addEventListener('click', () => {\n            this.gameCallbacks.restart();\n            this.hideRestartButton();\n        });\n        \n        continueBtn.addEventListener('click', () => {\n            this.gameCallbacks.continue();\n            this.hideContinueButton();\n        });\n        \n        startGameBtn.addEventListener('click', () => this.gameCallbacks.start());\n    }\n\n    fireWeapon(weaponType) {\n        if (this.weaponCallbacks.fire) {\n            this.weaponCallbacks.fire(weaponType);\n        }\n        \n        // Add visual feedback\n        const button = document.getElementById(weaponType + 'Btn');\n        button.classList.add('firing');\n        setTimeout(() => button.classList.remove('firing'), 500);\n    }\n\n    showMathChallenge(repairType) {\n        if (this.repairCallbacks.show) {\n            this.repairCallbacks.show(repairType);\n        }\n    }\n\n    // Update all UI elements\n    updateUI(gameState) {\n        this.updateHealthBars(gameState);\n        this.updateWeaponStatus(gameState.playerShip);\n        this.updateLevelDisplay(gameState.level);\n        this.updateEnemyLabel(gameState.level);\n    }\n\n    updateHealthBars(gameState) {\n        // Update player health bar\n        const hullBar = document.querySelector('.hull-integrity');\n        if (hullBar) {\n            hullBar.style.width = gameState.playerShip.health + '%';\n        }\n        \n        // Update player energy bar\n        const energyBar = document.querySelector('.energy-reserves');\n        if (energyBar) {\n            const energyPercent = gameState.playerShip.getEnergyPercent();\n            energyBar.style.width = energyPercent + '%';\n        }\n        \n        // Update enemy health bar\n        const enemyHealthBar = document.querySelector('.enemy-health');\n        if (enemyHealthBar) {\n            const enemyHealthPercent = gameState.enemyShip.getHealthPercent();\n            enemyHealthBar.style.width = enemyHealthPercent + '%';\n        }\n    }\n\n    updateWeaponStatus(playerShip) {\n        Object.keys(this.weaponConfigs).forEach(weaponType => {\n            const button = document.getElementById(weaponType + 'Btn');\n            const statusElement = button.querySelector('.weapon-status');\n            const energyCost = this.weaponConfigs[weaponType];\n            \n            if (playerShip.hasEnergy(energyCost)) {\n                statusElement.textContent = 'Ready';\n                statusElement.style.color = '#00FF00';\n                statusElement.style.borderColor = '#00FF00';\n                statusElement.style.backgroundColor = 'rgba(0, 255, 0, 0.1)';\n                button.style.opacity = '1';\n                button.style.cursor = 'pointer';\n            } else {\n                statusElement.textContent = 'No Energy';\n                statusElement.style.color = '#FF4444';\n                statusElement.style.borderColor = '#FF4444';\n                statusElement.style.backgroundColor = 'rgba(255, 68, 68, 0.1)';\n                button.style.opacity = '0.6';\n                button.style.cursor = 'not-allowed';\n            }\n        });\n    }\n\n    updateLevelDisplay(level) {\n        const levelNumber = document.querySelector('.level-number');\n        if (levelNumber) {\n            levelNumber.textContent = level;\n        }\n    }\n\n    updateEnemyLabel(level) {\n        const enemyLabel = document.querySelector('.enemy-label');\n        if (enemyLabel) {\n            enemyLabel.textContent = `Enemy (Level ${level}):`;\n        }\n    }\n\n    // Screen management\n    showStartupScreen() {\n        const startupScreen = document.getElementById('startupScreen');\n        const gameContainer = document.getElementById('gameContainer');\n        \n        startupScreen.style.display = 'flex';\n        gameContainer.style.display = 'none';\n    }\n\n    showGameScreen() {\n        const startupScreen = document.getElementById('startupScreen');\n        const gameContainer = document.getElementById('gameContainer');\n        \n        startupScreen.style.display = 'none';\n        gameContainer.style.display = 'flex';\n    }\n\n    // Button visibility management\n    showRestartButton() {\n        const restartContainer = document.getElementById('restartContainer');\n        if (restartContainer) {\n            restartContainer.style.display = 'block';\n        }\n    }\n\n    hideRestartButton() {\n        const restartContainer = document.getElementById('restartContainer');\n        if (restartContainer) {\n            restartContainer.style.display = 'none';\n        }\n    }\n\n    showContinueButton() {\n        const continueContainer = document.getElementById('continueContainer');\n        if (continueContainer) {\n            continueContainer.style.display = 'block';\n        }\n    }\n\n    hideContinueButton() {\n        const continueContainer = document.getElementById('continueContainer');\n        if (continueContainer) {\n            continueContainer.style.display = 'none';\n        }\n    }\n\n    // Panel management\n    showWeaponsPanel() {\n        const weaponsPanel = document.querySelector('.weapons-panel');\n        if (weaponsPanel) {\n            weaponsPanel.style.display = 'block';\n        }\n    }\n\n    hideWeaponsPanel() {\n        const weaponsPanel = document.querySelector('.weapons-panel');\n        if (weaponsPanel) {\n            weaponsPanel.style.display = 'none';\n        }\n    }\n\n    // Reset UI to initial state\n    reset() {\n        this.hideRestartButton();\n        this.hideContinueButton();\n        this.showWeaponsPanel();\n        this.updateLevelDisplay(1);\n        this.updateEnemyLabel(1);\n        \n        // Reset health bars to full\n        const hullBar = document.querySelector('.hull-integrity');\n        const energyBar = document.querySelector('.energy-reserves');\n        const enemyHealthBar = document.querySelector('.enemy-health');\n        \n        if (hullBar) hullBar.style.width = '100%';\n        if (energyBar) energyBar.style.width = '100%';\n        if (enemyHealthBar) enemyHealthBar.style.width = '100%';\n    }\n\n    // Show loading state\n    showLoading() {\n        // This could be enhanced with a loading overlay\n        console.log('Loading game assets...');\n    }\n\n    hideLoading() {\n        console.log('Assets loaded, game ready!');\n    }\n}\n","import { MathChallenge } from './MathChallenge.js';\nimport { AssetManager } from './AssetManager.js';\nimport { Ship, createPlayerShip, createEnemyShip } from './Ship.js';\nimport { WeaponSystem } from './WeaponSystem.js';\nimport { GameRenderer } from './GameRenderer.js';\nimport { GameUI } from './GameUI.js';\n\nclass StarTrekGame {\n    constructor() {\n        this.canvas = document.getElementById('gameCanvas');\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        \n        // Initialize modules\n        this.assetManager = new AssetManager();\n        this.mathChallenge = new MathChallenge();\n        this.weaponSystem = new WeaponSystem(this.assetManager);\n        this.renderer = new GameRenderer(this.canvas, this.assetManager);\n        this.ui = new GameUI();\n        \n        // Game state\n        this.level = 1;\n        this.gameOver = false;\n        this.gameWon = false;\n        this.gameOverMessage = '';\n        this.levelCompleted = false;\n        this.gameStarted = false;\n        this.gamePaused = false;\n        \n        // Enemy shooting system\n        this.lastEnemyShot = Date.now();\n        this.enemyShootInterval = 6000; // Base interval in milliseconds\n        \n        // Initialize game\n        this.initializeShips();\n        this.initializeControls();\n        \n        // Start render loop\n        this.renderLoop();\n    }\n    \n\n    \n    initializeShips() {\n        // Create ships using factory functions\n        this.playerShip = createPlayerShip(this.width, this.height);\n        this.enemyShip = createEnemyShip(this.width, this.height, this.level);\n    }\n    \n    initializeControls() {\n        // Set up UI callbacks\n        this.ui.setWeaponCallbacks({\n            fire: (weaponType) => this.fireWeapon(weaponType)\n        });\n        \n        this.ui.setRepairCallbacks({\n            show: (repairType) => this.showMathChallenge(repairType)\n        });\n        \n        this.ui.setGameCallbacks({\n            start: () => this.startGame(),\n            restart: () => this.restartGame(),\n            continue: () => this.continueToNextLevel()\n        });\n    }\n    \n    startGame() {\n        // Show game screen\n        this.ui.showGameScreen();\n        \n        // Start the game\n        this.gameStarted = true;\n        \n        console.log('Game started!');\n    }\n    \n\n    \n    showMathChallenge(repairType) {\n        // Don't show if game not started, game over, or panel already open\n        if (!this.gameStarted || this.gameOver || this.mathChallenge.isPanelOpen()) {\n            return;\n        }\n        \n        // Pause the game\n        this.gamePaused = true;\n        \n        // Show math challenge with callbacks\n        this.mathChallenge.showChallenge(\n            repairType,\n            (type) => this.applyRepair(type),      // onSuccess\n            (type) => this.applyPenalty(type),     // onFailure\n            () => this.closeMathPanel()            // onCancel\n        );\n    }\n    \n\n    \n    applyRepair(repairType) {\n        if (repairType === 'hull') {\n            this.playerShip.repairHull();\n        } else if (repairType === 'energy') {\n            this.playerShip.rechargeEnergy();\n        }\n    }\n    \n    applyPenalty(repairType) {\n        if (repairType === 'hull') {\n            const wasDestroyed = this.playerShip.takeDamage(1);\n            \n            // Check if player is defeated due to penalty\n            if (wasDestroyed) {\n                this.gameOver = true;\n                this.gameOverMessage = 'MISSION FAILED';\n                this.ui.showRestartButton();\n                this.mathChallenge.closePanel();\n                console.log('Game Over due to penalty!');\n            }\n        } else if (repairType === 'energy') {\n            this.playerShip.consumeEnergy(1);\n            console.log(`Penalty applied to energy! Energy: ${this.playerShip.energy}`);\n        }\n    }\n    \n    closeMathPanel() {\n        // Resume game\n        this.gamePaused = false;\n        \n        console.log('Math challenge closed, game resumed');\n    }\n\n    fireWeapon(weaponType) {\n        // Don't allow firing if game is over, level is completed, not started, or paused\n        if (this.gameOver || this.levelCompleted || !this.gameStarted || this.gamePaused) {\n            return;\n        }\n        \n        // Fire weapon using weapon system\n        const success = this.weaponSystem.fireWeapon(weaponType, this.playerShip, this.enemyShip);\n        \n        if (success && this.enemyShip.isDestroyed()) {\n            this.levelCompleted = true;\n            // Show continue button after a brief delay for explosion\n            setTimeout(() => {\n                this.ui.showContinueButton();\n            }, 1000);\n        }\n    }\n    \n\n    \n    levelUp() {\n        this.level++;\n        \n        // Level up enemy ship\n        this.enemyShip.levelUp(this.level);\n        \n        // Increase enemy firing rate based on level (faster = shorter interval)\n        this.enemyShootInterval = Math.max(800, 6000 - (this.level - 1) * 300);\n        \n        console.log(`Level ${this.level}! Enemy has ${this.enemyShip.maxHealth} health. Firing rate: ${this.enemyShootInterval}ms`);\n    }\n    \n    fireEnemyWeapon() {\n        this.weaponSystem.fireEnemyWeapon(this.enemyShip, this.playerShip, this.level);\n        \n        // Check if player was destroyed\n        if (this.playerShip.isDestroyed()) {\n            this.gameOver = true;\n            this.gameOverMessage = 'MISSION FAILED';\n            setTimeout(() => {\n                this.ui.showRestartButton();\n            }, 1000);\n        }\n    }\n    \n\n    \n    updateShips() {\n        // Don't update ship positions if game is over, not started, or paused\n        if (this.gameOver || !this.gameStarted || this.gamePaused) {\n            return;\n        }\n        \n        // Update ship movements\n        this.playerShip.update();\n        this.enemyShip.update();\n    }\n    \n    updateProjectiles() {\n        // Don't update projectiles if game is over, not started, or paused\n        if (this.gameOver || !this.gameStarted || this.gamePaused) {\n            return;\n        }\n        \n        // Check if enemy should fire (only if level not completed)\n        const currentTime = Date.now();\n        if (currentTime - this.lastEnemyShot > this.enemyShootInterval && \n            this.enemyShip.isAlive() && !this.levelCompleted) {\n            this.fireEnemyWeapon();\n            this.lastEnemyShot = currentTime;\n        }\n        \n        // Update weapon system\n        this.weaponSystem.update(this.playerShip, this.enemyShip);\n    }\n    \n\n    \n    render() {\n        // Create game state object for renderer\n        const gameState = {\n            level: this.level,\n            gameOver: this.gameOver,\n            gameOverMessage: this.gameOverMessage,\n            playerShip: this.playerShip,\n            enemyShip: this.enemyShip,\n            weaponSystem: this.weaponSystem\n        };\n        \n        // Render using the GameRenderer\n        this.renderer.render(gameState);\n        \n        // Update UI\n        this.ui.updateUI(gameState);\n    }\n    \n\n    \n    continueToNextLevel() {\n        this.levelCompleted = false;\n        this.levelUp();\n        \n        // Reset player to full health and energy\n        this.playerShip.reset({\n            x: this.width / 2,\n            y: this.height - 120,\n            health: 100,\n            energy: 100,\n            direction: 1\n        });\n        \n        // Reset enemy ship to initial position (levelUp already handled health)\n        this.enemyShip.reset({\n            x: this.width / 2,\n            y: 90,\n            health: this.enemyShip.maxHealth, // Use the new maxHealth from levelUp\n            direction: -1\n        });\n        \n        // Reset enemy shooting timer\n        this.lastEnemyShot = Date.now();\n        \n        // Clear weapon system\n        this.weaponSystem.clear();\n        \n        console.log(`Advanced to Level ${this.level}! Enemy Health: ${this.enemyShip.maxHealth}`);\n    }\n    \n    restartGame() {\n        // Reset game state\n        this.gameOver = false;\n        this.gameWon = false;\n        this.gameOverMessage = '';\n        this.level = 1;\n        this.levelCompleted = false;\n        this.gameStarted = false;\n        this.gamePaused = false;\n        \n        // Close math panel if open\n        if (this.mathChallenge.isPanelOpen()) {\n            this.mathChallenge.closePanel();\n        }\n        \n        // Show startup screen\n        this.ui.showStartupScreen();\n        \n        // Reset ships\n        this.playerShip.reset({\n            x: this.width / 2,\n            y: this.height - 120,\n            health: 100,\n            energy: 100,\n            direction: 1\n        });\n        \n        this.enemyShip.reset({\n            x: this.width / 2,\n            y: 90,\n            health: 100,\n            direction: -1\n        });\n        \n        // Reset enemy shooting\n        this.lastEnemyShot = Date.now();\n        this.enemyShootInterval = 6000;\n        \n        // Clear weapon system\n        this.weaponSystem.clear();\n        \n        // Reset UI\n        this.ui.reset();\n        \n        console.log('Game restarted!');\n    }\n    \n    renderLoop() {\n        // Always update renderer animations\n        this.renderer.update();\n        \n        // Only update game logic if game is started and not paused\n        if (this.gameStarted && !this.gamePaused) {\n            this.updateShips();\n            this.updateProjectiles();\n        }\n        \n        // Always render\n        this.render();\n        \n        requestAnimationFrame(() => this.renderLoop());\n    }\n}\n\n// Initialize game when page loads\nwindow.addEventListener('load', () => {\n    new StarTrekGame();\n});\n"],"names":["MathChallenge","constructor","this","currentChallenge","panelOpen","initializeEventListeners","cancelBtn","document","getElementById","optionA","optionB","optionC","optionD","addEventListener","closePanel","selectOption","event","key","showChallenge","repairType","onSuccess","onFailure","onCancel","num1","Math","floor","random","num2","correctAnswer","options","generateOptions","correctOptionLetter","correctLetter","updatePanelContent","showPanel","console","log","A","B","C","D","wrongAnswers","length","wrongAnswer","includes","push","allOptions","i","j","find","letter","questionElement","descriptionElement","feedbackElement","textContent","className","querySelector","forEach","id","classList","remove","selectedLetter","selectedBtn","add","correctBtn","setTimeout","weaponsPanel","mathPanel","style","display","isPanelOpen","getCurrentChallenge","AssetManager","images","sounds","loadingComplete","loadPromises","initializeAssets","playerShip","loadImage","enemyShip","photon","loadSound","phaser","quantum","romulanDisruptor","romulanTorpedo","explosion1","explosion2","waitForAssets","then","catch","error","src","img","Image","loadPromise","Promise","resolve","reject","onload","onerror","e","audio","Audio","volume","load","checkAssetsLoaded","allImagesLoaded","Object","values","every","complete","all","getImage","name","getSound","playSound","sound","currentTime","play","playWeaponSound","weaponType","toUpperCase","playEnemyWeaponSound","soundKey","torpedo","playExplosionSound","explosionSounds","randomSound","isLoaded","getAssets","Ship","config","x","y","width","height","health","maxHealth","energy","maxEnergy","velocityX","direction","minX","maxX","isPlayer","isEnemy","update","takeDamage","damage","max","repairHull","amount","min","rechargeEnergy","consumeEnergy","hasEnergy","getBounds","left","right","top","bottom","contains","bounds","reset","levelUp","level","getHealthPercent","getEnergyPercent","isDestroyed","isAlive","WeaponSystem","assetManager","projectiles","missMessages","explosions","shipExplosions","weaponConfigs","energyCost","color","speed","arcHeight","duration","instant","hasParticles","fireWeapon","shooterShip","targetShip","createPhaserBeam","createShipExplosion","projectile","createProjectile","fireEnemyWeapon","weaponTypes","beam","startX","startY","endX","endY","startTime","Date","now","type","targetX","targetY","progress","arcDirection","trail","useCircularArc","isEnemyProjectile","particles","updateProjectiles","updateMissMessages","updateShipExplosions","filter","vx","vy","life","updateProjectileArc","maxTrailLength","shift","updateQuantumParticles","checkCollisions","createMissMessage","prevX","prevY","t","cached","deltaX","deltaY","distance","sqrt","perpX","perpY","baseX","baseY","arcOffset","sin","PI","dx","dy","rotation","atan2","maxLife","particle","wasDestroyed","createExplosion","size","ship","explosionData","wave","messageX","messageY","text","fontSize","message","explosion","clear","getProjectiles","getMissMessages","getShipExplosions","GameRenderer","canvas","ctx","getContext","stars","initializeStars","brightness","updateStars","star","render","gameState","fillStyle","fillRect","drawStars","drawShips","drawProjectiles","weaponSystem","drawMissMessages","drawShipExplosions","gameOver","drawGameOverScreen","drawLoadingScreen","font","textAlign","fillText","globalAlpha","playerImage","drawShipWithTransparency","enemyImage","image","glowColor","cacheKey","processedImageCache","Map","processedCanvas","get","createElement","tempCtx","drawImage","imageData","getImageData","data","r","g","b","abs","putImageData","set","drawPhaserBeam","drawExplosionParticle","drawTorpedo","alpha","strokeStyle","lineWidth","shadowColor","shadowBlur","beginPath","moveTo","lineTo","stroke","point","index","arc","fill","radius","gameOverMessage","GameUI","weaponCallbacks","repairCallbacks","gameCallbacks","setWeaponCallbacks","callbacks","photonBtn","phaserBtn","quantumBtn","setRepairCallbacks","repairHullBtn","repairEnergyBtn","showMathChallenge","setGameCallbacks","restartBtn","continueBtn","startGameBtn","restart","hideRestartButton","continue","hideContinueButton","start","fire","button","show","updateUI","updateHealthBars","updateWeaponStatus","updateLevelDisplay","updateEnemyLabel","hullBar","energyBar","energyPercent","enemyHealthBar","enemyHealthPercent","keys","statusElement","borderColor","backgroundColor","opacity","cursor","levelNumber","enemyLabel","showStartupScreen","startupScreen","gameContainer","showGameScreen","showRestartButton","restartContainer","showContinueButton","continueContainer","showWeaponsPanel","hideWeaponsPanel","showLoading","hideLoading","StarTrekGame","mathChallenge","renderer","ui","gameWon","levelCompleted","gameStarted","gamePaused","lastEnemyShot","enemyShootInterval","initializeShips","initializeControls","renderLoop","canvasWidth","canvasHeight","createEnemyShip","startGame","restartGame","continueToNextLevel","applyRepair","applyPenalty","closeMathPanel","updateShips","requestAnimationFrame","window"],"mappings":"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"}